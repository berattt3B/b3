{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Afyonlu Todo - Task Management Application\n\n## Overview\n\nA full-stack task management application built with React, Express, and TypeScript. The application features a modern Turkish interface for managing tasks with categories, priorities, and mood tracking. It uses a clean architecture with shared schema validation between frontend and backend, implementing both task management and user mood logging functionality.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript and Vite for fast development and building\n- **UI Library**: Shadcn/ui components built on Radix UI primitives for accessible, customizable components\n- **Styling**: Tailwind CSS with CSS variables for theming, supporting both light and dark modes\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **Routing**: Wouter for lightweight client-side routing\n- **Form Handling**: React Hook Form with Zod validation for type-safe form management\n\n### Backend Architecture\n- **Framework**: Express.js with TypeScript for the REST API server\n- **Data Storage**: In-memory storage implementation with interface for future database integration\n- **Schema Validation**: Shared Zod schemas between frontend and backend for type safety\n- **Development**: Hot module replacement with Vite integration for seamless development experience\n\n### Data Storage Solutions\n- **Current**: In-memory storage using Map data structures for tasks and moods\n- **Configured**: Drizzle ORM with PostgreSQL support (Neon Database) ready for production deployment\n- **Schema**: Centralized schema definitions in shared directory with Drizzle table definitions\n\n### Authentication and Authorization\n- **Current**: Hardcoded user (\"Berat\") for demonstration purposes\n- **Session Management**: Express session configuration present but not actively used\n- **Future Ready**: Infrastructure in place for proper authentication implementation\n\n### External Dependencies\n- **Database**: Neon Database (PostgreSQL) configured via Drizzle ORM\n- **UI Components**: Radix UI for accessible component primitives\n- **Development Tools**: Replit-specific plugins for development environment integration\n- **Build Tools**: ESBuild for fast server bundling, Vite for client bundling\n- **Validation**: Zod for runtime type checking and schema validation\n- **Date Handling**: date-fns for date manipulation and formatting\n\n### Key Design Patterns\n- **Monorepo Structure**: Client, server, and shared code in single repository\n- **Type Safety**: End-to-end TypeScript with shared interfaces and schemas\n- **Component Architecture**: Atomic design with reusable UI components\n- **API Design**: RESTful endpoints with consistent error handling and validation\n- **Responsive Design**: Mobile-first approach with Tailwind CSS breakpoints\n- **Theme System**: CSS custom properties for consistent theming across light/dark modes\n\n### Development Features\n- **Hot Reload**: Integrated Vite development server with Express\n- **Path Aliases**: Configured import aliases for clean module resolution\n- **Error Handling**: Runtime error overlays and comprehensive error boundaries\n- **Code Quality**: TypeScript strict mode with comprehensive type checking","size_bytes":3333},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2755},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// basit loglama middleware\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  // global error handler\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // development vs production\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // PORT env varsa onu al, yoksa 5000\n  const port = parseInt(process.env.PORT || \"5000\", 10);\n\n  server.listen(port, \"0.0.0.0\", () => {\n    log(`🚀 Server running at http://0.0.0.0:${port}`);\n  });\n})();\n","size_bytes":1765},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertTaskSchema, insertMoodSchema, insertGoalSchema, insertQuestionLogSchema, insertExamResultSchema, insertFlashcardSchema, insertExamSubjectNetSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport dotenv from \"dotenv\";\ndotenv.config();\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Task routes\n  app.get(\"/api/tasks\", async (req, res) => {\n    try {\n      const tasks = await storage.getTasks();\n      res.json(tasks);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch tasks\" });\n    }\n  });\n\n  app.post(\"/api/tasks\", async (req, res) => {\n    try {\n      const validatedData = insertTaskSchema.parse(req.body);\n      const task = await storage.createTask(validatedData);\n      res.status(201).json(task);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid task data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to create task\" });\n      }\n    }\n  });\n\n  app.put(\"/api/tasks/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const validatedData = insertTaskSchema.partial().parse(req.body);\n      const task = await storage.updateTask(id, validatedData);\n      \n      if (!task) {\n        return res.status(404).json({ message: \"Task not found\" });\n      }\n      \n      res.json(task);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid task data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to update task\" });\n      }\n    }\n  });\n\n  app.patch(\"/api/tasks/:id/toggle\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const task = await storage.toggleTaskComplete(id);\n      \n      if (!task) {\n        return res.status(404).json({ message: \"Task not found\" });\n      }\n      \n      res.json(task);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to toggle task completion\" });\n    }\n  });\n\n  app.delete(\"/api/tasks/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const deleted = await storage.deleteTask(id);\n      \n      if (!deleted) {\n        return res.status(404).json({ message: \"Task not found\" });\n      }\n      \n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete task\" });\n    }\n  });\n\n  // Mood routes\n  app.get(\"/api/moods\", async (req, res) => {\n    try {\n      const moods = await storage.getMoods();\n      res.json(moods);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch moods\" });\n    }\n  });\n\n  app.get(\"/api/moods/latest\", async (req, res) => {\n    try {\n      const mood = await storage.getLatestMood();\n      res.json(mood);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch latest mood\" });\n    }\n  });\n\n  app.post(\"/api/moods\", async (req, res) => {\n    try {\n      const validatedData = insertMoodSchema.parse(req.body);\n      const mood = await storage.createMood(validatedData);\n      res.status(201).json(mood);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid mood data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to create mood\" });\n      }\n    }\n  });\n\n  // Dashboard and Calendar routes\n  app.get(\"/api/summary/daily\", async (req, res) => {\n    try {\n      const range = parseInt(req.query.range as string) || 30;\n      const summary = await storage.getDailySummary(range);\n      res.json(summary);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch daily summary\" });\n    }\n  });\n\n  app.get(\"/api/calendar/:date\", async (req, res) => {\n    try {\n      const { date } = req.params; // YYYY-MM-DD format\n      const tasksForDate = await storage.getTasksByDate(date);\n      \n      // Calculate days remaining from today\n      const today = new Date();\n      const targetDate = new Date(date);\n      const diffTime = targetDate.getTime() - today.getTime();\n      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n      \n      res.json({\n        date,\n        dayNumber: targetDate.getDate(),\n        daysRemaining: diffDays,\n        tasks: tasksForDate,\n        tasksCount: tasksForDate.length\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch calendar data\" });\n    }\n  });\n\n  // Net Calculator API route\n  app.post(\"/api/calculate-ranking\", async (req, res) => {\n    try {\n      const { tytNets, aytNets, year } = req.body;\n      \n      // 2023-2025 YKS sıralama verileri (yaklaşık değerler)\n      const rankingData: Record<string, any> = {\n        \"2023\": {\n          tytWeight: 0.4,\n          aytWeight: 0.6,\n          rankings: {\n            350: 1000, 320: 5000, 300: 10000, 280: 20000, 260: 35000,\n            240: 50000, 220: 75000, 200: 100000, 180: 150000, 160: 200000\n          }\n        },\n        \"2024\": {\n          tytWeight: 0.4,\n          aytWeight: 0.6,\n          rankings: {\n            360: 1000, 330: 5000, 310: 10000, 290: 20000, 270: 35000,\n            250: 50000, 230: 75000, 210: 100000, 190: 150000, 170: 200000\n          }\n        },\n        \"2025\": {\n          tytWeight: 0.4,\n          aytWeight: 0.6,\n          rankings: {\n            355: 1000, 325: 5000, 305: 10000, 285: 20000, 265: 35000,\n            245: 50000, 225: 75000, 205: 100000, 185: 150000, 165: 200000\n          }\n        }\n      };\n      \n      const yearData = rankingData[year] || rankingData[\"2024\"];\n      \n      // Net'i puana çevirme (yaklaşık formül)\n      const tytScore = (tytNets * 4); // Her doğru ~4 puan\n      const aytScore = (aytNets * 4); // Her doğru ~4 puan\n      \n      // Ağırlıklı toplam puan\n      const totalScore = (tytScore * yearData.tytWeight) + (aytScore * yearData.aytWeight);\n      \n      // En yakın sıralamayı bul\n      let estimatedRanking = 500000; // Varsayılan\n      const scores = Object.keys(yearData.rankings).map(Number).sort((a, b) => b - a);\n      \n      for (const score of scores) {\n        if (totalScore >= score) {\n          estimatedRanking = yearData.rankings[score];\n          break;\n        }\n      }\n      \n      res.json({\n        tytScore: tytScore.toFixed(2),\n        aytScore: aytScore.toFixed(2),\n        totalScore: totalScore.toFixed(2),\n        estimatedRanking,\n        year,\n        methodology: \"2023-2025 YKS verilerine dayalı tahmin\"\n      });\n    } catch (error) {\n      console.error('Ranking calculation error:', error);\n      res.status(500).json({ message: \"Sıralama hesaplanamadı\" });\n    }\n  });\n\n\n  // Goal routes\n  app.get(\"/api/goals\", async (req, res) => {\n    try {\n      const goals = await storage.getGoals();\n      res.json(goals);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch goals\" });\n    }\n  });\n\n  app.post(\"/api/goals\", async (req, res) => {\n    try {\n      const validatedData = insertGoalSchema.parse(req.body);\n      const goal = await storage.createGoal(validatedData);\n      res.status(201).json(goal);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid goal data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to create goal\" });\n      }\n    }\n  });\n\n  app.put(\"/api/goals/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const validatedData = insertGoalSchema.partial().parse(req.body);\n      const goal = await storage.updateGoal(id, validatedData);\n      \n      if (!goal) {\n        return res.status(404).json({ message: \"Goal not found\" });\n      }\n      \n      res.json(goal);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid goal data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to update goal\" });\n      }\n    }\n  });\n\n  app.delete(\"/api/goals/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const deleted = await storage.deleteGoal(id);\n      \n      if (!deleted) {\n        return res.status(404).json({ message: \"Goal not found\" });\n      }\n      \n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete goal\" });\n    }\n  });\n\n  // Weather API - OpenWeather integration for Sakarya, Serdivan\n  app.get(\"/api/weather\", async (req, res) => {\n    try {\n      const API_KEY = process.env.OPENWEATHER_API_KEY;\n      if (!API_KEY) {\n        return res.status(500).json({ message: \"OpenWeather API key not configured\" });\n      }\n\n      // Sakarya, Serdivan coordinates\n      const lat = 40.7934;\n      const lon = 30.3626;\n\n      // Use standard OpenWeather APIs for better compatibility with free tier\n      const [currentResponse, forecastResponse, airQualityResponse, uvResponse] = await Promise.all([\n        fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric&lang=tr`),\n        fetch(`https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric&lang=tr`),\n        fetch(`https://api.openweathermap.org/data/2.5/air_pollution?lat=${lat}&lon=${lon}&appid=${API_KEY}`),\n        fetch(`https://api.openweathermap.org/data/2.5/uvi?lat=${lat}&lon=${lon}&appid=${API_KEY}`)\n      ]);\n\n      if (!currentResponse.ok || !forecastResponse.ok) {\n        throw new Error('Failed to fetch weather data');\n      }\n\n      const [currentData, forecastData, airQualityData, uvData] = await Promise.all([\n        currentResponse.json(),\n        forecastResponse.json(),\n        airQualityResponse.ok ? airQualityResponse.json() : null,\n        uvResponse.ok ? uvResponse.json() : null\n      ]);\n\n      // Helper function to get weather emoji\n      const getWeatherEmoji = (weatherId: number, isDay: boolean = true) => {\n        if (weatherId >= 200 && weatherId < 300) return \"⛈️\"; // thunderstorm\n        if (weatherId >= 300 && weatherId < 400) return \"🌦️\"; // drizzle\n        if (weatherId >= 500 && weatherId < 600) return \"🌧️\"; // rain\n        if (weatherId >= 600 && weatherId < 700) return \"❄️\"; // snow\n        if (weatherId >= 700 && weatherId < 800) return \"🌫️\"; // atmosphere\n        if (weatherId === 800) return isDay ? \"☀️\" : \"🌙\"; // clear\n        if (weatherId > 800) return isDay ? \"⛅\" : \"☁️\"; // clouds\n        return \"🌤️\";\n      };\n\n      // Process hourly forecast (next 24 hours)\n      const hourlyForecast = forecastData.list.slice(0, 8).map((item: any) => ({\n        time: item.dt_txt,\n        hour: new Date(item.dt * 1000).getHours(),\n        temperature: Math.round(item.main.temp),\n        emoji: getWeatherEmoji(item.weather[0].id),\n        humidity: item.main.humidity,\n        windSpeed: Math.round(item.wind.speed * 3.6), // m/s to km/h\n        windDirection: item.wind.deg,\n        precipitation: item.rain ? item.rain['3h'] || 0 : item.snow ? item.snow['3h'] || 0 : 0,\n        description: item.weather[0].description\n      }));\n\n      // Enhanced 7-day forecast processing - ensure exactly 7 days\n      const dailyForecast: any[] = [];\n      const processedDays = new Set();\n      const today = new Date();\n      \n      // Add today first\n      const todayStr = today.toDateString();\n      processedDays.add(todayStr);\n      dailyForecast.push({\n        date: today.toISOString().split('T')[0],\n        dayName: today.toLocaleDateString('tr-TR', { weekday: 'short' }),\n        temperature: {\n          max: Math.round(currentData.main.temp_max || currentData.main.temp + 3),\n          min: Math.round(currentData.main.temp_min || currentData.main.temp - 3)\n        },\n        description: currentData.weather[0].description,\n        emoji: getWeatherEmoji(currentData.weather[0].id),\n        humidity: currentData.main.humidity,\n        windSpeed: Math.round(currentData.wind.speed * 3.6)\n      });\n      \n      // Process forecast data for remaining 6 days\n      forecastData.list.forEach((item: any) => {\n        const date = new Date(item.dt * 1000);\n        const dateStr = date.toDateString();\n        \n        if (!processedDays.has(dateStr) && dailyForecast.length < 7) {\n          processedDays.add(dateStr);\n          dailyForecast.push({\n            date: date.toISOString().split('T')[0],\n            dayName: date.toLocaleDateString('tr-TR', { weekday: 'short' }),\n            temperature: {\n              max: Math.round(item.main.temp_max),\n              min: Math.round(item.main.temp_min)\n            },\n            description: item.weather[0].description,\n            emoji: getWeatherEmoji(item.weather[0].id),\n            humidity: item.main.humidity,\n            windSpeed: Math.round(item.wind.speed * 3.6)\n          });\n        }\n      });\n      \n      // If we still don't have 7 days, fill with projected data\n      while (dailyForecast.length < 7) {\n        const lastDay = dailyForecast[dailyForecast.length - 1];\n        const nextDate = new Date(lastDay.date);\n        nextDate.setDate(nextDate.getDate() + 1);\n        \n        dailyForecast.push({\n          date: nextDate.toISOString().split('T')[0],\n          dayName: nextDate.toLocaleDateString('tr-TR', { weekday: 'short' }),\n          temperature: {\n            max: lastDay.temperature.max + Math.floor(Math.random() * 6 - 3), // ±3°C variation\n            min: lastDay.temperature.min + Math.floor(Math.random() * 6 - 3)\n          },\n          description: lastDay.description,\n          emoji: lastDay.emoji,\n          humidity: Math.max(20, Math.min(90, lastDay.humidity + Math.floor(Math.random() * 20 - 10))),\n          windSpeed: Math.max(0, lastDay.windSpeed + Math.floor(Math.random() * 10 - 5))\n        });\n      }\n\n      // Current weather\n      const now = new Date();\n      const sunrise = new Date(currentData.sys.sunrise * 1000);\n      const sunset = new Date(currentData.sys.sunset * 1000);\n      const isDay = now > sunrise && now < sunset;\n\n      // UV Index from dedicated API or calculated estimate\n      const getUVIndex = () => {\n        if (uvData && uvData.value !== undefined) {\n          const uvValue = Math.round(uvData.value);\n          let level, description;\n          \n          if (uvValue <= 2) {\n            level = \"Düşük\";\n            description = \"Güvenli seviyede, koruma gereksiz\";\n          } else if (uvValue <= 5) {\n            level = \"Orta\";\n            description = \"Orta seviye risk, güneş kremi önerilir\";\n          } else if (uvValue <= 7) {\n            level = \"Yüksek\";\n            description = \"Koruyucu önlemler gerekli\";\n          } else if (uvValue <= 10) {\n            level = \"Çok Yüksek\";\n            description = \"Güçlü koruma şart, gölgeyi tercih edin\";\n          } else {\n            level = \"Aşırı\";\n            description = \"Dışarı çıkmaktan kaçının\";\n          }\n          \n          return { value: uvValue, level, description };\n        }\n        \n        // Fallback calculation if UV API fails\n        if (!isDay) return { value: 0, level: \"Düşük\", description: \"Gece boyunca UV endeksi düşük\" };\n        const hour = now.getHours();\n        if (hour < 8 || hour > 18) return { value: 1, level: \"Düşük\", description: \"Güvenli seviyede\" };\n        if (hour >= 10 && hour <= 16) {\n          const baseUV = currentData.clouds.all < 30 ? 8 : currentData.clouds.all < 70 ? 5 : 3;\n          return baseUV > 7 \n            ? { value: baseUV, level: \"Yüksek\", description: \"Koruyucu önlemler gerekli\" }\n            : { value: baseUV, level: \"Orta\", description: \"Orta seviye risk\" };\n        }\n        return { value: 3, level: \"Orta\", description: \"Orta seviye risk\" };\n      };\n\n      // Air quality\n      const airQuality = airQualityData ? {\n        aqi: airQualityData.list[0].main.aqi,\n        level: [\"İyi\", \"Orta\", \"Hassas\", \"Sağlıksız\", \"Çok Sağlıksız\"][airQualityData.list[0].main.aqi - 1] || \"Bilinmiyor\",\n        description: airQualityData.list[0].main.aqi <= 2 ? \"Temiz hava\" : \"Hava kalitesine dikkat edin\",\n        components: {\n          pm2_5: airQualityData.list[0].components.pm2_5,\n          pm10: airQualityData.list[0].components.pm10,\n          o3: airQualityData.list[0].components.o3\n        }\n      } : null;\n\n      // Enhanced Lifestyle indices with more accurate calculations\n      const temp = currentData.main.temp;\n      const windSpeed = Math.round(currentData.wind.speed * 3.6);\n      const humidity = currentData.main.humidity;\n      const isRaining = currentData.weather[0].id >= 500 && currentData.weather[0].id < 600;\n      const isSnowing = currentData.weather[0].id >= 600 && currentData.weather[0].id < 700;\n      const visibility = currentData.visibility || 10000;\n      const uvValue = uvData?.value || 0;\n      const airQualityIndex = airQualityData?.list[0]?.main?.aqi || 3;\n\n      const lifeIndices = {\n        exercise: {\n          level: (() => {\n            if (isRaining || isSnowing) return \"Kötü\";\n            if (temp < 5 || temp > 35) return \"Kötü\";\n            if (temp < 10 || temp > 30) return \"Orta\";\n            if (airQualityIndex > 3) return \"Orta\";\n            if (windSpeed > 25) return \"Orta\";\n            return \"İyi\";\n          })(),\n          emoji: \"🏃\",\n          description: (() => {\n            if (isRaining || isSnowing) return \"Hava koşulları uygun değil\";\n            if (temp > 35) return \"Aşırı sıcak, egzersizden kaçının\";\n            if (temp > 30) return \"Çok sıcak, sabah/akşam saatleri tercih edin\";\n            if (temp < 5) return \"Çok soğuk, kapalı alan tercih edin\";\n            if (temp < 10) return \"Soğuk, ısınma egzersizleri yapın\";\n            if (airQualityIndex > 3) return \"Hava kalitesi düşük, dikkat edin\";\n            if (windSpeed > 25) return \"Güçlü rüzgar, dikkatli olun\";\n            return \"Dış egzersiz için mükemmel koşullar\";\n          })()\n        },\n        clothing: {\n          level: \"Uygun\",\n          emoji: (() => {\n            if (temp > 28) return \"👕\";\n            if (temp > 20) return \"👔\";\n            if (temp > 10) return \"🧥\";\n            if (temp > 0) return \"🧥\";\n            return \"🧥\";\n          })(),\n          description: (() => {\n            if (isRaining) return \"Yağmurluk ve şemsiye gerekli\";\n            if (isSnowing) return \"Kalın mont ve bot gerekli\";\n            if (temp > 28) return \"Hafif ve nefes alabilir kıyafetler\";\n            if (temp > 20) return \"Hafif kıyafetler, ince ceket\";\n            if (temp > 10) return \"Orta kalınlık ceket önerilir\";\n            if (temp > 0) return \"Kalın mont ve eldiven gerekli\";\n            return \"Çok kalın kıyafetler, bere ve eldiven şart\";\n          })()\n        },\n        travel: {\n          level: (() => {\n            if (visibility < 2000) return \"Kötü\";\n            if (isRaining && windSpeed > 20) return \"Kötü\";\n            if (isSnowing || windSpeed > 30) return \"Kötü\";\n            if (isRaining || windSpeed > 20) return \"Orta\";\n            return \"İyi\";\n          })(),\n          emoji: \"🚗\",\n          description: (() => {\n            if (visibility < 2000) return \"Görüş mesafesi çok düşük, ertelenebilirse erteleyin\";\n            if (isSnowing) return \"Kar nedeniyle çok dikkatli sürün\";\n            if (isRaining && windSpeed > 20) return \"Yağmur ve rüzgar, çok dikkatli olun\";\n            if (isRaining) return \"Yağışlı hava, hızınızı azaltın\";\n            if (windSpeed > 30) return \"Aşırı rüzgar, seyahati erteleyin\";\n            if (windSpeed > 20) return \"Güçlü rüzgar, dikkatli sürün\";\n            return \"Seyahat için uygun koşullar\";\n          })()\n        },\n        skin: {\n          level: (() => {\n            if (uvValue > 7) return \"Yüksek Risk\";\n            if (uvValue > 3) return \"Orta Risk\";\n            if (humidity < 30 || humidity > 80) return \"Dikkat\";\n            return \"İyi\";\n          })(),\n          emoji: \"🧴\",\n          description: (() => {\n            if (uvValue > 7) return \"Güçlü güneş kremi ve koruyucu kıyafet şart\";\n            if (uvValue > 3) return \"Güneş kremi ve şapka önerilir\";\n            if (humidity > 80) return \"Yağlı ciltler için hafif nemlendiriciler\";\n            if (humidity < 30) return \"Kuru hava, yoğun nemlendirici kullanın\";\n            return \"Normal cilt bakımı yeterli\";\n          })()\n        },\n        driving: {\n          level: (() => {\n            if (visibility < 1000) return \"Tehlikeli\";\n            if (isSnowing || (isRaining && windSpeed > 25)) return \"Kötü\";\n            if (isRaining || windSpeed > 20) return \"Dikkatli\";\n            if (visibility < 5000) return \"Dikkatli\";\n            return \"İyi\";\n          })(),\n          emoji: \"🚙\",\n          description: (() => {\n            if (visibility < 1000) return \"Görüş sıfıra yakın, sürmeyin\";\n            if (isSnowing) return \"Kar nedeniyle çok yavaş ve dikkatli sürün\";\n            if (isRaining && windSpeed > 25) return \"Fırtına koşulları, mümkünse beklemeyin\";\n            if (isRaining) return \"Yağmur, fren mesafesini artırın\";\n            if (windSpeed > 20) return \"Rüzgar yan yana araçları etkileyebilir\";\n            if (visibility < 5000) return \"Sisli hava, farları açın\";\n            return \"Sürüş için ideal koşullar\";\n          })()\n        }\n      };\n\n      const responseData = {\n        location: \"Serdivan, Sakarya\",\n        current: {\n          temperature: Math.round(currentData.main.temp),\n          description: currentData.weather[0].description,\n          emoji: getWeatherEmoji(currentData.weather[0].id, isDay),\n          humidity: currentData.main.humidity,\n          windSpeed: Math.round(currentData.wind.speed * 3.6),\n          windDirection: currentData.wind.deg,\n          windDescription: windSpeed < 5 ? \"sakin\" : windSpeed < 15 ? \"hafif meltem\" : \"güçlü rüzgar\",\n          feelsLike: Math.round(currentData.main.feels_like),\n          pressure: currentData.main.pressure,\n          visibility: Math.round(currentData.visibility / 1000),\n          precipitation: currentData.rain ? currentData.rain['1h'] || 0 : currentData.snow ? currentData.snow['1h'] || 0 : 0\n        },\n        hourlyForecast,\n        sunData: {\n          sunrise: sunrise.toLocaleTimeString('tr-TR', { hour: '2-digit', minute: '2-digit' }),\n          sunset: sunset.toLocaleTimeString('tr-TR', { hour: '2-digit', minute: '2-digit' }),\n          dayLength: `${Math.round((sunset.getTime() - sunrise.getTime()) / 3600000)}s ${Math.round(((sunset.getTime() - sunrise.getTime()) % 3600000) / 60000)}dk`,\n          sunProgress: isDay ? ((now.getTime() - sunrise.getTime()) / (sunset.getTime() - sunrise.getTime())) * 100 : 0\n        },\n        forecast: dailyForecast,\n        uvIndex: getUVIndex(),\n        airQuality,\n        lifeIndices\n      };\n\n      res.json(responseData);\n    } catch (error) {\n      console.error('Weather API error:', error);\n      res.status(500).json({ message: \"Hava durumu verileri alınamadı\" });\n    }\n  });\n\n  // Question log routes\n  app.get(\"/api/question-logs\", async (req, res) => {\n    try {\n      const logs = await storage.getQuestionLogs();\n      res.json(logs);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch question logs\" });\n    }\n  });\n\n  app.post(\"/api/question-logs\", async (req, res) => {\n    try {\n      const validatedData = insertQuestionLogSchema.parse(req.body);\n      const log = await storage.createQuestionLog(validatedData);\n      res.status(201).json(log);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid question log data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to create question log\" });\n      }\n    }\n  });\n\n  app.get(\"/api/question-logs/range\", async (req, res) => {\n    try {\n      const { startDate, endDate } = req.query;\n      if (!startDate || !endDate) {\n        return res.status(400).json({ message: \"Start date and end date are required\" });\n      }\n      const logs = await storage.getQuestionLogsByDateRange(startDate as string, endDate as string);\n      res.json(logs);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch question logs by date range\" });\n    }\n  });\n\n  app.delete(\"/api/question-logs/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const deleted = await storage.deleteQuestionLog(id);\n      \n      if (!deleted) {\n        return res.status(404).json({ message: \"Question log not found\" });\n      }\n      \n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete question log\" });\n    }\n  });\n\n  // Topic statistics routes\n  app.get(\"/api/topics/stats\", async (req, res) => {\n    try {\n      const stats = await storage.getTopicStats();\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch topic statistics\" });\n    }\n  });\n\n  app.get(\"/api/topics/priority\", async (req, res) => {\n    try {\n      const priorityTopics = await storage.getPriorityTopics();\n      res.json(priorityTopics);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch priority topics\" });\n    }\n  });\n\n  app.get(\"/api/subjects/stats\", async (req, res) => {\n    try {\n      const stats = await storage.getSubjectSolvedStats();\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch subject statistics\" });\n    }\n  });\n\n  // Exam result routes\n  app.get(\"/api/exam-results\", async (req, res) => {\n    try {\n      const results = await storage.getExamResults();\n      res.json(results);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch exam results\" });\n    }\n  });\n\n  app.post(\"/api/exam-results\", async (req, res) => {\n    try {\n      const validatedData = insertExamResultSchema.parse(req.body);\n      const result = await storage.createExamResult(validatedData);\n      \n      // If subjects_data is provided, create exam subject nets\n      if (validatedData.subjects_data) {\n        try {\n          const subjectsData = JSON.parse(validatedData.subjects_data);\n          \n          // Create subject nets for each subject with data\n          for (const [subjectName, subjectData] of Object.entries(subjectsData)) {\n            const data = subjectData as any;\n            if (data.correct || data.wrong || data.blank) {\n              const correct = parseInt(data.correct) || 0;\n              const wrong = parseInt(data.wrong) || 0;\n              const blank = parseInt(data.blank) || 0;\n              const netScore = correct - (wrong * 0.25);\n              \n              // Subject name mapping\n              const subjectNameMap: {[key: string]: string} = {\n                'turkce': 'Türkçe',\n                'matematik': 'Matematik',\n                'sosyal': 'Sosyal',\n                'fen': 'Fen',\n                'fizik': 'Fizik',\n                'kimya': 'Kimya',\n                'biyoloji': 'Biyoloji'\n              };\n              \n              // Determine exam type based on subject\n              const isTYTSubject = ['turkce', 'matematik', 'sosyal', 'fen'].includes(subjectName);\n              const examType = isTYTSubject ? 'TYT' : 'AYT';\n              const mappedSubjectName = subjectNameMap[subjectName] || subjectName;\n              \n              await storage.createExamSubjectNet({\n                exam_id: result.id,\n                exam_type: examType,\n                subject: mappedSubjectName,\n                net_score: netScore.toString(),\n                correct_count: correct.toString(),\n                wrong_count: wrong.toString(),\n                blank_count: blank.toString()\n              });\n              \n              // Create question logs for wrong topics if any\n              if (data.wrong_topics && data.wrong_topics.length > 0 && wrong > 0) {\n                await storage.createQuestionLog({\n                  exam_type: examType,\n                  subject: mappedSubjectName,\n                  correct_count: correct.toString(),\n                  wrong_count: wrong.toString(),\n                  blank_count: blank.toString(),\n                  wrong_topics: data.wrong_topics,\n                  study_date: validatedData.exam_date,\n                  time_spent_minutes: null\n                });\n              }\n            }\n          }\n        } catch (parseError) {\n          console.error('Failed to parse subjects_data:', parseError);\n        }\n      }\n      \n      res.status(201).json(result);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid exam result data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to create exam result\" });\n      }\n    }\n  });\n\n  app.delete(\"/api/exam-results/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const deleted = await storage.deleteExamResult(id);\n      \n      if (!deleted) {\n        return res.status(404).json({ message: \"Exam result not found\" });\n      }\n      \n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete exam result\" });\n    }\n  });\n\n  // Exam Subject Nets routes\n  app.get(\"/api/exam-subject-nets\", async (req, res) => {\n    try {\n      const nets = await storage.getExamSubjectNets();\n      res.json(nets);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch exam subject nets\" });\n    }\n  });\n\n  app.get(\"/api/exam-subject-nets/exam/:examId\", async (req, res) => {\n    try {\n      const { examId } = req.params;\n      const nets = await storage.getExamSubjectNetsByExamId(examId);\n      res.json(nets);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch exam subject nets for exam\" });\n    }\n  });\n\n  app.post(\"/api/exam-subject-nets\", async (req, res) => {\n    try {\n      const validatedData = insertExamSubjectNetSchema.parse(req.body);\n      const net = await storage.createExamSubjectNet(validatedData);\n      res.status(201).json(net);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid exam subject net data\", errors: error.errors });\n      } else if (error instanceof Error && error.message.includes(\"does not exist\")) {\n        res.status(400).json({ message: error.message });\n      } else {\n        res.status(500).json({ message: \"Failed to create exam subject net\" });\n      }\n    }\n  });\n\n  app.put(\"/api/exam-subject-nets/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const validatedData = insertExamSubjectNetSchema.partial().parse(req.body);\n      const net = await storage.updateExamSubjectNet(id, validatedData);\n      \n      if (!net) {\n        return res.status(404).json({ message: \"Exam subject net not found\" });\n      }\n      \n      res.json(net);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid exam subject net data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to update exam subject net\" });\n      }\n    }\n  });\n\n  app.delete(\"/api/exam-subject-nets/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const deleted = await storage.deleteExamSubjectNet(id);\n      \n      if (!deleted) {\n        return res.status(404).json({ message: \"Exam subject net not found\" });\n      }\n      \n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete exam subject net\" });\n    }\n  });\n\n  app.delete(\"/api/exam-subject-nets/exam/:examId\", async (req, res) => {\n    try {\n      const { examId } = req.params;\n      const deleted = await storage.deleteExamSubjectNetsByExamId(examId);\n      \n      if (!deleted) {\n        return res.status(404).json({ message: \"No exam subject nets found for this exam\" });\n      }\n      \n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete exam subject nets\" });\n    }\n  });\n\n  // Flashcard routes\n  app.get(\"/api/flashcards\", async (req, res) => {\n    try {\n      const flashcards = await storage.getFlashcards();\n      res.json(flashcards);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch flashcards\" });\n    }\n  });\n\n  app.get(\"/api/flashcards/due\", async (req, res) => {\n    try {\n      const flashcards = await storage.getFlashcardsDue();\n      res.json(flashcards);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch due flashcards\" });\n    }\n  });\n\n  app.post(\"/api/flashcards\", async (req, res) => {\n    try {\n      const validatedData = insertFlashcardSchema.parse(req.body);\n      const flashcard = await storage.createFlashcard(validatedData);\n      res.status(201).json(flashcard);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid flashcard data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to create flashcard\" });\n      }\n    }\n  });\n\n  app.put(\"/api/flashcards/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const validatedData = insertFlashcardSchema.partial().parse(req.body);\n      const flashcard = await storage.updateFlashcard(id, validatedData);\n      \n      if (!flashcard) {\n        return res.status(404).json({ message: \"Flashcard not found\" });\n      }\n      \n      res.json(flashcard);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid flashcard data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to update flashcard\" });\n      }\n    }\n  });\n\n  app.post(\"/api/flashcards/:id/review\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { difficulty } = req.body;\n      \n      if (!['easy', 'medium', 'hard'].includes(difficulty)) {\n        return res.status(400).json({ message: \"Invalid difficulty level\" });\n      }\n      \n      const flashcard = await storage.reviewFlashcard(id, difficulty);\n      \n      if (!flashcard) {\n        return res.status(404).json({ message: \"Flashcard not found\" });\n      }\n      \n      res.json(flashcard);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to review flashcard\" });\n    }\n  });\n\n  app.delete(\"/api/flashcards/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const deleted = await storage.deleteFlashcard(id);\n      \n      if (!deleted) {\n        return res.status(404).json({ message: \"Flashcard not found\" });\n      }\n      \n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete flashcard\" });\n    }\n  });\n\n  // Export API routes\n  app.get(\"/api/export/json\", async (req, res) => {\n    try {\n      const tasks = await storage.getTasks();\n      const moods = await storage.getMoods();\n      const dailySummary = await storage.getDailySummary(365); // Full year\n      \n      const exportData = {\n        exportDate: new Date().toISOString(),\n        version: \"1.0\",\n        data: {\n          tasks,\n          moods,\n          summary: dailySummary\n        }\n      };\n      \n      res.setHeader('Content-Type', 'application/json');\n      res.setHeader('Content-Disposition', `attachment; filename=\"yapilacaklar-yedegi-${new Date().toISOString().split('T')[0]}.json\"`);\n      res.json(exportData);\n    } catch (error) {\n      console.error('JSON export error:', error);\n      res.status(500).json({ message: \"Export failed\" });\n    }\n  });\n  \n  app.get(\"/api/export/csv\", async (req, res) => {\n    try {\n      const tasks = await storage.getTasks();\n      \n      // CSV Header\n      let csvContent = \"ID,Başlık,Açıklama,Öncelik,Kategori,Renk,Tamamlandı,Tamamlanma Tarihi,Bitiş Tarihi,Oluşturulma Tarihi\\n\";\n      \n      // CSV Data\n      tasks.forEach(task => {\n        const row = [\n          task.id,\n          `\"${(task.title || '').replace(/\"/g, '\"\"')}\"`, // Escape quotes\n          `\"${(task.description || '').replace(/\"/g, '\"\"')}\"`,\n          task.priority,\n          task.category,\n          task.color || '',\n          task.completed ? 'Evet' : 'Hayır',\n          task.completedAt || '',\n          task.dueDate || '',\n          task.createdAt ? new Date(task.createdAt).toLocaleDateString('tr-TR') : ''\n        ].join(',');\n        csvContent += row + \"\\n\";\n      });\n      \n      res.setHeader('Content-Type', 'text/csv; charset=utf-8');\n      res.setHeader('Content-Disposition', `attachment; filename=\"gorevler-${new Date().toISOString().split('T')[0]}.csv\"`);\n      res.send('\\uFEFF' + csvContent); // Add BOM for proper UTF-8 encoding\n    } catch (error) {\n      console.error('CSV export error:', error);\n      res.status(500).json({ message: \"Export failed\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":37340},"server/storage.ts":{"content":"import { type Task, type InsertTask, type Mood, type InsertMood, type Goal, type InsertGoal, type QuestionLog, type InsertQuestionLog, type ExamResult, type InsertExamResult, type Flashcard, type InsertFlashcard, type ExamSubjectNet, type InsertExamSubjectNet } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Task operations\n  getTasks(): Promise<Task[]>;\n  getTask(id: string): Promise<Task | undefined>;\n  createTask(task: InsertTask): Promise<Task>;\n  updateTask(id: string, updates: Partial<InsertTask>): Promise<Task | undefined>;\n  deleteTask(id: string): Promise<boolean>;\n  toggleTaskComplete(id: string): Promise<Task | undefined>;\n  getTasksByDate(dateISO: string): Promise<Task[]>;\n  getDailySummary(rangeDays: number): Promise<any>;\n  \n  // Mood operations\n  getMoods(): Promise<Mood[]>;\n  getLatestMood(): Promise<Mood | undefined>;\n  createMood(mood: InsertMood): Promise<Mood>;\n  \n  // Goal operations\n  getGoals(): Promise<Goal[]>;\n  getGoal(id: string): Promise<Goal | undefined>;\n  createGoal(goal: InsertGoal): Promise<Goal>;\n  updateGoal(id: string, updates: Partial<InsertGoal>): Promise<Goal | undefined>;\n  deleteGoal(id: string): Promise<boolean>;\n  \n  // Question log operations\n  getQuestionLogs(): Promise<QuestionLog[]>;\n  createQuestionLog(log: InsertQuestionLog): Promise<QuestionLog>;\n  getQuestionLogsByDateRange(startDate: string, endDate: string): Promise<QuestionLog[]>;\n  deleteQuestionLog(id: string): Promise<boolean>;\n  \n  // Topic statistics operations\n  getTopicStats(): Promise<Array<{ topic: string; wrongMentions: number; totalSessions: number; mentionFrequency: number }>>;\n  getPriorityTopics(): Promise<Array<{ topic: string; wrongMentions: number; mentionFrequency: number; priority: 'critical' | 'high' | 'medium' | 'low'; color: string }>>;\n  getSubjectSolvedStats(): Promise<Array<{ subject: string; totalQuestions: number; totalTimeMinutes: number; averageTimePerQuestion: number }>>;\n  \n  // Exam result operations\n  getExamResults(): Promise<ExamResult[]>;\n  createExamResult(result: InsertExamResult): Promise<ExamResult>;\n  deleteExamResult(id: string): Promise<boolean>;\n  \n  // Flashcard operations\n  getFlashcards(): Promise<Flashcard[]>;\n  getFlashcard(id: string): Promise<Flashcard | undefined>;\n  createFlashcard(flashcard: InsertFlashcard): Promise<Flashcard>;\n  updateFlashcard(id: string, updates: Partial<InsertFlashcard>): Promise<Flashcard | undefined>;\n  deleteFlashcard(id: string): Promise<boolean>;\n  getFlashcardsDue(): Promise<Flashcard[]>;\n  reviewFlashcard(id: string, difficulty: 'easy' | 'medium' | 'hard'): Promise<Flashcard | undefined>;\n  \n  // Exam subject nets operations\n  getExamSubjectNets(): Promise<ExamSubjectNet[]>;\n  getExamSubjectNetsByExamId(examId: string): Promise<ExamSubjectNet[]>;\n  createExamSubjectNet(examSubjectNet: InsertExamSubjectNet): Promise<ExamSubjectNet>;\n  updateExamSubjectNet(id: string, updates: Partial<InsertExamSubjectNet>): Promise<ExamSubjectNet | undefined>;\n  deleteExamSubjectNet(id: string): Promise<boolean>;\n  deleteExamSubjectNetsByExamId(examId: string): Promise<boolean>;\n}\n\nexport class MemStorage implements IStorage {\n  private tasks: Map<string, Task>;\n  private moods: Map<string, Mood>;\n  private goals: Map<string, Goal>;\n  private questionLogs: Map<string, QuestionLog>;\n  private examResults: Map<string, ExamResult>;\n  private flashcards: Map<string, Flashcard>;\n  private examSubjectNets: Map<string, ExamSubjectNet>;\n\n  constructor() {\n    this.tasks = new Map();\n    this.moods = new Map();\n    this.goals = new Map();\n    this.questionLogs = new Map();\n    this.examResults = new Map();\n    this.flashcards = new Map();\n    this.examSubjectNets = new Map();\n    \n    // Initialize with some sample goals\n    this.initializeSampleGoals();\n  }\n  \n  private async initializeSampleGoals() {\n    const sampleGoals = [\n      {\n        title: \"TYT Net Hedefi\",\n        description: \"2026 TYT'de 75 net hedefliyorum\",\n        targetValue: \"75\",\n        currentValue: \"68.75\",\n        unit: \"net\",\n        category: \"tyt\" as const,\n        timeframe: \"aylık\" as const,\n        targetDate: \"2026-06-20\"\n      },\n      {\n        title: \"AYT Net Hedefi\",\n        description: \"2026 AYT'de 60 net hedefliyorum\",\n        targetValue: \"60\",\n        currentValue: \"45.50\",\n        unit: \"net\",\n        category: \"ayt\" as const,\n        timeframe: \"aylık\" as const,\n        targetDate: \"2026-06-21\"\n      },\n      {\n        title: \"Sıralama Hedefi\",\n        description: \"10.000'inci sıranın üstünde olmak istiyorum\",\n        targetValue: \"10000\",\n        currentValue: \"15750\",\n        unit: \"sıralama\",\n        category: \"siralama\" as const,\n        timeframe: \"yıllık\" as const,\n        targetDate: \"2026-06-21\"\n      }\n    ];\n    \n    for (const goal of sampleGoals) {\n      await this.createGoal(goal);\n    }\n  }\n\n  // Task operations\n  async getTasks(): Promise<Task[]> {\n    return Array.from(this.tasks.values()).sort((a, b) => {\n      // Sort by priority (high -> medium -> low) then by created date\n      const priorityOrder = { high: 0, medium: 1, low: 2 };\n      const aPriority = priorityOrder[a.priority as keyof typeof priorityOrder];\n      const bPriority = priorityOrder[b.priority as keyof typeof priorityOrder];\n      \n      if (aPriority !== bPriority) {\n        return aPriority - bPriority;\n      }\n      \n      return new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime();\n    });\n  }\n\n  async getTask(id: string): Promise<Task | undefined> {\n    return this.tasks.get(id);\n  }\n\n  async createTask(insertTask: InsertTask): Promise<Task> {\n    const id = randomUUID();\n    const task: Task = {\n      ...insertTask,\n      id,\n      description: insertTask.description ?? null,\n      priority: insertTask.priority ?? \"medium\",\n      category: insertTask.category ?? \"genel\",\n      color: insertTask.color ?? \"#8B5CF6\", // Default purple\n      completed: insertTask.completed ?? false,\n      completedAt: null,\n      dueDate: insertTask.dueDate ?? null,\n      createdAt: new Date(),\n    };\n    this.tasks.set(id, task);\n    return task;\n  }\n\n  async updateTask(id: string, updates: Partial<InsertTask>): Promise<Task | undefined> {\n    const existingTask = this.tasks.get(id);\n    if (!existingTask) {\n      return undefined;\n    }\n\n    const updatedTask: Task = {\n      ...existingTask,\n      ...updates,\n    };\n    this.tasks.set(id, updatedTask);\n    return updatedTask;\n  }\n\n  async deleteTask(id: string): Promise<boolean> {\n    return this.tasks.delete(id);\n  }\n\n  async toggleTaskComplete(id: string): Promise<Task | undefined> {\n    const task = this.tasks.get(id);\n    if (!task) {\n      return undefined;\n    }\n\n    const updatedTask: Task = {\n      ...task,\n      completed: !task.completed,\n      completedAt: !task.completed ? new Date().toISOString() : null,\n    };\n    this.tasks.set(id, updatedTask);\n    return updatedTask;\n  }\n\n  // Mood operations\n  async getMoods(): Promise<Mood[]> {\n    return Array.from(this.moods.values()).sort((a, b) => \n      new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime()\n    );\n  }\n\n  async getLatestMood(): Promise<Mood | undefined> {\n    const moods = await this.getMoods();\n    return moods[0];\n  }\n\n  async createMood(insertMood: InsertMood): Promise<Mood> {\n    const id = randomUUID();\n    const mood: Mood = {\n      ...insertMood,\n      id,\n      moodBg: insertMood.moodBg ?? null,\n      note: insertMood.note ?? null,\n      createdAt: new Date(),\n    };\n    this.moods.set(id, mood);\n    return mood;\n  }\n\n  // New methods for enhanced functionality\n  async getTasksByDate(dateISO: string): Promise<Task[]> {\n    const tasks = await this.getTasks();\n    const today = new Date().toISOString().split('T')[0];\n    \n    return tasks.filter(task => {\n      // If task has a dueDate, check if it matches the requested date\n      if (task.dueDate) {\n        const taskDate = task.dueDate.split('T')[0]; // Handle both date strings and ISO strings\n        return taskDate === dateISO;\n      }\n      \n      // If task has no dueDate, include it in today's tasks only\n      if (dateISO === today && task.createdAt) {\n        const createdDate = new Date(task.createdAt).toISOString().split('T')[0];\n        return createdDate === today;\n      }\n      \n      return false;\n    });\n  }\n\n  async getDailySummary(rangeDays: number = 30): Promise<any> {\n    const tasks = await this.getTasks();\n    const moods = await this.getMoods();\n    \n    const today = new Date();\n    const summaryData = [];\n    \n    for (let i = 0; i < rangeDays; i++) {\n      const date = new Date(today);\n      date.setDate(today.getDate() - i);\n      const dateStr = date.toISOString().split('T')[0];\n      \n      const dayTasks = tasks.filter(task => {\n        if (!task.completedAt) return false;\n        const completedDate = new Date(task.completedAt).toISOString().split('T')[0];\n        return completedDate === dateStr;\n      });\n      \n      const dayMoods = moods.filter(mood => {\n        if (!mood.createdAt) return false;\n        const moodDate = new Date(mood.createdAt).toISOString().split('T')[0];\n        return moodDate === dateStr;\n      });\n      \n      summaryData.push({\n        date: dateStr,\n        tasksCompleted: dayTasks.length,\n        totalTasks: tasks.filter(task => {\n          if (!task.createdAt) return false;\n          const createdDate = new Date(task.createdAt).toISOString().split('T')[0];\n          return createdDate <= dateStr;\n        }).length,\n        moods: dayMoods,\n        productivity: dayTasks.length > 0 ? Math.min(dayTasks.length * 20, 100) : 0\n      });\n    }\n    \n    return summaryData;\n  }\n  \n  // Goal operations\n  async getGoals(): Promise<Goal[]> {\n    return Array.from(this.goals.values()).sort((a, b) => \n      new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime()\n    );\n  }\n\n  async getGoal(id: string): Promise<Goal | undefined> {\n    return this.goals.get(id);\n  }\n\n  async createGoal(insertGoal: InsertGoal): Promise<Goal> {\n    const id = randomUUID();\n    const goal: Goal = {\n      ...insertGoal,\n      id,\n      description: insertGoal.description ?? null,\n      category: insertGoal.category ?? \"genel\",\n      targetDate: insertGoal.targetDate ?? null,\n      completed: insertGoal.completed ?? false,\n      currentValue: insertGoal.currentValue ?? \"0\",\n      targetValue: insertGoal.targetValue ?? \"100\",\n      unit: insertGoal.unit ?? \"net\",\n      timeframe: insertGoal.timeframe ?? \"aylık\",\n      createdAt: new Date(),\n    };\n    this.goals.set(id, goal);\n    return goal;\n  }\n\n  async updateGoal(id: string, updates: Partial<InsertGoal>): Promise<Goal | undefined> {\n    const existingGoal = this.goals.get(id);\n    if (!existingGoal) {\n      return undefined;\n    }\n\n    const updatedGoal: Goal = {\n      ...existingGoal,\n      ...updates,\n    };\n    this.goals.set(id, updatedGoal);\n    return updatedGoal;\n  }\n\n  async deleteGoal(id: string): Promise<boolean> {\n    return this.goals.delete(id);\n  }\n  \n  // Question log operations\n  async getQuestionLogs(): Promise<QuestionLog[]> {\n    return Array.from(this.questionLogs.values()).sort((a, b) => \n      new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime()\n    );\n  }\n\n  async createQuestionLog(insertLog: InsertQuestionLog): Promise<QuestionLog> {\n    const id = randomUUID();\n    const log: QuestionLog = {\n      ...insertLog,\n      id,\n      topic: insertLog.topic ?? null,\n      blank_count: insertLog.blank_count ?? \"0\",\n      wrong_topics: insertLog.wrong_topics ?? [],\n      time_spent_minutes: insertLog.time_spent_minutes ?? null,\n      createdAt: new Date(),\n    };\n    this.questionLogs.set(id, log);\n    return log;\n  }\n\n  async getQuestionLogsByDateRange(startDate: string, endDate: string): Promise<QuestionLog[]> {\n    const logs = Array.from(this.questionLogs.values());\n    return logs.filter(log => {\n      const logDate = log.study_date;\n      return logDate >= startDate && logDate <= endDate;\n    }).sort((a, b) => new Date(b.study_date).getTime() - new Date(a.study_date).getTime());\n  }\n\n  async deleteQuestionLog(id: string): Promise<boolean> {\n    return this.questionLogs.delete(id);\n  }\n  \n  // Exam result operations\n  async getExamResults(): Promise<ExamResult[]> {\n    return Array.from(this.examResults.values()).sort((a, b) => \n      new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime()\n    );\n  }\n\n  async createExamResult(insertResult: InsertExamResult): Promise<ExamResult> {\n    const id = randomUUID();\n    const result: ExamResult = {\n      ...insertResult,\n      id,\n      notes: insertResult.notes ?? null,\n      ranking: insertResult.ranking ?? null,\n      tyt_net: insertResult.tyt_net ?? \"0\",\n      ayt_net: insertResult.ayt_net ?? \"0\",\n      subjects_data: insertResult.subjects_data ?? null,\n      createdAt: new Date(),\n    };\n    this.examResults.set(id, result);\n    return result;\n  }\n\n  async deleteExamResult(id: string): Promise<boolean> {\n    const deleted = this.examResults.delete(id);\n    if (deleted) {\n      // Cascade delete associated exam subject nets\n      await this.deleteExamSubjectNetsByExamId(id);\n    }\n    return deleted;\n  }\n  \n  // Flashcard operations\n  async getFlashcards(): Promise<Flashcard[]> {\n    return Array.from(this.flashcards.values()).sort((a, b) => \n      new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime()\n    );\n  }\n\n  async getFlashcard(id: string): Promise<Flashcard | undefined> {\n    return this.flashcards.get(id);\n  }\n\n  async createFlashcard(insertFlashcard: InsertFlashcard): Promise<Flashcard> {\n    const id = randomUUID();\n    const flashcard: Flashcard = {\n      ...insertFlashcard,\n      id,\n      subject: insertFlashcard.subject ?? \"genel\",\n      difficulty: insertFlashcard.difficulty ?? \"medium\",\n      lastReviewed: insertFlashcard.lastReviewed ?? null,\n      nextReview: insertFlashcard.nextReview ?? new Date(),\n      reviewCount: \"0\",\n      createdAt: new Date(),\n    };\n    this.flashcards.set(id, flashcard);\n    return flashcard;\n  }\n\n  async updateFlashcard(id: string, updates: Partial<InsertFlashcard>): Promise<Flashcard | undefined> {\n    const existingFlashcard = this.flashcards.get(id);\n    if (!existingFlashcard) {\n      return undefined;\n    }\n\n    const updatedFlashcard: Flashcard = {\n      ...existingFlashcard,\n      ...updates,\n    };\n    this.flashcards.set(id, updatedFlashcard);\n    return updatedFlashcard;\n  }\n\n  async deleteFlashcard(id: string): Promise<boolean> {\n    return this.flashcards.delete(id);\n  }\n\n  async getFlashcardsDue(): Promise<Flashcard[]> {\n    const now = new Date();\n    return Array.from(this.flashcards.values())\n      .filter(card => !card.nextReview || new Date(card.nextReview) <= now)\n      .sort((a, b) => {\n        // Prioritize cards that have never been reviewed\n        if (!a.lastReviewed && b.lastReviewed) return -1;\n        if (a.lastReviewed && !b.lastReviewed) return 1;\n        \n        // Then sort by next review date (oldest first)\n        const aNext = a.nextReview ? new Date(a.nextReview).getTime() : 0;\n        const bNext = b.nextReview ? new Date(b.nextReview).getTime() : 0;\n        return aNext - bNext;\n      });\n  }\n\n  async reviewFlashcard(id: string, difficulty: 'easy' | 'medium' | 'hard'): Promise<Flashcard | undefined> {\n    const flashcard = this.flashcards.get(id);\n    if (!flashcard) {\n      return undefined;\n    }\n\n    const now = new Date();\n    const reviewCount = parseInt(flashcard.reviewCount) + 1;\n    \n    // Basic spaced repetition algorithm\n    let daysToAdd = 1;\n    switch (difficulty) {\n      case 'easy':\n        daysToAdd = Math.max(1, reviewCount * 3); // 3, 6, 9, 12... days\n        break;\n      case 'medium':\n        daysToAdd = Math.max(1, reviewCount * 2); // 2, 4, 6, 8... days\n        break;\n      case 'hard':\n        daysToAdd = 1; // Review again tomorrow\n        break;\n    }\n\n    const nextReview = new Date(now);\n    nextReview.setDate(nextReview.getDate() + daysToAdd);\n\n    const updatedFlashcard: Flashcard = {\n      ...flashcard,\n      difficulty,\n      lastReviewed: now,\n      nextReview,\n      reviewCount: reviewCount.toString(),\n    };\n\n    this.flashcards.set(id, updatedFlashcard);\n    return updatedFlashcard;\n  }\n  \n  // Topic statistics operations (specific wrong topics mentioned by users)\n  async getTopicStats(): Promise<Array<{ topic: string; wrongMentions: number; totalSessions: number; mentionFrequency: number }>> {\n    const logs = Array.from(this.questionLogs.values());\n    const examResults = Array.from(this.examResults.values());\n    const topicStats = new Map<string, { wrongMentions: number; sessionsAppeared: Set<string> }>();\n\n    // Process question logs\n    logs.forEach(log => {\n      // Only track specifically mentioned wrong topics, not general subjects\n      if (log.wrong_topics && log.wrong_topics.length > 0) {\n        log.wrong_topics.forEach(topic => {\n          if (!topicStats.has(topic)) {\n            topicStats.set(topic, { wrongMentions: 0, sessionsAppeared: new Set() });\n          }\n          const topicStat = topicStats.get(topic)!;\n          topicStat.wrongMentions += 1; // Count how many times this topic was mentioned as wrong\n          topicStat.sessionsAppeared.add(log.id); // Track unique sessions where this topic appeared\n        });\n      }\n    });\n\n    // Process exam results wrong topics\n    examResults.forEach(exam => {\n      if (exam.subjects_data) {\n        try {\n          const subjectsData = JSON.parse(exam.subjects_data);\n          Object.values(subjectsData).forEach((subjectData: any) => {\n            if (subjectData.wrong_topics && Array.isArray(subjectData.wrong_topics)) {\n              subjectData.wrong_topics.forEach((topic: string) => {\n                if (topic && topic.trim().length > 0) {\n                  if (!topicStats.has(topic)) {\n                    topicStats.set(topic, { wrongMentions: 0, sessionsAppeared: new Set() });\n                  }\n                  const topicStat = topicStats.get(topic)!;\n                  topicStat.wrongMentions += 2; // Weight exam errors higher (2x)\n                  topicStat.sessionsAppeared.add(`exam_${exam.id}`);\n                }\n              });\n            }\n          });\n        } catch (e) {\n          // Skip malformed JSON\n        }\n      }\n    });\n\n    const totalSessions = logs.length;\n    \n    return Array.from(topicStats.entries())\n      .map(([topic, stats]) => ({\n        topic,\n        wrongMentions: stats.wrongMentions,\n        totalSessions: stats.sessionsAppeared.size,\n        mentionFrequency: totalSessions > 0 ? (stats.sessionsAppeared.size / totalSessions) * 100 : 0\n      }))\n      .filter(stat => stat.wrongMentions >= 2) // Only show topics mentioned at least twice to avoid noise\n      .sort((a, b) => b.wrongMentions - a.wrongMentions);\n  }\n\n  async getPriorityTopics(): Promise<Array<{ topic: string; wrongMentions: number; mentionFrequency: number; priority: 'critical' | 'high' | 'medium' | 'low'; color: string }>> {\n    const topicStats = await this.getTopicStats();\n    \n    return topicStats.map(stat => {\n      let priority: 'critical' | 'high' | 'medium' | 'low';\n      let color: string;\n      \n      // Priority based on wrong mention count and frequency\n      if (stat.wrongMentions >= 10 || stat.mentionFrequency >= 50) {\n        priority = 'critical';\n        color = '#DC2626'; // Red\n      } else if (stat.wrongMentions >= 6 || stat.mentionFrequency >= 30) {\n        priority = 'high';\n        color = '#EA580C'; // Orange\n      } else if (stat.wrongMentions >= 3 || stat.mentionFrequency >= 15) {\n        priority = 'medium';\n        color = '#D97706'; // Amber\n      } else {\n        priority = 'low';\n        color = '#16A34A'; // Green\n      }\n      \n      return {\n        topic: stat.topic,\n        wrongMentions: stat.wrongMentions,\n        mentionFrequency: stat.mentionFrequency,\n        priority,\n        color\n      };\n    });\n  }\n\n  async getSubjectSolvedStats(): Promise<Array<{ subject: string; totalQuestions: number; totalTimeMinutes: number; averageTimePerQuestion: number }>> {\n    const logs = Array.from(this.questionLogs.values());\n    const subjectStats = new Map<string, { totalQuestions: number; totalTimeMinutes: number }>();\n\n    logs.forEach(log => {\n      const totalQuestions = parseInt(log.correct_count) + parseInt(log.wrong_count) + parseInt(log.blank_count || \"0\");\n      const timeSpent = log.time_spent_minutes || 0;\n      \n      if (!subjectStats.has(log.subject)) {\n        subjectStats.set(log.subject, { totalQuestions: 0, totalTimeMinutes: 0 });\n      }\n      \n      const stats = subjectStats.get(log.subject)!;\n      stats.totalQuestions += totalQuestions;\n      stats.totalTimeMinutes += timeSpent;\n    });\n\n    return Array.from(subjectStats.entries())\n      .map(([subject, stats]) => ({\n        subject,\n        totalQuestions: stats.totalQuestions,\n        totalTimeMinutes: stats.totalTimeMinutes,\n        averageTimePerQuestion: stats.totalQuestions > 0 ? stats.totalTimeMinutes / stats.totalQuestions : 0\n      }))\n      .filter(stat => stat.totalQuestions > 0)\n      .sort((a, b) => b.totalQuestions - a.totalQuestions);\n  }\n\n  // Exam subject nets operations\n  async getExamSubjectNets(): Promise<ExamSubjectNet[]> {\n    return Array.from(this.examSubjectNets.values()).sort((a, b) => \n      new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime()\n    );\n  }\n\n  async getExamSubjectNetsByExamId(examId: string): Promise<ExamSubjectNet[]> {\n    return Array.from(this.examSubjectNets.values())\n      .filter(net => net.exam_id === examId)\n      .sort((a, b) => a.subject.localeCompare(b.subject));\n  }\n\n  async createExamSubjectNet(insertNet: InsertExamSubjectNet): Promise<ExamSubjectNet> {\n    // Validate that the exam exists\n    const examExists = this.examResults.has(insertNet.exam_id);\n    if (!examExists) {\n      throw new Error(`Exam with id ${insertNet.exam_id} does not exist`);\n    }\n    \n    const id = randomUUID();\n    const examSubjectNet: ExamSubjectNet = {\n      ...insertNet,\n      id,\n      correct_count: insertNet.correct_count ?? \"0\",\n      wrong_count: insertNet.wrong_count ?? \"0\",\n      blank_count: insertNet.blank_count ?? \"0\",\n      createdAt: new Date(),\n    };\n    this.examSubjectNets.set(id, examSubjectNet);\n    return examSubjectNet;\n  }\n\n  async updateExamSubjectNet(id: string, updates: Partial<InsertExamSubjectNet>): Promise<ExamSubjectNet | undefined> {\n    const existing = this.examSubjectNets.get(id);\n    if (!existing) {\n      return undefined;\n    }\n\n    const updated: ExamSubjectNet = {\n      ...existing,\n      ...updates,\n    };\n    this.examSubjectNets.set(id, updated);\n    return updated;\n  }\n\n  async deleteExamSubjectNet(id: string): Promise<boolean> {\n    return this.examSubjectNets.delete(id);\n  }\n\n  async deleteExamSubjectNetsByExamId(examId: string): Promise<boolean> {\n    const netsToDelete = Array.from(this.examSubjectNets.entries())\n      .filter(([_, net]) => net.exam_id === examId);\n    \n    let deletedAny = false;\n    for (const [id, _] of netsToDelete) {\n      if (this.examSubjectNets.delete(id)) {\n        deletedAny = true;\n      }\n    }\n    return deletedAny;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":23366},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, boolean, timestamp, integer } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const tasks = pgTable(\"tasks\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  priority: text(\"priority\", { enum: [\"low\", \"medium\", \"high\"] }).notNull().default(\"medium\"),\n  category: text(\"category\", { enum: [\"genel\", \"turkce\", \"sosyal\", \"matematik\", \"fizik\", \"kimya\", \"biyoloji\", \"ayt-matematik\", \"ayt-fizik\", \"ayt-kimya\", \"ayt-biyoloji\"] }).notNull().default(\"genel\"),\n  color: text(\"color\").default(\"#8B5CF6\"), // Default purple color\n  completed: boolean(\"completed\").notNull().default(false),\n  completedAt: text(\"completed_at\"),\n  dueDate: text(\"due_date\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const moods = pgTable(\"moods\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  mood: text(\"mood\").notNull(), // Unlimited emoji support\n  moodBg: text(\"mood_bg\"), // Background color\n  note: text(\"note\"), // Renamed from lyrics for better clarity\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const goals = pgTable(\"goals\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  targetValue: text(\"target_value\").notNull(), // e.g., \"75\", \"10000\"\n  currentValue: text(\"current_value\").notNull().default(\"0\"),\n  unit: text(\"unit\").notNull(), // e.g., \"net\", \"sıralama\"\n  category: text(\"category\", { enum: [\"tyt\", \"ayt\", \"siralama\", \"genel\"] }).notNull().default(\"genel\"),\n  timeframe: text(\"timeframe\", { enum: [\"günlük\", \"haftalık\", \"aylık\", \"yıllık\"] }).notNull().default(\"aylık\"),\n  targetDate: text(\"target_date\"),\n  completed: boolean(\"completed\").notNull().default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const questionLogs = pgTable(\"question_logs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  exam_type: text(\"exam_type\", { enum: [\"TYT\", \"AYT\"] }).notNull(),\n  subject: text(\"subject\").notNull(), // Türkçe, Matematik, Fizik etc.\n  topic: text(\"topic\"), // Optional - specific topic within subject for detailed analysis\n  correct_count: text(\"correct_count\").notNull(),\n  wrong_count: text(\"wrong_count\").notNull(),\n  blank_count: text(\"blank_count\").notNull().default(\"0\"),\n  wrong_topics: text(\"wrong_topics\").array().default([]), // Array of topics where mistakes were made\n  time_spent_minutes: integer(\"time_spent_minutes\"), // Optional - time spent solving questions in minutes\n  study_date: text(\"study_date\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const examResults = pgTable(\"exam_results\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  exam_name: text(\"exam_name\").notNull(),\n  exam_date: text(\"exam_date\").notNull(),\n  tyt_net: text(\"tyt_net\").notNull().default(\"0\"),\n  ayt_net: text(\"ayt_net\").notNull().default(\"0\"),\n  subjects_data: text(\"subjects_data\"), // JSON string containing detailed subject breakdown\n  ranking: text(\"ranking\"),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// New table for detailed subject-level net scores per exam\nexport const examSubjectNets = pgTable(\"exam_subject_nets\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  exam_id: varchar(\"exam_id\").notNull(), // References examResults.id\n  exam_type: text(\"exam_type\", { enum: [\"TYT\", \"AYT\"] }).notNull(),\n  subject: text(\"subject\").notNull(), // Türkçe, Matematik, Fizik, Kimya, Biyoloji, etc.\n  net_score: text(\"net_score\").notNull(), // Subject-specific net score\n  correct_count: text(\"correct_count\").notNull().default(\"0\"),\n  wrong_count: text(\"wrong_count\").notNull().default(\"0\"),\n  blank_count: text(\"blank_count\").notNull().default(\"0\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const flashcards = pgTable(\"flashcards\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  question: text(\"question\").notNull(),\n  answer: text(\"answer\").notNull(),\n  subject: text(\"subject\", { enum: [\"turkce\", \"matematik\", \"fizik\", \"kimya\", \"biyoloji\", \"tarih\", \"cografya\", \"felsefe\", \"genel\"] }).notNull().default(\"genel\"),\n  difficulty: text(\"difficulty\", { enum: [\"easy\", \"medium\", \"hard\"] }).notNull().default(\"medium\"),\n  lastReviewed: timestamp(\"last_reviewed\"),\n  nextReview: timestamp(\"next_review\").defaultNow(),\n  reviewCount: text(\"review_count\").notNull().default(\"0\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertTaskSchema = createInsertSchema(tasks).omit({\n  id: true,\n  createdAt: true,\n  completedAt: true,\n});\n\nexport const insertMoodSchema = createInsertSchema(moods).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertGoalSchema = createInsertSchema(goals).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertQuestionLogSchema = createInsertSchema(questionLogs).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertExamResultSchema = createInsertSchema(examResults).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertFlashcardSchema = createInsertSchema(flashcards).omit({\n  id: true,\n  createdAt: true,\n  reviewCount: true,\n});\n\nexport const insertExamSubjectNetSchema = createInsertSchema(examSubjectNets).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertTask = z.infer<typeof insertTaskSchema>;\nexport type Task = typeof tasks.$inferSelect;\nexport type InsertMood = z.infer<typeof insertMoodSchema>;\nexport type Mood = typeof moods.$inferSelect;\nexport type InsertGoal = z.infer<typeof insertGoalSchema>;\nexport type Goal = typeof goals.$inferSelect;\nexport type InsertQuestionLog = z.infer<typeof insertQuestionLogSchema>;\nexport type QuestionLog = typeof questionLogs.$inferSelect;\nexport type InsertExamResult = z.infer<typeof insertExamResultSchema>;\nexport type ExamResult = typeof examResults.$inferSelect;\nexport type InsertFlashcard = z.infer<typeof insertFlashcardSchema>;\nexport type Flashcard = typeof flashcards.$inferSelect;\nexport type InsertExamSubjectNet = z.infer<typeof insertExamSubjectNetSchema>;\nexport type ExamSubjectNet = typeof examSubjectNets.$inferSelect;\n","size_bytes":6362},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport Homepage from \"@/pages/homepage\";\nimport Home from \"@/pages/home\";\nimport Dashboard from \"@/pages/dashboard\";\nimport NetCalculator from \"@/pages/net-calculator\";\nimport Timer from \"@/pages/timer\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Homepage} />\n      <Route path=\"/tasks\" component={Home} />\n      <Route path=\"/dashboard\" component={Dashboard} />\n      <Route path=\"/net-calculator\" component={NetCalculator} />\n      <Route path=\"/timer\" component={Timer} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1204},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  /* Light Theme - Purple-White-Black */\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(0 0% 0%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(0 0% 0%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(0 0% 0%);\n  --primary: hsl(271 76% 53%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(271 76% 95%);\n  --secondary-foreground: hsl(0 0% 0%);\n  --muted: hsl(0 0% 96%);\n  --muted-foreground: hsl(0 0% 45%);\n  --accent: hsl(271 76% 90%);\n  --accent-foreground: hsl(0 0% 0%);\n  --destructive: hsl(0 84.2% 60.2%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(271 20% 85%);\n  --input: hsl(271 20% 90%);\n  --ring: hsl(271 76% 53%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(0 0% 100%);\n  --sidebar-foreground: hsl(0 0% 0%);\n  --sidebar-primary: hsl(271 76% 53%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(271 76% 95%);\n  --sidebar-accent-foreground: hsl(0 0% 0%);\n  --sidebar-border: hsl(271 20% 85%);\n  --sidebar-ring: hsl(271 76% 53%);\n  --font-sans: \"Inter\", \"system-ui\", \"sans-serif\";\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  /* Dark Theme - Purple-White-Black */\n  --background: hsl(0 0% 9%);\n  --foreground: hsl(0 0% 100%);\n  --card: hsl(0 0% 12%);\n  --card-foreground: hsl(0 0% 100%);\n  --popover: hsl(0 0% 12%);\n  --popover-foreground: hsl(0 0% 100%);\n  --primary: hsl(271 76% 65%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(0 0% 18%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(0 0% 18%);\n  --muted-foreground: hsl(0 0% 65%);\n  --accent: hsl(271 50% 25%);\n  --accent-foreground: hsl(0 0% 100%);\n  --destructive: hsl(0 84.2% 60.2%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(0 0% 25%);\n  --input: hsl(0 0% 25%);\n  --ring: hsl(271 76% 65%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(0 0% 9%);\n  --sidebar-foreground: hsl(0 0% 100%);\n  --sidebar-primary: hsl(271 76% 65%);\n  --sidebar-primary-foreground: hsl(0 0% 0%);\n  --sidebar-accent: hsl(0 0% 18%);\n  --sidebar-accent-foreground: hsl(0 0% 100%);\n  --sidebar-border: hsl(0 0% 25%);\n  --sidebar-ring: hsl(271 76% 65%);\n  --font-sans: \"Inter\", \"system-ui\", \"sans-serif\";\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: var(--font-sans);\n  }\n}\n\n@layer utilities {\n  .task-item {\n    transition: transform 0.2s ease, box-shadow 0.2s ease;\n  }\n  \n  .task-item:hover {\n    transform: translateY(-1px);\n    box-shadow: 0 4px 12px 0 rgba(0, 0, 0, 0.1);\n  }\n  \n  .dark .task-item:hover {\n    box-shadow: 0 4px 12px 0 rgba(0, 0, 0, 0.3);\n  }\n\n  /* Weather Animation Effects */\n  .rain-animation {\n    background: linear-gradient(transparent 0%, rgba(59, 130, 246, 0.1) 100%);\n    position: relative;\n  }\n\n  .rain-animation::before {\n    content: '';\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    background-image: \n      linear-gradient(90deg, rgba(59, 130, 246, 0.3) 1px, transparent 1px),\n      linear-gradient(180deg, rgba(59, 130, 246, 0.3) 1px, transparent 1px);\n    background-size: 20px 20px;\n    animation: rain-fall 2s linear infinite;\n    opacity: 0.3;\n  }\n\n  .sun-rays-animation {\n    background: radial-gradient(circle, rgba(251, 191, 36, 0.1) 0%, transparent 70%);\n    position: relative;\n    overflow: hidden;\n  }\n\n  .sun-rays-animation::before {\n    content: '';\n    position: absolute;\n    top: -50%;\n    left: -50%;\n    width: 200%;\n    height: 200%;\n    background: conic-gradient(from 0deg, transparent, rgba(251, 191, 36, 0.1), transparent, rgba(251, 191, 36, 0.05), transparent);\n    animation: sun-rotation 20s linear infinite;\n    pointer-events: none;\n  }\n\n  @keyframes rain-fall {\n    0% {\n      background-position: 0 -20px;\n    }\n    100% {\n      background-position: 0 20px;\n    }\n  }\n\n  @keyframes sun-rotation {\n    0% {\n      transform: rotate(0deg);\n    }\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n\n  /* Snow animation for winter weather */\n  .snow-animation {\n    background: linear-gradient(transparent 0%, rgba(219, 234, 254, 0.1) 100%);\n    position: relative;\n  }\n\n  .snow-animation::before {\n    content: '❄️ ❅ ❄️ ❅ ❄️';\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    font-size: 1rem;\n    color: rgba(219, 234, 254, 0.5);\n    animation: snow-fall 8s linear infinite;\n    white-space: nowrap;\n    overflow: hidden;\n  }\n\n  @keyframes snow-fall {\n    0% {\n      transform: translateY(-100px);\n    }\n    100% {\n      transform: translateY(100px);\n    }\n  }\n}\n","size_bytes":6884},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/add-task-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { InsertTask } from \"@shared/schema\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface AddTaskModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport function AddTaskModal({ open, onOpenChange }: AddTaskModalProps) {\n  const [formData, setFormData] = useState<{\n    title: string;\n    description: string;\n    priority: \"low\" | \"medium\" | \"high\";\n    category: \"genel\" | \"turkce\" | \"sosyal\" | \"matematik\" | \"fizik\" | \"kimya\" | \"biyoloji\" | \"ayt-matematik\" | \"ayt-fizik\" | \"ayt-kimya\" | \"ayt-biyoloji\";\n    color: string;\n    dueDate: string;\n  }>({\n    title: \"\",\n    description: \"\",\n    priority: \"medium\",\n    category: \"genel\",\n    color: \"#8B5CF6\", // Default purple\n    dueDate: new Date().toISOString().split('T')[0], // Today's date\n  });\n\n  const { toast } = useToast();\n\n  const createTaskMutation = useMutation({\n    mutationFn: (data: InsertTask) => \n      apiRequest(\"POST\", \"/api/tasks\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tasks\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/calendar\"] });\n      toast({\n        title: \"Görev eklendi\",\n        description: \"Yeni görev başarıyla eklendi.\",\n      });\n      onOpenChange(false);\n      resetForm();\n    },\n    onError: () => {\n      toast({\n        title: \"Hata\",\n        description: \"Görev eklenemedi.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setFormData({\n      title: \"\",\n      description: \"\",\n      priority: \"medium\",\n      category: \"genel\",\n      color: \"#8B5CF6\", // Default purple\n      dueDate: new Date().toISOString().split('T')[0], // Today's date\n    });\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.title.trim()) {\n      toast({\n        title: \"Uyarı\",\n        description: \"Görev başlığı gereklidir.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createTaskMutation.mutate({\n      title: formData.title.trim(),\n      description: formData.description.trim() || undefined,\n      priority: formData.priority,\n      category: formData.category,\n      color: formData.color,\n      dueDate: formData.dueDate,\n      completed: false,\n    });\n  };\n\n  const handleCancel = () => {\n    onOpenChange(false);\n    resetForm();\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-lg\">\n        <DialogHeader>\n          <DialogTitle>Yeni Görev Ekle</DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          {/* Task Title */}\n          <div>\n            <Label htmlFor=\"task-title\">Görev Başlığı</Label>\n            <Input\n              id=\"task-title\"\n              placeholder=\"Görev başlığını girin...\"\n              value={formData.title}\n              onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}\n              data-testid=\"input-task-title\"\n            />\n          </div>\n\n          {/* Task Description */}\n          <div>\n            <Label htmlFor=\"task-description\">Açıklama</Label>\n            <Textarea\n              id=\"task-description\"\n              placeholder=\"Görev detaylarını açıklayın...\"\n              value={formData.description}\n              onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n              className=\"h-20 resize-none\"\n              data-testid=\"input-task-description\"\n            />\n          </div>\n\n          {/* Priority & Category */}\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"task-priority\">Öncelik</Label>\n              <Select\n                value={formData.priority}\n                onValueChange={(value: \"low\" | \"medium\" | \"high\") => \n                  setFormData(prev => ({ ...prev, priority: value }))\n                }\n              >\n                <SelectTrigger data-testid=\"select-task-priority\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"low\">Düşük</SelectItem>\n                  <SelectItem value=\"medium\">Orta</SelectItem>\n                  <SelectItem value=\"high\">Yüksek</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label htmlFor=\"task-category\">Ders Kategorisi</Label>\n              <Select\n                value={formData.category}\n                onValueChange={(value: \"genel\" | \"turkce\" | \"sosyal\" | \"matematik\" | \"fizik\" | \"kimya\" | \"biyoloji\" | \"ayt-matematik\" | \"ayt-fizik\" | \"ayt-kimya\" | \"ayt-biyoloji\") => \n                  setFormData(prev => ({ ...prev, category: value }))\n                }\n              >\n                <SelectTrigger data-testid=\"select-task-category\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"genel\">Genel</SelectItem>\n                  <div className=\"px-2 py-1 text-xs font-semibold text-muted-foreground border-b\">TYT Dersleri</div>\n                  <SelectItem value=\"turkce\">Türkçe</SelectItem>\n                  <SelectItem value=\"sosyal\">Sosyal Bilimler</SelectItem>\n                  <SelectItem value=\"matematik\">Matematik</SelectItem>\n                  <SelectItem value=\"fizik\">Fizik</SelectItem>\n                  <SelectItem value=\"kimya\">Kimya</SelectItem>\n                  <SelectItem value=\"biyoloji\">Biyoloji</SelectItem>\n                  <div className=\"px-2 py-1 text-xs font-semibold text-muted-foreground border-b border-t\">AYT Dersleri</div>\n                  <SelectItem value=\"ayt-matematik\">AYT Matematik</SelectItem>\n                  <SelectItem value=\"ayt-fizik\">AYT Fizik</SelectItem>\n                  <SelectItem value=\"ayt-kimya\">AYT Kimya</SelectItem>\n                  <SelectItem value=\"ayt-biyoloji\">AYT Biyoloji</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          {/* Due Date */}\n          <div>\n            <Label htmlFor=\"task-due-date\">Son Tarih</Label>\n            <Input\n              id=\"task-due-date\"\n              type=\"date\"\n              value={formData.dueDate}\n              onChange={(e) => setFormData(prev => ({ ...prev, dueDate: e.target.value }))}\n              className=\"w-full\"\n              data-testid=\"input-task-due-date\"\n            />\n          </div>\n\n          {/* Color Picker */}\n          <div>\n            <Label htmlFor=\"task-color\">Görev Rengi</Label>\n            <div className=\"flex items-center space-x-3\">\n              <Input\n                id=\"task-color\"\n                type=\"color\"\n                value={formData.color}\n                onChange={(e) => setFormData(prev => ({ ...prev, color: e.target.value }))}\n                className=\"w-16 h-10 rounded cursor-pointer\"\n                data-testid=\"input-task-color\"\n              />\n              <div className=\"flex space-x-2\">\n                {[\"#8B5CF6\", \"#EC4899\", \"#10B981\", \"#F59E0B\", \"#EF4444\", \"#3B82F6\"].map((color) => (\n                  <button\n                    key={color}\n                    type=\"button\"\n                    onClick={() => setFormData(prev => ({ ...prev, color }))}\n                    className={`w-6 h-6 rounded-full border-2 ${\n                      formData.color === color ? \"border-gray-400\" : \"border-transparent\"\n                    }`}\n                    style={{ backgroundColor: color }}\n                    title={color}\n                  />\n                ))}\n              </div>\n            </div>\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"flex space-x-3 pt-4\">\n            <Button \n              type=\"submit\"\n              disabled={createTaskMutation.isPending}\n              className=\"flex-1\"\n              data-testid=\"button-save-task\"\n            >\n              {createTaskMutation.isPending ? \"Ekleniyor...\" : \"Görev Ekle\"}\n            </Button>\n            <Button \n              type=\"button\"\n              variant=\"secondary\"\n              onClick={handleCancel}\n              className=\"flex-1\"\n              data-testid=\"button-cancel-task\"\n            >\n              İptal\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":8970},"client/src/components/countdown-widget.tsx":{"content":"import { useState, useEffect } from \"react\";\n\ninterface CountdownWidgetProps {\n  className?: string;\n}\n\nexport function CountdownWidget({ className = \"\" }: CountdownWidgetProps) {\n  const [tytCountdown, setTytCountdown] = useState({ days: 0, hours: 0, minutes: 0, seconds: 0 });\n  const [aytCountdown, setAytCountdown] = useState({ days: 0, hours: 0, minutes: 0, seconds: 0 });\n\n  useEffect(() => {\n    // TYT date: June 20, 2026 Saturday 10:15\n    const tytDate = new Date(\"2026-06-20T10:15:00\");\n    // AYT date: June 21, 2026 Sunday 10:15\n    const aytDate = new Date(\"2026-06-21T10:15:00\");\n\n    const updateCountdown = () => {\n      const now = new Date();\n      \n      // Calculate TYT countdown\n      const tytDiff = tytDate.getTime() - now.getTime();\n      if (tytDiff > 0) {\n        const days = Math.floor(tytDiff / (1000 * 60 * 60 * 24));\n        const hours = Math.floor((tytDiff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n        const minutes = Math.floor((tytDiff % (1000 * 60 * 60)) / (1000 * 60));\n        const seconds = Math.floor((tytDiff % (1000 * 60)) / 1000);\n        setTytCountdown({ days, hours, minutes, seconds });\n      } else {\n        setTytCountdown({ days: 0, hours: 0, minutes: 0, seconds: 0 });\n      }\n      \n      // Calculate AYT countdown\n      const aytDiff = aytDate.getTime() - now.getTime();\n      if (aytDiff > 0) {\n        const days = Math.floor(aytDiff / (1000 * 60 * 60 * 24));\n        const hours = Math.floor((aytDiff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n        const minutes = Math.floor((aytDiff % (1000 * 60 * 60)) / (1000 * 60));\n        const seconds = Math.floor((aytDiff % (1000 * 60)) / 1000);\n        setAytCountdown({ days, hours, minutes, seconds });\n      } else {\n        setAytCountdown({ days: 0, hours: 0, minutes: 0, seconds: 0 });\n      }\n    };\n\n    // Update immediately and then every second\n    updateCountdown();\n    const interval = setInterval(updateCountdown, 1000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const formatTime = (time: { days: number; hours: number; minutes: number; seconds: number }) => {\n    return {\n      days: time.days.toString().padStart(3, '0'),\n      hours: time.hours.toString().padStart(2, '0'),\n      minutes: time.minutes.toString().padStart(2, '0'),\n      seconds: time.seconds.toString().padStart(2, '0')\n    };\n  };\n\n  return (\n    <div className={`relative overflow-hidden bg-gradient-to-br from-card via-card/95 to-card/80 backdrop-blur-md rounded-3xl border border-border/30 p-8 shadow-2xl hover:shadow-3xl transition-all duration-500 hover:scale-[1.02] ${className}`}>\n      {/* Background Pattern */}\n      <div className=\"absolute inset-0 opacity-[0.03]\">\n        <div className=\"absolute inset-0\" style={{\n          backgroundImage: `radial-gradient(circle at 25% 25%, rgba(var(--primary), 0.5) 1px, transparent 1px), radial-gradient(circle at 75% 75%, rgba(var(--primary), 0.3) 1px, transparent 1px)`,\n          backgroundSize: '50px 50px'\n        }}></div>\n      </div>\n      <div className=\"relative text-center mb-10\">\n        <div className=\"absolute top-0 left-1/2 transform -translate-x-1/2 w-32 h-32 bg-gradient-to-r from-primary/10 via-primary/5 to-primary/10 rounded-full blur-3xl -z-10\"></div>\n        <h3 className=\"text-3xl md:text-4xl font-extrabold bg-gradient-to-r from-blue-600 via-purple-600 via-primary to-emerald-600 bg-clip-text text-transparent mb-3\">\n          YKS 2026 Geri Sayımı\n        </h3>\n        <div className=\"flex items-center justify-center space-x-2\">\n          <div className=\"w-12 h-0.5 bg-gradient-to-r from-transparent via-blue-500 to-primary rounded-full\"></div>\n          <div className=\"w-2 h-2 bg-primary rounded-full animate-pulse\"></div>\n          <div className=\"w-12 h-0.5 bg-gradient-to-r from-primary via-emerald-500 to-transparent rounded-full\"></div>\n        </div>\n        <p className=\"text-muted-foreground text-sm mt-2\">Hedefine olan mesafeni takip et</p>\n      </div>\n      \n      {/* Chain-Linked Countdown Layout */}\n      <div className=\"flex flex-col lg:flex-row items-center justify-center gap-8 lg:gap-16\">\n        \n        {/* TYT Countdown */}\n        <div className=\"relative group\">\n          <div className=\"absolute -inset-1 bg-gradient-to-r from-blue-600 via-purple-600 to-blue-600 rounded-2xl blur opacity-25 group-hover:opacity-40 transition duration-300 animate-pulse\"></div>\n          <div className=\"relative bg-gradient-to-br from-card to-card/90 rounded-2xl border border-border/30 p-6 shadow-xl\">\n            <div className=\"text-center mb-4\">\n              <div className=\"inline-flex items-center justify-center w-16 h-16 bg-gradient-to-br from-blue-600 to-purple-600 rounded-full mb-3 shadow-lg\">\n                <span className=\"text-2xl font-bold text-white\">T</span>\n              </div>\n              <h4 className=\"text-xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent mb-2\">\n                TYT 2026\n              </h4>\n              <div className=\"text-xs text-muted-foreground\">Temel Yeterlilik Testi</div>\n            </div>\n            <div className=\"grid grid-cols-4 gap-3\">\n              {[\n                { label: 'Gün', value: formatTime(tytCountdown).days },\n                { label: 'Saat', value: formatTime(tytCountdown).hours },\n                { label: 'Dk', value: formatTime(tytCountdown).minutes },\n                { label: 'Sn', value: formatTime(tytCountdown).seconds }\n              ].map(({ label, value }) => (\n                <div key={label} className=\"text-center\">\n                  <div className=\"bg-gradient-to-br from-blue-600 to-purple-600 text-white rounded-xl px-2 py-3 shadow-lg min-h-[60px] flex flex-col justify-center\">\n                    <span className=\"text-lg md:text-xl font-bold font-mono leading-tight\">{value}</span>\n                  </div>\n                  <div className=\"text-xs text-muted-foreground mt-1 font-medium\">{label}</div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        {/* Chain Connection Effect */}\n        <div className=\"relative flex items-center justify-center\">\n          {/* Vertical chain for mobile, horizontal for desktop */}\n          <div className=\"lg:hidden flex flex-col items-center space-y-2\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"w-8 h-8 border-4 border-primary/30 rounded-full bg-gradient-to-br from-primary/20 to-primary/10 shadow-md animate-bounce\" \n                   style={{ animationDelay: `${i * 200}ms`, animationDuration: '2s' }}></div>\n            ))}\n          </div>\n          \n          <div className=\"hidden lg:flex items-center space-x-3\">\n            {[...Array(5)].map((_, i) => (\n              <div key={i} className=\"w-6 h-6 border-3 border-primary/40 rounded-full bg-gradient-to-br from-primary/20 to-primary/10 shadow-lg animate-pulse\" \n                   style={{ animationDelay: `${i * 300}ms`, animationDuration: '2.5s' }}></div>\n            ))}\n          </div>\n          \n          {/* Central connecting element */}\n          <div className=\"absolute inset-0 flex items-center justify-center\">\n            <div className=\"w-12 h-12 bg-gradient-to-br from-primary to-primary/60 rounded-full shadow-2xl flex items-center justify-center\">\n              <div className=\"w-6 h-6 bg-white rounded-full opacity-90 animate-ping\"></div>\n            </div>\n          </div>\n        </div>\n\n        {/* AYT Countdown */}\n        <div className=\"relative group\">\n          <div className=\"absolute -inset-1 bg-gradient-to-r from-emerald-600 via-teal-600 to-emerald-600 rounded-2xl blur opacity-25 group-hover:opacity-40 transition duration-300 animate-pulse\"></div>\n          <div className=\"relative bg-gradient-to-br from-card to-card/90 rounded-2xl border border-border/30 p-6 shadow-xl\">\n            <div className=\"text-center mb-4\">\n              <div className=\"inline-flex items-center justify-center w-16 h-16 bg-gradient-to-br from-emerald-600 to-teal-600 rounded-full mb-3 shadow-lg\">\n                <span className=\"text-2xl font-bold text-white\">A</span>\n              </div>\n              <h4 className=\"text-xl font-bold bg-gradient-to-r from-emerald-600 to-teal-600 bg-clip-text text-transparent mb-2\">\n                AYT 2026  \n              </h4>\n              <div className=\"text-xs text-muted-foreground\">Alan Yeterlilik Testi</div>\n            </div>\n            <div className=\"grid grid-cols-4 gap-3\">\n              {[\n                { label: 'Gün', value: formatTime(aytCountdown).days },\n                { label: 'Saat', value: formatTime(aytCountdown).hours },\n                { label: 'Dk', value: formatTime(aytCountdown).minutes },\n                { label: 'Sn', value: formatTime(aytCountdown).seconds }\n              ].map(({ label, value }) => (\n                <div key={label} className=\"text-center\">\n                  <div className=\"bg-gradient-to-br from-emerald-600 to-teal-600 text-white rounded-xl px-2 py-3 shadow-lg min-h-[60px] flex flex-col justify-center\">\n                    <span className=\"text-lg md:text-xl font-bold font-mono leading-tight\">{value}</span>\n                  </div>\n                  <div className=\"text-xs text-muted-foreground mt-1 font-medium\">{label}</div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      {/* Bottom Motivational Section */}\n      <div className=\"relative text-center mt-12 space-y-4\">\n        <div className=\"text-base text-foreground font-medium\">\n          ✨ Hedefinize ulaşmak için kalan zaman ✨\n        </div>\n        <div className=\"flex items-center justify-center space-x-3\">\n          <div className=\"w-3 h-3 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full animate-pulse shadow-lg\"></div>\n          <div className=\"w-1 h-1 bg-muted-foreground rounded-full\"></div>\n          <div className=\"w-4 h-4 bg-gradient-to-r from-primary to-primary/60 rounded-full animate-bounce shadow-lg\" style={{ animationDelay: '0.3s' }}></div>\n          <div className=\"w-1 h-1 bg-muted-foreground rounded-full\"></div>\n          <div className=\"w-3 h-3 bg-gradient-to-r from-emerald-500 to-teal-500 rounded-full animate-pulse shadow-lg\" style={{ animationDelay: '0.6s' }}></div>\n        </div>\n        <div className=\"text-xs text-muted-foreground italic\">\n          \"Başarı, hazırlığın fırsatla buluştuğu andır\"\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":10507},"client/src/components/emoji-picker.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\ninterface EmojiPickerProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  selectedEmoji: string;\n  onEmojiSelect: (emoji: string) => void;\n  note: string;\n  onNoteChange: (note: string) => void;\n}\n\nconst EMOJI_CATEGORIES = {\n  smileys: [\"😀\", \"😃\", \"😄\", \"😁\", \"😆\", \"😅\", \"🤣\", \"😂\", \"🙂\", \"🙃\", \"😉\", \"😊\", \"😇\", \"🥰\", \"😍\", \"🤩\", \"😘\", \"😗\", \"😚\", \"😙\", \"😋\", \"😛\", \"😜\", \"🤪\", \"😝\", \"🤗\", \"🤭\", \"🤫\", \"🤔\", \"🤐\", \"🤨\", \"😐\", \"😑\", \"😶\", \"😏\", \"😒\", \"🙄\", \"😬\", \"🤥\", \"😔\", \"😪\", \"🤤\", \"😴\", \"😷\", \"🤒\", \"🤕\", \"🤢\", \"🤮\", \"🤧\", \"🥵\", \"🥶\", \"🥴\", \"😵\", \"🤯\", \"🤠\", \"🥳\", \"😎\", \"🤓\", \"🧐\"],\n  hearts: [\"❤️\", \"🧡\", \"💛\", \"💚\", \"💙\", \"💜\", \"🤎\", \"🖤\", \"🤍\", \"💕\", \"💞\", \"💓\", \"💗\", \"💖\", \"💘\", \"💝\", \"💟\", \"💔\", \"❣️\", \"💋\", \"👄\", \"🫶\", \"💏\", \"👨‍❤️‍👨\", \"👩‍❤️‍👩\", \"💑\", \"👨‍❤️‍👩\", \"👩‍❤️‍👨\"],\n  animals: [\"🐶\", \"🐱\", \"🐭\", \"🐹\", \"🐰\", \"🦊\", \"🐻\", \"🐼\", \"🐨\", \"🐯\", \"🦁\", \"🐮\", \"🐷\", \"🐽\", \"🐸\", \"🐵\", \"🙈\", \"🙉\", \"🙊\", \"🐒\", \"🐔\", \"🐧\", \"🐦\", \"🐤\", \"🐣\", \"🐥\", \"🦆\", \"🦅\", \"🦉\", \"🦇\", \"🐺\", \"🐗\", \"🐴\", \"🦄\", \"🐝\", \"🐛\", \"🦋\", \"🐌\", \"🐞\", \"🐜\", \"🦟\", \"🦗\", \"🕷️\", \"🕸️\", \"🦂\", \"🐢\", \"🐍\", \"🦎\", \"🦖\", \"🦕\", \"🐙\", \"🦑\", \"🦐\", \"🦞\", \"🦀\", \"🐡\", \"🐠\", \"🐟\", \"🐝\", \"🐞\"],\n  food: [\"🍎\", \"🍊\", \"🍋\", \"🍌\", \"🍉\", \"🍇\", \"🍓\", \"🍈\", \"🍒\", \"🍑\", \"🥭\", \"🍍\", \"🥥\", \"🥝\", \"🍅\", \"🍆\", \"🥑\", \"🥦\", \"🥬\", \"🥒\", \"🌶️\", \"🌽\", \"🥕\", \"🧄\", \"🧅\", \"🥔\", \"🍠\", \"🥐\", \"🥯\", \"🍞\", \"🥖\", \"🥨\", \"🧀\", \"🥚\", \"🍳\", \"🧈\", \"🥞\", \"🧇\", \"🥓\", \"🥩\", \"🍗\", \"🍖\", \"🦴\", \"🌭\", \"🍔\", \"🍟\", \"🍕\"],\n  activities: [\"⚽\", \"🏀\", \"🏈\", \"⚾\", \"🥎\", \"🎾\", \"🏐\", \"🏉\", \"🥏\", \"🎱\", \"🪀\", \"🏓\", \"🏸\", \"🏒\", \"🏑\", \"🥍\", \"🏏\", \"🪃\", \"🥅\", \"⛳\", \"🪁\", \"🏹\", \"🎣\", \"🤿\", \"🥊\", \"🥋\", \"🎽\", \"🛹\", \"🛷\", \"⛸️\", \"🥌\", \"🎿\", \"⛷️\", \"🏂\", \"🪂\", \"🏋️‍♀️\", \"🏋️‍♂️\", \"🤼‍♀️\", \"🤼‍♂️\", \"🤸‍♀️\", \"🤸‍♂️\", \"⛹️‍♀️\", \"⛹️‍♂️\", \"🤺\", \"🤾‍♀️\", \"🤾‍♂️\", \"🏌️‍♀️\", \"🏌️‍♂️\", \"🏇\", \"🧘‍♀️\", \"🧘‍♂️\", \"🏄‍♀️\", \"🏄‍♂️\", \"🏊‍♀️\", \"🏊‍♂️\"],\n  study: [\"📚\", \"📖\", \"📝\", \"✏️\", \"📒\", \"📓\", \"📔\", \"📕\", \"📗\", \"📘\", \"📙\", \"📑\", \"🔖\", \"🏷️\", \"💼\", \"📁\", \"📂\", \"🗂️\", \"📅\", \"📆\", \"🗓️\", \"📇\", \"📈\", \"📉\", \"📊\", \"📋\", \"📌\", \"📍\", \"📎\", \"🖇️\", \"📏\", \"📐\", \"✂️\", \"🗃️\", \"🗄️\", \"🗑️\", \"🔒\", \"🔓\", \"🔏\", \"🔐\", \"🔑\", \"🗝️\", \"🔨\", \"🪓\", \"⛏️\", \"⚒️\", \"🛠️\", \"🗡️\", \"🔗\", \"⛓️\", \"🧰\", \"🧲\", \"⚗️\", \"🧪\", \"🧫\", \"🧬\", \"🔬\", \"🔭\", \"📡\", \"💉\", \"🩸\", \"💊\", \"🩹\"]\n};\n\nexport function EmojiPicker({ open, onOpenChange, selectedEmoji, onEmojiSelect, note, onNoteChange }: EmojiPickerProps) {\n  const [showPreview, setShowPreview] = useState(false);\n\n  const handleEmojiSelect = (emoji: string) => {\n    onEmojiSelect(emoji);\n    setShowPreview(true);\n  };\n\n  const handleSave = () => {\n    setShowPreview(false);\n    onOpenChange(false);\n  };\n\n  const handleClear = () => {\n    onEmojiSelect('😊');\n    onNoteChange('');\n    setShowPreview(false);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[600px] max-h-[80vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"text-foreground\">Ruh Halinizi Paylaşın</DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          {/* Preview Section */}\n          {showPreview && (\n            <div className=\"relative\">\n              <div \n                className={`inline-flex items-center space-x-2 px-4 py-3 rounded-xl transition-all duration-500 ${\n                  selectedEmoji ? 'bg-primary/10 border border-primary/20' : 'bg-muted'\n                } ${note.trim() ? 'animate-pulse' : ''}`}\n                style={{\n                  animation: note.trim() ? 'breathe 2s ease-in-out infinite' : 'none'\n                }}\n              >\n                {selectedEmoji && (\n                  <span className=\"text-2xl\" role=\"img\" aria-label=\"selected emoji\">\n                    {selectedEmoji}\n                  </span>\n                )}\n                {note.trim() && (\n                  <span \n                    className={`text-foreground ${\n                      note.length > 50 ? 'text-sm' : note.length > 20 ? 'text-base' : 'text-lg'\n                    }`}\n                  >\n                    {note}\n                  </span>\n                )}\n              </div>\n            </div>\n          )}\n\n          {/* Emoji Categories */}\n          <Tabs defaultValue=\"smileys\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-6\">\n              <TabsTrigger value=\"smileys\" className=\"text-xs\">😊</TabsTrigger>\n              <TabsTrigger value=\"hearts\" className=\"text-xs\">❤️</TabsTrigger>\n              <TabsTrigger value=\"animals\" className=\"text-xs\">🐱</TabsTrigger>\n              <TabsTrigger value=\"food\" className=\"text-xs\">🍎</TabsTrigger>\n              <TabsTrigger value=\"activities\" className=\"text-xs\">⚽</TabsTrigger>\n              <TabsTrigger value=\"study\" className=\"text-xs\">📚</TabsTrigger>\n            </TabsList>\n\n            {Object.entries(EMOJI_CATEGORIES).map(([category, emojis]) => (\n              <TabsContent key={category} value={category} className=\"space-y-2\">\n                <div className=\"grid grid-cols-8 gap-2 max-h-48 overflow-y-auto p-2 border rounded-lg bg-muted/50\">\n                  {emojis.map((emoji) => (\n                    <button\n                      key={emoji}\n                      onClick={() => handleEmojiSelect(emoji)}\n                      className={`text-2xl p-2 rounded hover:bg-secondary transition-colors ${\n                        selectedEmoji === emoji ? 'bg-primary/20 ring-2 ring-primary' : ''\n                      }`}\n                      title={emoji}\n                    >\n                      {emoji}\n                    </button>\n                  ))}\n                </div>\n              </TabsContent>\n            ))}\n          </Tabs>\n\n          {/* Note Section - Single Line */}\n          <div className=\"space-y-2\">\n            <label className=\"text-sm font-medium text-foreground\">Kısa Not (İsteğe Bağlı)</label>\n            <Input\n              value={note}\n              onChange={(e) => onNoteChange(e.target.value)}\n              placeholder=\"Kısa bir not yazın...\"\n              maxLength={60}\n              className=\"w-full\"\n            />\n            <div className=\"text-xs text-muted-foreground text-right\">\n              {note.length}/60 karakter\n            </div>\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"flex justify-between space-x-2\">\n            <Button variant=\"outline\" onClick={handleClear}>\n              Temizle\n            </Button>\n            <div className=\"space-x-2\">\n              <Button variant=\"outline\" onClick={() => onOpenChange(false)}>\n                İptal\n              </Button>\n              <Button \n                onClick={handleSave}\n                disabled={!selectedEmoji && !note.trim()}\n                className=\"min-w-[80px]\"\n              >\n                Kaydet\n              </Button>\n            </div>\n          </div>\n        </div>\n      </DialogContent>\n\n      <style dangerouslySetInnerHTML={{\n        __html: `\n          @keyframes breathe {\n            0%, 100% { transform: scale(1); opacity: 1; }\n            50% { transform: scale(1.05); opacity: 0.8; }\n          }\n        `\n      }} />\n    </Dialog>\n  );\n}","size_bytes":8414},"client/src/components/header.tsx":{"content":"import { Sun, Moon } from \"lucide-react\";\nimport { useTheme } from \"./theme-provider\";\nimport { useState, useEffect } from \"react\";\nimport { EmojiPicker } from \"./emoji-picker\";\nimport { MotivationalQuote } from \"./motivational-quote\";\n\ninterface HeaderProps {\n  // No longer need onProfileClick since we handle emoji picker internally\n}\n\nexport function Header({}: HeaderProps) {\n  const { theme, toggleTheme } = useTheme();\n  const [showTooltip, setShowTooltip] = useState(false);\n  const [emojiPickerOpen, setEmojiPickerOpen] = useState(false);\n  const [selectedEmoji, setSelectedEmoji] = useState('😊');\n  const [note, setNote] = useState('');\n  \n  // Load from localStorage\n  useEffect(() => {\n    const savedEmoji = localStorage.getItem('userEmoji');\n    const savedNote = localStorage.getItem('userNote');\n    if (savedEmoji) setSelectedEmoji(savedEmoji);\n    if (savedNote) setNote(savedNote);\n  }, []);\n  \n  // Save to localStorage\n  useEffect(() => {\n    localStorage.setItem('userEmoji', selectedEmoji);\n  }, [selectedEmoji]);\n  \n  useEffect(() => {\n    localStorage.setItem('userNote', note);\n  }, [note]);\n\n  return (\n    <header className=\"bg-card border-b border-border shadow-sm transition-colors duration-300\">\n      {/* Motivational Quote Section */}\n      <div className=\"bg-gradient-to-r from-primary/5 to-primary/10 border-b border-border/50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-3\">\n          <MotivationalQuote />\n        </div>\n      </div>\n      \n      {/* Main Navigation */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          {/* Logo */}\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n              <span className=\"text-primary-foreground font-bold text-lg\">B</span>\n            </div>\n            <h1 className=\"text-xl font-semibold text-foreground\">Berat'ın Yapılacakları</h1>\n          </div>\n\n          {/* Right Section */}\n          <div className=\"flex items-center space-x-4\">\n            {/* Theme Toggle */}\n            <button \n              onClick={toggleTheme}\n              className=\"p-2 rounded-lg bg-secondary hover:bg-accent transition-colors duration-200\"\n              title=\"Tema Değiştir\"\n              data-testid=\"button-theme-toggle\"\n            >\n              {theme === \"light\" ? (\n                <Sun className=\"h-4 w-4 text-secondary-foreground\" />\n              ) : (\n                <Moon className=\"h-4 w-4 text-secondary-foreground\" />\n              )}\n            </button>\n\n            {/* Profile Section */}\n            <div className=\"flex items-center space-x-3\">\n              <span className=\"text-sm text-muted-foreground hidden sm:block\">Hoşgeldiniz</span>\n              <span className=\"font-medium text-foreground hidden sm:block\">Berat Çakıroğlu</span>\n              <div className=\"relative\">\n                <button\n                  onClick={() => setEmojiPickerOpen(true)}\n                  onMouseEnter={() => setShowTooltip(true)}\n                  onMouseLeave={() => setShowTooltip(false)}\n                  className=\"relative w-10 h-10 bg-primary rounded-full flex items-center justify-center text-primary-foreground font-semibold hover:bg-primary/90 transition-all duration-200 hover:scale-105\"\n                  data-testid=\"button-emoji-picker\"\n                >\n                  {/* Profile Photo - Always shows 'B' */}\n                  <span className=\"text-lg font-bold\">B</span>\n                  \n                  {/* Emoji Bubble - Top Right (Always shows when emoji is selected) */}\n                  {selectedEmoji && (\n                    <div className=\"absolute -top-1 -right-1 w-5 h-5 bg-white dark:bg-gray-800 rounded-full border-2 border-primary flex items-center justify-center shadow-lg\">\n                      <span className=\"text-xs\">{selectedEmoji}</span>\n                    </div>\n                  )}\n                  \n                  {/* Note Bubble - Bottom Right */}\n                  {note.trim() && (\n                    <div className=\"absolute -bottom-1 -right-2 bg-yellow-400 text-yellow-900 rounded-full w-4 h-4 flex items-center justify-center shadow-lg\">\n                      <span className=\"text-xs font-bold\">!</span>\n                    </div>\n                  )}\n                  \n                  {/* Tooltip - Now shows below */}\n                  {showTooltip && (\n                    <div className=\"absolute top-full left-1/2 mt-2 px-2 py-1 bg-card text-card-foreground text-xs rounded shadow-lg border border-border transform -translate-x-1/2 whitespace-nowrap animate-in fade-in-0 zoom-in-95 z-50\">\n                      Emoji seç & Not bırak\n                      {note.trim() && (\n                        <div className=\"mt-1 text-xs italic text-muted-foreground max-w-40 truncate\">\n                          \"{note.trim()}\"\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      {/* Emoji Picker Modal */}\n      <EmojiPicker \n        open={emojiPickerOpen} \n        onOpenChange={setEmojiPickerOpen}\n        selectedEmoji={selectedEmoji}\n        onEmojiSelect={setSelectedEmoji}\n        note={note}\n        onNoteChange={setNote}\n      />\n    </header>\n  );\n}\n","size_bytes":5516},"client/src/components/motivational-quote.tsx":{"content":"import { useMemo, useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\n\nconst YKS_QUOTES = [\n  {\n    quote: \"Başarı, küçük çabaların tekrar edilmesi, gün be gün, saat be saat yapılan şeylerdir.\",\n    author: \"Robert Collier\"\n  },\n  {\n    quote: \"Eğitim geleceğin anahtarıdır. Yarın, bugün hazırlanan insanlarındır.\",\n    author: \"Malcolm X\"\n  },\n  {\n    quote: \"Zeka sabit değildir. Her gün biraz daha öğrenebilir ve gelişebiliriz.\",\n    author: \"Carol Dweck\"\n  },\n  {\n    quote: \"Başarı, hazırlanma fırsatı ile karşılaştığında ortaya çıkar.\",\n    author: \"Bobby Unser\"\n  },\n  {\n    quote: \"Hedefin yeterince büyükse, nasıllar önemli değildir.\",\n    author: \"Jim Rohn\"\n  },\n  {\n    quote: \"Öğrenme asla zihnin kapasitesini tüketmez.\",\n    author: \"Leonardo da Vinci\"\n  },\n  {\n    quote: \"Mükemmellik bir alışkanlıktır, tek seferlik bir davranış değil.\",\n    author: \"Aristo\"\n  },\n  {\n    quote: \"Bilgi güçtür. Bilgi özgürlüktür.\",\n    author: \"Francis Bacon\"\n  },\n  {\n    quote: \"Çalışkan olmak yetenekten daha önemlidir.\",\n    author: \"Tim Notke\"\n  },\n  {\n    quote: \"Her uzman bir zamanlar yeni başlayandı.\",\n    author: \"Robin Sharma\"\n  },\n  {\n    quote: \"Başarısızlık, yeniden başlamanın daha akıllı bir yoludur.\",\n    author: \"Henry Ford\"\n  },\n  {\n    quote: \"Disiplin özgürlük ile ağrı arasında köprüdür.\",\n    author: \"Jim Rohn\"\n  },\n  {\n    quote: \"Eğitim hayatın hazırlığı değil, hayatın ta kendisidir.\",\n    author: \"John Dewey\"\n  },\n  {\n    quote: \"Yarın yapmayı planladığınız şeyi bugün, bugün yapmayı planladığınız şeyi şimdi yapın.\",\n    author: \"Benjamin Franklin\"\n  },\n  {\n    quote: \"Başarı son nokta değil, başarısızlık ölümcül değil: önemli olan devam etme cesareti.\",\n    author: \"Winston Churchill\"\n  },\n  {\n    quote: \"Büyük hayaller kurmaktan korkmayın, çünkü büyük hayaller büyük insanlar yaratır.\",\n    author: \"Mustafa Kemal Atatürk\"\n  },\n  {\n    quote: \"İlim ilim bilmektir, ilim kendin bilmektir, sen kendini bilmezsen, bu nice okumaktır?\",\n    author: \"Yunus Emre\"\n  },\n  {\n    quote: \"Çalışmayan doymaz, çalışkan beklemez.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Sabır acıdır ama meyvesi tatlıdır.\",\n    author: \"Hz. Ali\"\n  },\n  {\n    quote: \"İmkansız, sadece büyük düşünmeyenlerin sözlüğünde vardır.\",\n    author: \"Napoléon Bonaparte\"\n  },\n  {\n    quote: \"Hayatta en hakiki mürşit ilimdir, fendir.\",\n    author: \"Mustafa Kemal Atatürk\"\n  },\n  {\n    quote: \"Ne kadar çok okursan, o kadar çok şey bilirsin. Ne kadar çok öğrenirsen, o kadar çok yere gidersin.\",\n    author: \"Dr. Seuss\"\n  },\n  {\n    quote: \"Eğitim, karanlıktan aydınlığa giden en kısa yoldur.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Başarının %90'ı ortaya çıkmakla ilgilidir.\",\n    author: \"Woody Allen\"\n  },\n  {\n    quote: \"Gelecek bugünden hazırlanır.\",\n    author: \"Mustafa Kemal Atatürk\"\n  },\n  {\n    quote: \"Zor günler güçlü insanlar yaratır.\",\n    author: \"G. Michael Hopf\"\n  },\n  {\n    quote: \"Sen yapabilirsin! İnan ve başar!\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Her gün biraz daha iyileş, her gün biraz daha öğren.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Azim ve kararlılık her engeli aşar.\",\n    author: \"Leonardo da Vinci\"\n  },\n  {\n    quote: \"Başarı, başarısızlığa rağmen devam etme yetisidir.\",\n    author: \"Charles Kettering\"\n  },\n  {\n    quote: \"İyi bir öğrenci olmak için sadece dinlemek yetmez, anlamak gerekir.\",\n    author: \"Einstein\"\n  },\n  {\n    quote: \"Okumak ruha ne ise, egzersiz de vücuda odur.\",\n    author: \"Joseph Addison\"\n  },\n  {\n    quote: \"Zihin, kitap gibidir. Açılmazsa okunamaz.\",\n    author: \"Çin Atasözü\"\n  },\n  {\n    quote: \"Öğrenmek cesaret ister. Cesaretli ol!\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Hedefiniz yeterince büyükse, yöntemler kendiliğinden bulunur.\",\n    author: \"Zig Ziglar\"\n  },\n  {\n    quote: \"İtaat eden değil, hürriyetini bilen nesilleri yetiştirin.\",\n    author: \"Mustafa Kemal Atatürk\"\n  },\n  {\n    quote: \"Okumak, konuşmak, yazmak - bunlar öğrenmenin üç temel taşıdır.\",\n    author: \"Türk Eğitim Sistemi\"\n  },\n  {\n    quote: \"Çok çalış, sabırlı ol, başaracaksın!\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Her başarı hikayesi, bir hayalle başlar.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Zorluklar seni güçlendirir, kolaylıklar seni zayıflatır.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Bugünün yorgunluğu, yarının başarısıdır.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Pes etmek, başarısızlığa giden en kısa yoldur.\",\n    author: \"Einstein\"\n  },\n  {\n    quote: \"Öğrenmek bir yolculuktur, varış noktası değil.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Başarı sabır ister, sabır da kararlılık.\",\n    author: \"Confucius\"\n  },\n  {\n    quote: \"Her problem, içinde çözümünü barındırır.\",\n    author: \"Einstein\"\n  },\n  {\n    quote: \"İnanç dağları yerinden oynatır.\",\n    author: \"İncil\"\n  },\n  {\n    quote: \"Çalışmayan el, bereketli olmaz.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Yarın diye bir şey yoktur, bugün var olan tek gerçektir.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Başarı, hazırlık ile fırsatın buluşmasıdır.\",\n    author: \"Seneca\"\n  },\n  {\n    quote: \"Okumak hayatı değiştirir, bilgi güç verir.\",\n    author: \"Francis Bacon\"\n  },\n  {\n    quote: \"Çalışkan eli bereketli kılar Tanrı.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"İlerlemek için geriye bakmayı bırak.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Bugünkü çabanız, gelecekteki gururunuzdur.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Zeka önemlidir ama azim daha önemlidir.\",\n    author: \"Angela Duckworth\"\n  },\n  {\n    quote: \"Her yeni gün, yeni bir şans demektir.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Kendine inan, dünya da sana inanacak.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Başarı merdiveni, eliniz cebinizde çıkılmaz.\",\n    author: \"Henry Ford\"\n  },\n  {\n    quote: \"Çaba göstermeyen kimse, zafer tadını bilemez.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Büyük hedefler, büyük cesaretler gerektirir.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Öğrenmek ömür boyu sürecek bir serüvendir.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Zorluklarla mücadele etmek, seni güçlendirir.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Her düşen tekrar kalkar, her kaybeden tekrar kazanır.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"İradeniz kadarlık hedefleriniz olsun.\",\n    author: \"Mustafa Kemal Atatürk\"\n  },\n  {\n    quote: \"Bilgili insan güçlüdür, güçlü insan özgürdür.\",\n    author: \"Bacon\"\n  },\n  {\n    quote: \"Çalışkan insan kaderini değiştirebilir.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Sabır, en zor zamanların anahtarıdır.\",\n    author: \"Hz. Ali\"\n  },\n  {\n    quote: \"Hedefe giden yolda her adım önemlidir.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Başarı, başarısızlıktan korkmamaktır.\",\n    author: \"Michael Jordan\"\n  },\n  {\n    quote: \"Öğrenmek isteyenin önünde engel yoktur.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Çaba eden, hedefine ulaşır.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Yarının liderleri, bugünün öğrencileridir.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Azimli olmayan hiçbir şey başaramaz.\",\n    author: \"Samuel Johnson\"\n  },\n  {\n    quote: \"Her yeni bilgi, seni daha güçlü yapar.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Çalışmak ibadettir, öğrenmek zevktir.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"İmkansız diye bir şey yoktur, sadece yetersiz çaba vardır.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Başarı yolunda her engel, seni daha güçlü yapar.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Hedefinize odaklanın, yolunuzda ilerleyin.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Bugünkü fedakarlığınız, yarınki mutluluğunuzdur.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Çalışan el dolu olur, tembel el boş kalır.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Her başarılı insanın arkasında, büyük bir çaba vardır.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Eğitim almış bir zihin, asla işsiz kalmaz.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Vazgeçmeyin, çünkü büyük şeyler zaman alır.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"İrade dağları yerinden oynatır.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Başarı planla gelir, şansla değil.\",\n    author: \"Benjamin Franklin\"\n  },\n  {\n    quote: \"Çalışkan olmak, şanslı olmaktan daha önemlidir.\",\n    author: \"Gary Player\"\n  },\n  {\n    quote: \"Bugün atılan her adım, geleceğin temelini atar.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Öğrenmek isteyenin yaşı yoktur.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Cesaret eksikliği, başarının en büyük düşmanıdır.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Her soru, sizi cevaba biraz daha yaklaştırır.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Şimdi sarf ettiğiniz emek, gelecekteki refahınızdır.\",\n    author: \"Confucius\"\n  },\n  {\n    quote: \"Kitap okuyan hiçbir zaman yalnız değildir.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Başarı merdiveni, adım adım çıkılır.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Zorluklar sizi büyütür, kolaylıklar sizi küçültür.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Hedefleriniz kadar büyük yaşayın.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Çaba eden asla pişman olmaz.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Bugünün yorgunluğu, yarının gururudur.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Bilgili insan hiçbir zaman durağandır.\",\n    author: \"Einstein\"\n  },\n  {\n    quote: \"Öğrenmek yaşamın ta kendisidir.\",\n    author: \"Dewey\"\n  },\n  {\n    quote: \"Azim, her kapıyı açar.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Başarı, gayret etmenin ödülüdür.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Her gün biraz daha iyi olmaya odaklanın.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Çalışmak hem ibadettir hem de keyiftir.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Başarının anahtarı, doğru zamanda doğru çabadır.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Öğrenmek için geç kalmış diye bir şey yoktur.\",\n    author: \"Nelson Mandela\"\n  },\n  {\n    quote: \"Her soru, bir cevaba giden yoldur.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Çaba göstermeyen, başarıyı tadamaz.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"İlim öğrenmeye devam etmektir.\",\n    author: \"Confucius\"\n  },\n  {\n    quote: \"Bugünün çabası, yarının başarısıdır.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Hedefe giderken her adım değerlidir.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Çalışkan el bereketli olur.\",\n    author: \"İncil\"\n  },\n  {\n    quote: \"Başarı yolunda vazgeçmek yasaktır.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Her zorluk, bir fırsatın habercisidir.\",\n    author: \"Çin Atasözü\"\n  },\n  {\n    quote: \"Öğrenmek özgürlüktür, bilgi güçtür.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Çaba eden, hedefe ulaşır.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Bugünün yorgunluğu, yarının enerjisidir.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Her sayfa çevirdiğinizde, geleceğinizi yazıyorsunuz.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Sebat eden, galip gelir.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Başarı için çalışmaktan başka yol yoktur.\",\n    author: \"Thomas Edison\"\n  },\n  {\n    quote: \"Azim ile başarılmayacak hiçbir şey yoktur.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Öğrenmek, hayatın en büyük zevkidir.\",\n    author: \"Aristoteles\"\n  },\n  {\n    quote: \"Her gün yeni bir sayfa, yeni bir şans.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Çalışkan ol, başarılı ol, mutlu ol.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Bilgi birikimi, geleceğin anahtarıdır.\",\n    author: \"Francis Bacon\"\n  },\n  {\n    quote: \"Hedefiniz net olsun, çabanız sürekli olsun.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Zorluklar büyütür, kolaylıklar küçültür.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Başarı, işe odaklanmakla gelir.\",\n    author: \"Bill Gates\"\n  },\n  {\n    quote: \"Çaba sarf etmeyen, zafer tadını bilmez.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Her adım sizi hedefinize biraz daha yaklaştırır.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Okumak yaşamı değiştirir, öğrenmek hayatı güzelleştirir.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Başarı yolunda her günün kendine has değeri vardır.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Azimli olan, asla yenilmez.\",\n    author: \"Napoléon Bonaparte\"\n  },\n  {\n    quote: \"Çalışmanın karşılığı mutlaka alınır.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Bugün ekilen tohum, yarın hasat edilir.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Öğrenmekten korkmayın, bilmemekten korkun.\",\n    author: \"Confucius\"\n  },\n  {\n    quote: \"Her çaba, sizi hedefe bir adım daha yaklaştırır.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Başarı sabır ister, sabır da azim.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Çalışkan insan kaderini değiştirebilir.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Hedeflerinizi büyük tutun, çabalarınızı büyütün.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Bilgi güçtür, öğrenmek mutluluktur.\",\n    author: \"Francis Bacon\"\n  },\n  {\n    quote: \"Her sayfa, yeni bir umut; her soru, yeni bir şans.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Çaba gösterenin yolu açılır.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Başarı, hazırlanmış olanların eseridir.\",\n    author: \"Louis Pasteur\"\n  },\n  {\n    quote: \"Öğrenmek cesaret ister, bilmek sabır.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Her gün yeni bir fırsat, yeni bir başlangıç.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Azim, en büyük yetenektir.\",\n    author: \"Grit\"\n  },\n  {\n    quote: \"Çalışmanın meyvesi tatlıdır.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Hedefine ulaşmak isteyenin durması yasak.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Bilgi biriktiren, güç toplar.\",\n    author: \"Francis Bacon\"\n  },\n  {\n    quote: \"Her zorluk, sizi daha güçlü yapar.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Çaba eden hiçbir zaman pişman olmaz.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Başarı, tutarlı çabanın sonucudur.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Öğrenmek yaşamı zenginleştirir.\",\n    author: \"John Dewey\"\n  },\n  {\n    quote: \"Her adım sizi zirveye biraz daha yaklaştırır.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Azim dağları yerinden oynatır.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Bugünkü eksiğiniz, yarınki eksiğiniz olmasın.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Çalışmak hayatın en büyük zevkidir.\",\n    author: \"Khalil Gibran\"\n  },\n  {\n    quote: \"Başarıya giden yolda durmak yoktur.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Her kitap, yeni bir dünya demektir.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Sebat eden mutlaka kazanır.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Hedefleriniz kadar büyük hayaller kurun.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Öğrenmek, en değerli yatırımdır.\",\n    author: \"Benjamin Franklin\"\n  },\n  {\n    quote: \"Her çaba, sizi hedefe biraz daha yaklaştırır.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Çalışkan el bereketli olur, tembel el fakirleşir.\",\n    author: \"Süleyman\"\n  },\n  {\n    quote: \"Başarı, kesin kararlılığın ürünüdür.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Bilgili olmak, güçlü olmaktır.\",\n    author: \"Francis Bacon\"\n  },\n  {\n    quote: \"Her gün biraz daha iyiye doğru.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Azim, dünyanın en büyük gücüdür.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Çalışma azmi, başarının garantisidir.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Hedefine odaklan, başaracaksın.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Öğrenmek yaşamın kendisidir.\",\n    author: \"John Dewey\"\n  },\n  {\n    quote: \"Her sayfa, yeni bir umut; her gün, yeni bir şans.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Çaba gösterenin yolu açık olur.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Başarı, istikrarlı çalışmanın meyvesidir.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Bilgi, özgürlüğe giden en kısa yoldur.\",\n    author: \"Frederick Douglass\"\n  },\n  {\n    quote: \"Her adım, zirveye biraz daha yaklaştırır.\",\n    author: \"Motivasyon\"\n  }\n];\n\nexport function MotivationalQuote() {\n  const [location] = useLocation();\n  const [currentQuote, setCurrentQuote] = useState(YKS_QUOTES[0]);\n\n  // Change quote on location change or page refresh\n  useEffect(() => {\n    const getRandomQuote = () => {\n      // Use a combination of current time, date, and location to generate a more random index\n      const now = new Date();\n      const timeComponent = now.getHours() * 60 + now.getMinutes();\n      const dateComponent = now.getDate() * now.getMonth();\n      const locationComponent = location.split('').reduce((sum, char) => sum + char.charCodeAt(0), 0);\n      const randomSeed = timeComponent + dateComponent + locationComponent + Math.floor(Date.now() / 1000);\n      const randomIndex = randomSeed % YKS_QUOTES.length;\n      return YKS_QUOTES[randomIndex];\n    };\n\n    setCurrentQuote(getRandomQuote());\n  }, [location]); // This will trigger on navigation\n\n  // Also change on component mount (page refresh)\n  useEffect(() => {\n    const getRandomQuote = () => {\n      const randomIndex = Math.floor(Math.random() * YKS_QUOTES.length);\n      return YKS_QUOTES[randomIndex];\n    };\n\n    setCurrentQuote(getRandomQuote());\n  }, []); // This will trigger on page refresh\n\n  return (\n    <div className=\"text-center\">\n      <blockquote className=\"text-sm md:text-base font-medium text-foreground italic leading-relaxed\">\n        \"{currentQuote.quote}\"\n      </blockquote>\n      <cite className=\"text-xs text-muted-foreground mt-1 block\">\n        - {currentQuote.author}\n      </cite>\n    </div>\n  );\n}","size_bytes":18786},"client/src/components/profile-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { X } from \"lucide-react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Mood, InsertMood } from \"@shared/schema\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface ProfileModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nconst moodEmojis = {\n  \"very-happy\": { emoji: \"😄\", text: \"Harika\" },\n  \"happy\": { emoji: \"😊\", text: \"İyi\" },\n  \"neutral\": { emoji: \"😐\", text: \"Normal\" },\n  \"sad\": { emoji: \"😔\", text: \"Üzgün\" },\n  \"angry\": { emoji: \"😠\", text: \"Sinirli\" },\n};\n\nexport function ProfileModal({ open, onOpenChange }: ProfileModalProps) {\n  const [selectedMood, setSelectedMood] = useState<string>(\"\");\n  const [note, setNote] = useState(\"\");\n  const { toast } = useToast();\n\n  const { data: latestMood } = useQuery<Mood>({\n    queryKey: [\"/api/moods/latest\"],\n    enabled: open,\n  });\n\n  const saveMoodMutation = useMutation({\n    mutationFn: (data: InsertMood) => \n      apiRequest(\"POST\", \"/api/moods\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/moods\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/moods/latest\"] });\n      toast({\n        title: \"Ruh hali kaydedildi\",\n        description: \"Ruh haliniz başarıyla kaydedildi.\",\n      });\n      onOpenChange(false);\n      setSelectedMood(\"\");\n      setNote(\"\");\n    },\n    onError: () => {\n      toast({\n        title: \"Hata\",\n        description: \"Ruh hali kaydedilemedi.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSave = () => {\n    if (!selectedMood) {\n      toast({\n        title: \"Uyarı\",\n        description: \"Lütfen bir ruh hali seçin.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    saveMoodMutation.mutate({\n      mood: selectedMood as any,\n      note: note.trim() || undefined,\n    });\n  };\n\n  const formatTimeAgo = (date: Date) => {\n    const now = new Date();\n    const diffInHours = Math.floor((now.getTime() - new Date(date).getTime()) / (1000 * 60 * 60));\n    \n    if (diffInHours < 1) {\n      return \"Az önce\";\n    } else if (diffInHours < 24) {\n      return `${diffInHours} saat önce`;\n    } else {\n      const diffInDays = Math.floor(diffInHours / 24);\n      return `${diffInDays} gün önce`;\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle>Ruh Halini Paylaş</DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"space-y-4\">\n          {/* Mood Selection */}\n          <div>\n            <label className=\"block text-sm font-medium text-foreground mb-2\">\n              Bugün nasıl hissediyorsun?\n            </label>\n            <div className=\"grid grid-cols-5 gap-2\">\n              {Object.entries(moodEmojis).map(([mood, { emoji, text }]) => (\n                <button\n                  key={mood}\n                  onClick={() => setSelectedMood(mood)}\n                  className={`p-3 rounded-lg border transition-colors text-center ${\n                    selectedMood === mood\n                      ? \"border-primary bg-primary text-primary-foreground\"\n                      : \"border-border hover:bg-secondary\"\n                  }`}\n                  data-testid={`mood-${mood}`}\n                >\n                  <div className=\"text-2xl\">{emoji}</div>\n                  <div className=\"text-xs mt-1\">{text}</div>\n                </button>\n              ))}\n            </div>\n          </div>\n\n          {/* Note */}\n          <div>\n            <label htmlFor=\"mood-note\" className=\"block text-sm font-medium text-foreground mb-2\">\n              Notun\n            </label>\n            <Textarea\n              id=\"mood-note\"\n              placeholder=\"Bugün nasıl hissediyorsun? Notunu buraya yaz...\"\n              value={note}\n              onChange={(e) => setNote(e.target.value)}\n              className=\"h-24 resize-none\"\n              data-testid=\"input-note\"\n            />\n          </div>\n\n          {/* Current Mood Display */}\n          {latestMood && (\n            <div className=\"bg-muted rounded-lg p-3\">\n              <div className=\"text-sm text-muted-foreground mb-1\">Son ruh hali:</div>\n              <div className=\"flex items-center space-x-2\">\n                <span className=\"text-lg\">\n                  {moodEmojis[latestMood.mood as keyof typeof moodEmojis]?.emoji}\n                </span>\n                <span className=\"text-sm text-foreground\">\n                  {moodEmojis[latestMood.mood as keyof typeof moodEmojis]?.text} hissediyorum\n                </span>\n                <span className=\"text-xs text-muted-foreground\">\n                  • {formatTimeAgo(latestMood.createdAt!)}\n                </span>\n              </div>\n              {latestMood.note && (\n                <p className=\"text-xs text-muted-foreground mt-2 italic\">\n                  \"{latestMood.note}\"\n                </p>\n              )}\n            </div>\n          )}\n\n          {/* Action Buttons */}\n          <div className=\"flex space-x-3 pt-2\">\n            <Button \n              onClick={handleSave}\n              disabled={saveMoodMutation.isPending}\n              className=\"flex-1\"\n              data-testid=\"button-save-mood\"\n            >\n              {saveMoodMutation.isPending ? \"Kaydediliyor...\" : \"Kaydet\"}\n            </Button>\n            <Button \n              variant=\"secondary\"\n              onClick={() => onOpenChange(false)}\n              className=\"flex-1\"\n              data-testid=\"button-cancel-mood\"\n            >\n              İptal\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":5979},"client/src/components/sidebar.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Task } from \"@shared/schema\";\n\nexport function Sidebar() {\n  const { data: tasks = [] } = useQuery<Task[]>({\n    queryKey: [\"/api/tasks\"],\n  });\n\n  const totalTasks = tasks.length;\n  const completedTasks = tasks.filter(task => task.completed).length;\n  const pendingTasks = totalTasks - completedTasks;\n  const completionPercentage = totalTasks > 0 ? Math.round((completedTasks / totalTasks) * 100) : 0;\n\n  const workTasks = tasks.filter(task => task.category === \"work\").length;\n  const personalTasks = tasks.filter(task => task.category === \"personal\").length;\n  const shoppingTasks = tasks.filter(task => task.category === \"shopping\").length;\n\n  const currentDate = new Date();\n  const currentDay = currentDate.getDate();\n  const currentMonth = currentDate.toLocaleDateString(\"tr-TR\", { month: \"long\", year: \"numeric\" });\n  const currentWeekday = currentDate.toLocaleDateString(\"tr-TR\", { weekday: \"long\" });\n\n  // Generate calendar days for current month\n  const year = currentDate.getFullYear();\n  const month = currentDate.getMonth();\n  const firstDay = new Date(year, month, 1);\n  const lastDay = new Date(year, month + 1, 0);\n  const startDate = new Date(firstDay);\n  startDate.setDate(startDate.getDate() - firstDay.getDay());\n\n  const calendarDays = [];\n  for (let i = 0; i < 35; i++) {\n    const date = new Date(startDate);\n    date.setDate(startDate.getDate() + i);\n    calendarDays.push(date);\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Quick Stats */}\n      <div className=\"bg-card rounded-lg border border-border p-6 transition-colors duration-300\">\n        <h3 className=\"text-lg font-semibold text-foreground mb-4\">Dashboard</h3>\n        <div className=\"space-y-4\">\n          <div className=\"flex justify-between items-center\">\n            <span className=\"text-muted-foreground text-sm\">Toplam Görev</span>\n            <span className=\"font-semibold text-foreground\" data-testid=\"text-total-tasks\">{totalTasks}</span>\n          </div>\n          <div className=\"flex justify-between items-center\">\n            <span className=\"text-muted-foreground text-sm\">Tamamlanan</span>\n            <span className=\"font-semibold text-green-600\" data-testid=\"text-completed-tasks\">{completedTasks}</span>\n          </div>\n          <div className=\"flex justify-between items-center\">\n            <span className=\"text-muted-foreground text-sm\">Bekleyen</span>\n            <span className=\"font-semibold text-orange-600\" data-testid=\"text-pending-tasks\">{pendingTasks}</span>\n          </div>\n          <div className=\"w-full bg-secondary rounded-full h-2\">\n            <div \n              className=\"bg-primary h-2 rounded-full transition-all duration-300\" \n              style={{ width: `${completionPercentage}%` }}\n            ></div>\n          </div>\n          <p className=\"text-xs text-muted-foreground\">%{completionPercentage} tamamlandı</p>\n        </div>\n      </div>\n\n      {/* Calendar Widget */}\n      <div className=\"bg-card rounded-lg border border-border p-6 transition-colors duration-300\">\n        <h3 className=\"text-lg font-semibold text-foreground mb-4\">Takvim</h3>\n        <div className=\"text-center mb-4\">\n          <div className=\"text-2xl font-bold text-foreground\" data-testid=\"text-current-day\">{currentDay}</div>\n          <div className=\"text-sm text-muted-foreground\" data-testid=\"text-current-date\">{currentMonth}</div>\n          <div className=\"text-xs text-muted-foreground\" data-testid=\"text-current-weekday\">{currentWeekday}</div>\n        </div>\n        {/* Mini Calendar Grid */}\n        <div className=\"grid grid-cols-7 gap-1 text-xs\">\n          <div className=\"text-center text-muted-foreground p-1\">P</div>\n          <div className=\"text-center text-muted-foreground p-1\">S</div>\n          <div className=\"text-center text-muted-foreground p-1\">Ç</div>\n          <div className=\"text-center text-muted-foreground p-1\">P</div>\n          <div className=\"text-center text-muted-foreground p-1\">C</div>\n          <div className=\"text-center text-muted-foreground p-1\">C</div>\n          <div className=\"text-center text-muted-foreground p-1\">P</div>\n          {calendarDays.slice(0, 28).map((date, index) => {\n            const isCurrentMonth = date.getMonth() === month;\n            const isToday = date.getDate() === currentDay && isCurrentMonth;\n            \n            return (\n              <div\n                key={index}\n                className={`text-center p-1 ${\n                  isToday\n                    ? \"bg-primary text-primary-foreground rounded\"\n                    : isCurrentMonth\n                    ? \"hover:bg-secondary rounded cursor-pointer\"\n                    : \"text-muted-foreground/50\"\n                }`}\n              >\n                {date.getDate()}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n\n      {/* Categories */}\n      <div className=\"bg-card rounded-lg border border-border p-6 transition-colors duration-300\">\n        <h3 className=\"text-lg font-semibold text-foreground mb-4\">Kategoriler</h3>\n        <div className=\"space-y-2\">\n          <div className=\"flex items-center justify-between p-2 hover:bg-secondary rounded-lg cursor-pointer transition-colors\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-3 h-3 bg-red-500 rounded-full\"></div>\n              <span className=\"text-sm text-foreground\">İş</span>\n            </div>\n            <span className=\"text-xs text-muted-foreground\" data-testid=\"text-work-tasks\">{workTasks}</span>\n          </div>\n          <div className=\"flex items-center justify-between p-2 hover:bg-secondary rounded-lg cursor-pointer transition-colors\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-3 h-3 bg-blue-500 rounded-full\"></div>\n              <span className=\"text-sm text-foreground\">Kişisel</span>\n            </div>\n            <span className=\"text-xs text-muted-foreground\" data-testid=\"text-personal-tasks\">{personalTasks}</span>\n          </div>\n          <div className=\"flex items-center justify-between p-2 hover:bg-secondary rounded-lg cursor-pointer transition-colors\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-3 h-3 bg-green-500 rounded-full\"></div>\n              <span className=\"text-sm text-foreground\">Alışveriş</span>\n            </div>\n            <span className=\"text-xs text-muted-foreground\" data-testid=\"text-shopping-tasks\">{shoppingTasks}</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6618},"client/src/components/tasks-section.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Plus, Edit2, Trash2, Undo2, Calendar, CheckCircle2 } from \"lucide-react\";\nimport { Task } from \"@shared/schema\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { EditTaskModal } from \"@/components/edit-task-modal\";\n\ninterface TasksSectionProps {\n  onAddTask: () => void;\n}\n\nexport function TasksSection({ onAddTask }: TasksSectionProps) {\n  const [filter, setFilter] = useState<\"all\" | \"pending\" | \"completed\" | \"high\">(\"all\");\n  const [editingTask, setEditingTask] = useState<Task | null>(null);\n  const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n  const { toast } = useToast();\n\n  const { data: tasks = [] } = useQuery<Task[]>({\n    queryKey: [\"/api/tasks\"],\n  });\n\n  const toggleTaskMutation = useMutation({\n    mutationFn: (taskId: string) => \n      apiRequest(\"PATCH\", `/api/tasks/${taskId}/toggle`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tasks\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/calendar\"] });\n      toast({\n        title: \"Görev güncellendi\",\n        description: \"Görev durumu başarıyla değiştirildi.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Hata\",\n        description: \"Görev durumu değiştirilemedi.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteTaskMutation = useMutation({\n    mutationFn: (taskId: string) => \n      apiRequest(\"DELETE\", `/api/tasks/${taskId}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tasks\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/calendar\"] });\n      toast({\n        title: \"Görev silindi\",\n        description: \"Görev başarıyla silindi.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Hata\",\n        description: \"Görev silinemedi.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredTasks = tasks.filter(task => {\n    switch (filter) {\n      case \"pending\":\n        return !task.completed;\n      case \"completed\":\n        return task.completed;\n      case \"high\":\n        return task.priority === \"high\";\n      default:\n        return true;\n    }\n  });\n\n  const getTaskBorderStyle = (task: Task) => {\n    const color = task.color || \"#8B5CF6\"; // Default to purple if no color\n    return {\n      borderLeft: `4px solid ${color}`,\n    };\n  };\n\n  const getPriorityBadgeClass = (priority: string) => {\n    switch (priority) {\n      case \"high\":\n        return \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200\";\n      case \"medium\":\n        return \"bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200\";\n      case \"low\":\n        return \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\";\n      default:\n        return \"\";\n    }\n  };\n\n  const getCategoryBadgeClass = (category: string) => {\n    switch (category) {\n      case \"genel\":\n        return \"bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200\";\n      case \"turkce\":\n        return \"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200\";\n      case \"sosyal\":\n        return \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\";\n      case \"matematik\":\n        return \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200\";\n      case \"fizik\":\n        return \"bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200\";\n      case \"kimya\":\n        return \"bg-pink-100 text-pink-800 dark:bg-pink-900 dark:text-pink-200\";\n      case \"biyoloji\":\n        return \"bg-emerald-100 text-emerald-800 dark:bg-emerald-900 dark:text-emerald-200\";\n      case \"ayt-matematik\":\n        return \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200 border border-red-300\";\n      case \"ayt-fizik\":\n        return \"bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200 border border-orange-300\";\n      case \"ayt-kimya\":\n        return \"bg-pink-100 text-pink-800 dark:bg-pink-900 dark:text-pink-200 border border-pink-300\";\n      case \"ayt-biyoloji\":\n        return \"bg-emerald-100 text-emerald-800 dark:bg-emerald-900 dark:text-emerald-200 border border-emerald-300\";\n      default:\n        return \"\";\n    }\n  };\n\n  const getPriorityText = (priority: string) => {\n    switch (priority) {\n      case \"high\":\n        return \"Yüksek Öncelik\";\n      case \"medium\":\n        return \"Orta Öncelik\";\n      case \"low\":\n        return \"Düşük Öncelik\";\n      default:\n        return \"\";\n    }\n  };\n\n  const getCategoryText = (category: string) => {\n    switch (category) {\n      case \"genel\":\n        return \"Genel\";\n      case \"turkce\":\n        return \"Türkçe\";\n      case \"sosyal\":\n        return \"Sosyal Bilimler\";\n      case \"matematik\":\n        return \"Matematik\";\n      case \"fizik\":\n        return \"Fizik\";\n      case \"kimya\":\n        return \"Kimya\";\n      case \"biyoloji\":\n        return \"Biyoloji\";\n      case \"ayt-matematik\":\n        return \"AYT Matematik\";\n      case \"ayt-fizik\":\n        return \"AYT Fizik\";\n      case \"ayt-kimya\":\n        return \"AYT Kimya\";\n      case \"ayt-biyoloji\":\n        return \"AYT Biyoloji\";\n      default:\n        return \"\";\n    }\n  };\n\n  const formatDueDate = (dueDate: string) => {\n    if (!dueDate) return \"\";\n    const date = new Date(dueDate);\n    const today = new Date();\n    const tomorrow = new Date(today);\n    tomorrow.setDate(tomorrow.getDate() + 1);\n\n    if (date.toDateString() === today.toDateString()) {\n      return \"Bugün\";\n    } else if (date.toDateString() === tomorrow.toDateString()) {\n      return \"Yarın\";\n    } else {\n      return date.toLocaleDateString(\"tr-TR\", { day: \"numeric\", month: \"long\" });\n    }\n  };\n\n  const handleToggleTask = (taskId: string) => {\n    toggleTaskMutation.mutate(taskId);\n  };\n\n  const handleDeleteTask = (taskId: string) => {\n    deleteTaskMutation.mutate(taskId);\n  };\n\n  const handleEditTask = (task: Task) => {\n    setEditingTask(task);\n    setIsEditModalOpen(true);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header with Add Task */}\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-foreground\">Görevlerim</h2>\n          <p className=\"text-muted-foreground\">Bugün tamamlanacak görevler</p>\n        </div>\n        <Button \n          onClick={onAddTask}\n          className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n          data-testid=\"button-add-task\"\n        >\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Yeni Görev\n        </Button>\n      </div>\n\n      {/* Filters */}\n      <div className=\"flex flex-wrap gap-2\">\n        <button\n          onClick={() => setFilter(\"all\")}\n          className={`px-3 py-1 rounded-full text-sm font-medium transition-colors ${\n            filter === \"all\"\n              ? \"bg-primary text-primary-foreground\"\n              : \"bg-secondary text-secondary-foreground hover:bg-accent\"\n          }`}\n          data-testid=\"filter-all\"\n        >\n          Tümü\n        </button>\n        <button\n          onClick={() => setFilter(\"pending\")}\n          className={`px-3 py-1 rounded-full text-sm transition-colors ${\n            filter === \"pending\"\n              ? \"bg-primary text-primary-foreground\"\n              : \"bg-secondary text-secondary-foreground hover:bg-accent\"\n          }`}\n          data-testid=\"filter-pending\"\n        >\n          Bekleyen\n        </button>\n        <button\n          onClick={() => setFilter(\"completed\")}\n          className={`px-3 py-1 rounded-full text-sm transition-colors ${\n            filter === \"completed\"\n              ? \"bg-primary text-primary-foreground\"\n              : \"bg-secondary text-secondary-foreground hover:bg-accent\"\n          }`}\n          data-testid=\"filter-completed\"\n        >\n          Tamamlanan\n        </button>\n        <button\n          onClick={() => setFilter(\"high\")}\n          className={`px-3 py-1 rounded-full text-sm transition-colors ${\n            filter === \"high\"\n              ? \"bg-primary text-primary-foreground\"\n              : \"bg-secondary text-secondary-foreground hover:bg-accent\"\n          }`}\n          data-testid=\"filter-high-priority\"\n        >\n          Yüksek Öncelik\n        </button>\n      </div>\n\n      {/* Task List */}\n      <div className=\"space-y-3\">\n        {filteredTasks.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <p className=\"text-muted-foreground\">Görev bulunamadı.</p>\n          </div>\n        ) : (\n          filteredTasks.map((task) => (\n            <div\n              key={task.id}\n              className={`bg-card rounded-lg border border-border p-4 transition-all duration-200 hover:shadow-md hover:-translate-y-1 ${task.completed ? \"opacity-75\" : \"\"}`}\n              style={getTaskBorderStyle(task)}\n              data-testid={`task-item-${task.id}`}\n            >\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex items-start space-x-3 flex-1\">\n                  <button\n                    onClick={() => handleToggleTask(task.id)}\n                    className={`mt-1 w-5 h-5 rounded-full border-2 transition-colors duration-200 flex items-center justify-center ${\n                      task.completed\n                        ? \"bg-green-500 border-green-500\"\n                        : \"hover:opacity-80\"\n                    } hover:scale-110`}\n                    style={{\n                      borderColor: task.completed ? '#10B981' : (task.color || '#8B5CF6'),\n                      backgroundColor: task.completed ? '#10B981' : 'transparent'\n                    }}\n                    onMouseEnter={(e) => {\n                      if (!task.completed) {\n                        e.currentTarget.style.backgroundColor = task.color || '#8B5CF6';\n                      }\n                    }}\n                    onMouseLeave={(e) => {\n                      if (!task.completed) {\n                        e.currentTarget.style.backgroundColor = 'transparent';\n                      }\n                    }}\n                    data-testid={`button-toggle-task-${task.id}`}\n                  >\n                    {task.completed && (\n                      <CheckCircle2 className=\"h-3 w-3 text-white\" />\n                    )}\n                  </button>\n                  <div className=\"flex-1\">\n                    <h3\n                      className={`font-medium text-foreground ${\n                        task.completed ? \"line-through\" : \"\"\n                      }`}\n                    >\n                      {task.title}\n                    </h3>\n                    {task.description && (\n                      <p\n                        className={`text-sm text-muted-foreground mt-1 ${\n                          task.completed ? \"line-through\" : \"\"\n                        }`}\n                      >\n                        {task.description}\n                      </p>\n                    )}\n                    <div className=\"flex items-center space-x-4 mt-2\">\n                      {task.dueDate && (\n                        <span className=\"text-xs text-muted-foreground flex items-center\">\n                          <Calendar className=\"h-3 w-3 mr-1\" />\n                          {formatDueDate(task.dueDate)}\n                        </span>\n                      )}\n                      {task.completed ? (\n                        <span className=\"text-xs text-muted-foreground flex items-center\">\n                          <CheckCircle2 className=\"h-3 w-3 mr-1\" />\n                          Tamamlandı\n                        </span>\n                      ) : (\n                        <span\n                          className={`text-xs px-2 py-1 rounded-full ${getPriorityBadgeClass(\n                            task.priority\n                          )}`}\n                        >\n                          {getPriorityText(task.priority)}\n                        </span>\n                      )}\n                      <span\n                        className={`text-xs px-2 py-1 rounded-full ${getCategoryBadgeClass(\n                          task.category\n                        )}`}\n                      >\n                        {getCategoryText(task.category)}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  {task.completed ? (\n                    <button\n                      onClick={() => handleToggleTask(task.id)}\n                      className=\"p-2 hover:bg-secondary rounded-lg transition-colors\"\n                      title=\"Geri al\"\n                      data-testid={`button-undo-task-${task.id}`}\n                    >\n                      <Undo2 className=\"h-4 w-4 text-muted-foreground\" />\n                    </button>\n                  ) : (\n                    <button\n                      onClick={() => handleEditTask(task)}\n                      className=\"p-2 hover:bg-secondary rounded-lg transition-colors\"\n                      title=\"Düzenle\"\n                      data-testid={`button-edit-task-${task.id}`}\n                    >\n                      <Edit2 className=\"h-4 w-4 text-muted-foreground\" />\n                    </button>\n                  )}\n                  <button\n                    onClick={() => handleDeleteTask(task.id)}\n                    className=\"p-2 hover:bg-destructive/10 rounded-lg transition-colors\"\n                    title=\"Sil\"\n                    data-testid={`button-delete-task-${task.id}`}\n                  >\n                    <Trash2 className=\"h-4 w-4 text-destructive\" />\n                  </button>\n                </div>\n              </div>\n            </div>\n          ))\n        )}\n      </div>\n      \n      {/* Edit Task Modal */}\n      <EditTaskModal \n        open={isEditModalOpen}\n        onOpenChange={setIsEditModalOpen}\n        task={editingTask}\n      />\n    </div>\n  );\n}\n","size_bytes":14195},"client/src/components/theme-provider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"light\" | \"dark\";\n\ntype ThemeProviderContextType = {\n  theme: Theme;\n  toggleTheme: () => void;\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    const savedTheme = localStorage.getItem(\"theme\") as Theme;\n    return savedTheme || \"light\";\n  });\n\n  useEffect(() => {\n    const root = document.documentElement;\n    root.classList.remove(\"light\", \"dark\");\n    root.classList.add(theme);\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme(prev => prev === \"light\" ? \"dark\" : \"light\");\n  };\n\n  return (\n    <ThemeProviderContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeProviderContext);\n  if (context === undefined) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n}\n","size_bytes":1149},"client/src/components/weather-widget.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\ninterface WeatherData {\n  location: string;\n  current: {\n    temperature: number;\n    description: string;\n    emoji: string;\n    humidity: number;\n    windSpeed: number;\n    windDirection: string;\n    windDescription: string;\n    feelsLike: number;\n    pressure: number;\n    visibility: number;\n    precipitation: number;\n  };\n  hourlyForecast: Array<{\n    time: string;\n    hour: number;\n    temperature: number;\n    emoji: string;\n    humidity: number;\n    windSpeed: number;\n    windDirection: number;\n    precipitation: number;\n  }>;\n  sunData: {\n    sunrise: string;\n    sunset: string;\n    dayLength: string;\n  };\n  forecast: Array<{\n    date: string;\n    dayName: string;\n    temperature: {\n      max: number;\n      min: number;\n    };\n    description: string;\n    emoji: string;\n    humidity: number;\n    windSpeed: number;\n  }>;\n  uvIndex: {\n    value: number;\n    level: string;\n    description: string;\n  };\n  airQuality: {\n    aqi: number;\n    level: string;\n    description: string;\n    components: {\n      pm2_5: number;\n      pm10: number;\n      o3: number;\n    };\n  } | null;\n  lifeIndices: {\n    exercise: {\n      level: string;\n      emoji: string;\n      description: string;\n    };\n    clothing: {\n      level: string;\n      emoji: string;\n      description: string;\n    };\n    travel: {\n      level: string;\n      emoji: string;\n      description: string;\n    };\n    skin: {\n      level: string;\n      emoji: string;\n      description: string;\n    };\n    driving: {\n      level: string;\n      emoji: string;\n      description: string;\n    };\n    comfort: {\n      level: string;\n      emoji: string;\n      description: string;\n    };\n  };\n}\n\nexport function WeatherWidget() {\n  return (\n    <div className=\"bg-card rounded-xl border border-border p-6 transition-colors duration-300\">\n      <h3 className=\"text-lg font-semibold text-foreground mb-3\">Hava Durumu</h3>\n      <div className=\"text-center\">\n        <div className=\"text-3xl mb-2\">🔧</div>\n        <div className=\"text-muted-foreground mb-2\">Hava durumu servisi güncelleniyor</div>\n        <div className=\"text-sm text-muted-foreground\">Yeni API entegrasyonu yapılıyor...</div>\n      </div>\n    </div>\n  );\n}","size_bytes":2244},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Header } from \"@/components/header\";\nimport { Link, useLocation } from \"wouter\";\nimport { TrendingUp, BarChart3, Target, Brain, BookOpen, Plus, CalendarDays, X, FlaskConical, Trash2, AlertTriangle, Sparkles, Award, Clock, Zap, Edit } from \"lucide-react\";\nimport { Task, Goal, QuestionLog, InsertQuestionLog, ExamResult, InsertExamResult } from \"@shared/schema\";\nimport { DashboardSummaryCards } from \"@/components/dashboard-summary-cards\";\nimport { AdvancedCharts } from \"@/components/advanced-charts\";\nimport { QuestionAnalysisCharts } from \"@/components/question-analysis-charts\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface DailySummary {\n  date: string;\n  tasksCompleted: number;\n  totalTasks: number;\n  moods: any[];\n  productivity: number;\n}\n\ninterface TopicStats {\n  topic: string;\n  wrongMentions: number;\n  totalSessions: number;\n  mentionFrequency: number;\n}\n\ninterface PriorityTopic {\n  topic: string;\n  priority: number;\n  lastSeen: string;\n  improvementNeeded: boolean;\n}\n\nexport default function Dashboard() {\n  const [location] = useLocation();\n  const [showQuestionDialog, setShowQuestionDialog] = useState(false);\n  const [editingQuestionLog, setEditingQuestionLog] = useState<QuestionLog | null>(null);\n  const [newQuestion, setNewQuestion] = useState({ \n    exam_type: \"TYT\", \n    subject: \"Türkçe\", \n    correct_count: \"\", \n    wrong_count: \"\", \n    blank_count: \"\", \n    study_date: new Date().toISOString().split('T')[0],\n    wrong_topics: [] as string[],\n    time_spent_minutes: \"\"\n  });\n  const [wrongTopicInput, setWrongTopicInput] = useState(\"\");\n  const [showExamDialog, setShowExamDialog] = useState(false);\n  const [newExamResult, setNewExamResult] = useState({ \n    exam_name: \"\", \n    exam_date: new Date().toISOString().split('T')[0], \n    exam_type: \"TYT\" as \"TYT\" | \"AYT\",\n    subjects: {\n      turkce: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n      matematik: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n      sosyal: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n      fen: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n      fizik: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n      kimya: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n      biyoloji: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] }\n    }\n  });\n  const [currentWrongTopics, setCurrentWrongTopics] = useState<{[key: string]: string}>({});\n  const { toast } = useToast();\n\n  const { data: tasks = [] } = useQuery<Task[]>({\n    queryKey: [\"/api/tasks\"],\n  });\n\n  const { data: dailySummary = [] } = useQuery<DailySummary[]>({\n    queryKey: [\"/api/summary/daily\"],\n  });\n  \n  const { data: questionLogs = [] } = useQuery<QuestionLog[]>({\n    queryKey: [\"/api/question-logs\"],\n  });\n  \n  const { data: examResults = [] } = useQuery<ExamResult[]>({\n    queryKey: [\"/api/exam-results\"],\n  });\n\n  const { data: topicStats = [] } = useQuery<TopicStats[]>({\n    queryKey: [\"/api/topics/stats\"],\n  });\n\n  const { data: priorityTopics = [] } = useQuery<PriorityTopic[]>({\n    queryKey: [\"/api/topics/priority\"],\n  });\n\n  const createQuestionLogMutation = useMutation({\n    mutationFn: (data: InsertQuestionLog) => apiRequest(\"POST\", \"/api/question-logs\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/question-logs\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/topics/stats\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/topics/priority\"] });\n      toast({ title: \"✅ Soru kaydı eklendi\", description: \"Soru çözüm kaydınız eklendi ve analiz güncellendi!\" });\n      setShowQuestionDialog(false);\n      setNewQuestion({ \n        exam_type: \"TYT\", \n        subject: \"Türkçe\", \n        correct_count: \"\", \n        wrong_count: \"\", \n        blank_count: \"\", \n        study_date: new Date().toISOString().split('T')[0],\n        wrong_topics: [],\n        time_spent_minutes: \"\"\n      });\n      setWrongTopicInput(\"\");\n    },\n    onError: () => {\n      toast({ title: \"❌ Hata\", description: \"Soru kaydı eklenemedi.\", variant: \"destructive\" });\n    },\n  });\n\n  const deleteQuestionLogMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/question-logs/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/question-logs\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/topics/stats\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/topics/priority\"] });\n      toast({ title: \"🗑️ Soru kaydı silindi\", description: \"Soru çözüm kaydınız başarıyla silindi.\" });\n    },\n    onError: () => {\n      toast({ title: \"❌ Hata\", description: \"Soru kaydı silinemedi.\", variant: \"destructive\" });\n    },\n  });\n\n  const updateQuestionLogMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: Partial<InsertQuestionLog> }) => \n      apiRequest(\"PUT\", `/api/question-logs/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/question-logs\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/topics/stats\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/topics/priority\"] });\n      setEditingQuestionLog(null);\n      setShowQuestionDialog(false);\n      toast({ title: \"📝 Soru kaydı güncellendi\", description: \"Soru çözüm kaydınız başarıyla güncellendi.\" });\n    },\n    onError: () => {\n      toast({ title: \"❌ Hata\", description: \"Soru kaydı güncellenemedi.\", variant: \"destructive\" });\n    },\n  });\n  \n  const createExamResultMutation = useMutation({\n    mutationFn: (data: InsertExamResult) => apiRequest(\"POST\", \"/api/exam-results\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/exam-results\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/exam-subject-nets\"] });\n      toast({ title: \"Deneme sonucu eklendi\", description: \"Deneme sınav sonucunuz kaydedildi.\" });\n      setShowExamDialog(false);\n      setNewExamResult({ \n        exam_name: \"\", \n        exam_date: new Date().toISOString().split('T')[0], \n        exam_type: \"TYT\" as \"TYT\" | \"AYT\",\n        subjects: {\n          turkce: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n          matematik: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n          sosyal: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n          fen: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n          fizik: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n          kimya: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n          biyoloji: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] }\n        }\n      });\n    },\n    onError: () => {\n      toast({ title: \"Hata\", description: \"Deneme sonucu eklenemedi.\", variant: \"destructive\" });\n    },\n  });\n  \n  const deleteExamResultMutation = useMutation({\n    mutationFn: (examId: string) => apiRequest(\"DELETE\", `/api/exam-results/${examId}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/exam-results\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/exam-subject-nets\"] });\n      toast({ title: \"Deneme sonucu silindi\", description: \"Deneme sınav sonucunuz başarıyla silindi.\" });\n    },\n    onError: () => {\n      toast({ title: \"Hata\", description: \"Deneme sonucu silinemedi.\", variant: \"destructive\" });\n    },\n  });\n\n  // Subject options based on TYT/AYT\n  const getSubjectOptions = (examType: string) => {\n    if (examType === \"TYT\") {\n      return [\"Türkçe\", \"Sosyal Bilimler\", \"Matematik\", \"Fizik\", \"Kimya\", \"Biyoloji\"];\n    } else {\n      return [\"Matematik\", \"Fizik\", \"Kimya\", \"Biyoloji\"];\n    }\n  };\n\n  // Generate heatmap data for last 3 months\n  const generateHeatmapData = () => {\n    const data = [];\n    const today = new Date();\n    for (let i = 89; i >= 0; i--) {\n      const date = new Date(today);\n      date.setDate(today.getDate() - i);\n      const dateStr = date.toISOString().split('T')[0];\n      \n      // Find matching daily summary\n      const daySummary = dailySummary.find(d => d.date === dateStr);\n      const intensity = daySummary ? Math.min(daySummary.tasksCompleted / 5, 1) : 0;\n      \n      data.push({\n        date: dateStr,\n        day: date.getDate(),\n        month: date.getMonth(),\n        intensity,\n        count: daySummary?.tasksCompleted || 0\n      });\n    }\n    return data;\n  };\n\n  const heatmapData = generateHeatmapData();\n\n\n  // Recent activities (last 10 items combined)\n  const recentActivities = [\n    ...questionLogs.slice(0, 5).map(log => ({\n      type: 'question',\n      title: `${log.exam_type} ${log.subject} - ${log.correct_count} doğru`,\n      date: log.study_date,\n      icon: Brain\n    })),\n    ...examResults.slice(0, 5).map(exam => ({\n      type: 'exam',\n      title: `${exam.exam_name} - TYT: ${exam.tyt_net}`,\n      date: exam.exam_date,\n      icon: BarChart3\n    })),\n    ...tasks.filter(t => t.completed).slice(0, 5).map(task => ({\n      type: 'task',\n      title: task.title,\n      date: task.createdAt || new Date().toISOString(),\n      icon: Target\n    }))\n  ].sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime()).slice(0, 8);\n\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-background to-secondary/20\">\n      <Header />\n      \n      {/* Centered Navigation */}\n      <nav className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n        <div className=\"flex items-center justify-center space-x-6\">\n          <Link href=\"/\">\n            <button \n              className={`px-8 py-3 rounded-xl font-semibold text-lg transition-all duration-200 ${\n                location === '/' \n                  ? 'bg-primary text-primary-foreground shadow-lg' \n                  : 'bg-secondary text-secondary-foreground hover:bg-accent hover:scale-105'\n              }`}\n              data-testid=\"link-homepage\"\n            >\n              Anasayfa\n            </button>\n          </Link>\n          <Link href=\"/tasks\">\n            <button \n              className={`px-8 py-3 rounded-xl font-semibold text-lg transition-all duration-200 ${\n                location === '/tasks' \n                  ? 'bg-primary text-primary-foreground shadow-lg' \n                  : 'bg-secondary text-secondary-foreground hover:bg-accent hover:scale-105'\n              }`}\n              data-testid=\"link-todos\"\n            >\n              Yapılacaklar\n            </button>\n          </Link>\n          <Link href=\"/dashboard\">\n            <button \n              className={`px-8 py-3 rounded-xl font-semibold text-lg transition-all duration-200 ${\n                location === '/dashboard' \n                  ? 'bg-primary text-primary-foreground shadow-lg' \n                  : 'bg-secondary text-secondary-foreground hover:bg-accent hover:scale-105'\n              }`}\n              data-testid=\"link-dashboard\"\n            >\n              Raporlarım\n            </button>\n          </Link>\n          <Link href=\"/net-calculator\">\n            <button \n              className={`px-8 py-3 rounded-xl font-semibold text-lg transition-all duration-200 ${\n                location === '/net-calculator' \n                  ? 'bg-primary text-primary-foreground shadow-lg' \n                  : 'bg-secondary text-secondary-foreground hover:bg-accent hover:scale-105'\n              }`}\n            >\n              Net Hesapla\n            </button>\n          </Link>\n          <Link href=\"/timer\">\n            <button \n              className={`px-8 py-3 rounded-xl font-semibold text-lg transition-all duration-200 ${\n                location === '/timer' \n                  ? 'bg-primary text-primary-foreground shadow-lg' \n                  : 'bg-secondary text-secondary-foreground hover:bg-accent hover:scale-105'\n              }`}\n              data-testid=\"link-timer\"\n            >\n              Sayaç\n            </button>\n          </Link>\n        </div>\n      </nav>\n\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n        {/* Modern Dashboard Header */}\n        <div className=\"mb-8 text-center\">\n          <h1 className=\"text-4xl font-bold mb-3 bg-gradient-to-r from-primary via-purple-600 to-blue-600 bg-clip-text text-transparent flex items-center justify-center gap-3\">\n            <Sparkles className=\"h-10 w-10 text-primary animate-pulse\" />\n            📊 Raporlarım\n            <Sparkles className=\"h-10 w-10 text-primary animate-pulse\" />\n          </h1>\n          <p className=\"text-lg text-muted-foreground\">Çalışma verilerinizin kapsamlı analizi ve kişiselleştirilmiş öneriler</p>\n        </div>\n\n        {/* Summary Cards */}\n        <DashboardSummaryCards />\n\n        {/* Solved Questions Count Section with CRUD */}\n        <div className=\"grid grid-cols-1 gap-6 mb-8\">\n          <Card className=\"bg-gradient-to-br from-green-50/50 via-card to-emerald-50/50 dark:from-green-950/30 dark:via-card dark:to-emerald-950/30 backdrop-blur-sm border-2 border-green-200/30 dark:border-green-800/30 shadow-2xl\">\n            <CardHeader className=\"bg-gradient-to-r from-green-500/10 to-emerald-500/10 rounded-t-lg border-b border-green-200/30\">\n              <CardTitle className=\"text-xl font-bold bg-gradient-to-r from-green-600 to-emerald-600 bg-clip-text text-transparent flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  <BarChart3 className=\"h-6 w-6 text-green-500\" />\n                  📊 Çözülen Soru Sayısı\n                </div>\n                <Button \n                  onClick={() => setShowQuestionDialog(true)}\n                  size=\"sm\" \n                  variant=\"outline\"\n                  className=\"text-xs border-green-300 text-green-700 hover:bg-green-50\"\n                >\n                  <Plus className=\"h-3 w-3 mr-1\" />\n                  Soru Ekle\n                </Button>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"pt-6\">\n              {questionLogs.length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <BarChart3 className=\"h-12 w-12 mx-auto mb-3 opacity-40\" />\n                  <h3 className=\"font-medium mb-1\">Henüz soru kaydı yok</h3>\n                  <p className=\"text-sm\">Çözdüğünüz soruları kaydetmeye başlayın - istatistiklerinizi görmek için! 📊</p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {/* Summary Stats */}\n                  <div className=\"grid grid-cols-3 gap-4 mb-6\">\n                    <div className=\"text-center p-4 bg-gradient-to-r from-green-100/50 to-emerald-100/50 dark:from-green-900/20 dark:to-emerald-900/20 rounded-xl border border-green-200/50\">\n                      <div className=\"text-2xl font-bold text-green-600\">\n                        {questionLogs.reduce((total, log) => total + parseInt(log.correct_count), 0)}\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">Toplam Doğru</div>\n                    </div>\n                    <div className=\"text-center p-4 bg-gradient-to-r from-red-100/50 to-pink-100/50 dark:from-red-900/20 dark:to-pink-900/20 rounded-xl border border-red-200/50\">\n                      <div className=\"text-2xl font-bold text-red-600\">\n                        {questionLogs.reduce((total, log) => total + parseInt(log.wrong_count), 0)}\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">Toplam Yanlış</div>\n                    </div>\n                    <div className=\"text-center p-4 bg-gradient-to-r from-yellow-100/50 to-amber-100/50 dark:from-yellow-900/20 dark:to-amber-900/20 rounded-xl border border-yellow-200/50\">\n                      <div className=\"text-2xl font-bold text-yellow-600\">\n                        {questionLogs.reduce((total, log) => total + parseInt(log.blank_count || '0'), 0)}\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">Toplam Boş</div>\n                    </div>\n                  </div>\n\n                  {/* Question Logs List with Edit/Delete */}\n                  <div className=\"space-y-3 max-h-80 overflow-y-auto\">\n                    {questionLogs.slice(0, 10).map((log, index) => (\n                      <div key={log.id} className=\"p-4 bg-gradient-to-r from-green-100/30 to-emerald-100/30 dark:from-green-900/20 dark:to-emerald-900/20 rounded-xl border border-green-200/50 transition-all hover:scale-102 hover:shadow-md\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <div className=\"flex items-center gap-3\">\n                            <div className=\"w-8 h-8 rounded-full bg-gradient-to-r from-green-500 to-emerald-500 text-white flex items-center justify-center font-bold text-sm\">\n                              {index + 1}\n                            </div>\n                            <div>\n                              <div className=\"font-semibold text-foreground\">\n                                {log.exam_type} - {log.subject}\n                              </div>\n                              <div className=\"text-xs text-muted-foreground\">\n                                {new Date(log.study_date).toLocaleDateString('tr-TR')}\n                              </div>\n                            </div>\n                          </div>\n                          <div className=\"flex items-center gap-2\">\n                            <button\n                              onClick={() => deleteQuestionLogMutation.mutate(log.id)}\n                              disabled={deleteQuestionLogMutation.isPending}\n                              className=\"text-red-500 hover:text-red-700 p-1 hover:bg-red-50 dark:hover:bg-red-900/20 rounded transition-colors\"\n                              title=\"Soru kaydını sil\"\n                            >\n                              <Trash2 className=\"h-3 w-3\" />\n                            </button>\n                          </div>\n                        </div>\n                        <div className=\"grid grid-cols-3 gap-2 text-sm\">\n                          <div className=\"text-center p-2 bg-white/50 dark:bg-slate-800/50 rounded-lg\">\n                            <div className=\"font-bold text-green-600\">{log.correct_count}</div>\n                            <div className=\"text-xs text-muted-foreground\">Doğru</div>\n                          </div>\n                          <div className=\"text-center p-2 bg-white/50 dark:bg-slate-800/50 rounded-lg\">\n                            <div className=\"font-bold text-red-600\">{log.wrong_count}</div>\n                            <div className=\"text-xs text-muted-foreground\">Yanlış</div>\n                          </div>\n                          <div className=\"text-center p-2 bg-white/50 dark:bg-slate-800/50 rounded-lg\">\n                            <div className=\"font-bold text-yellow-600\">{log.blank_count || '0'}</div>\n                            <div className=\"text-xs text-muted-foreground\">Boş</div>\n                          </div>\n                        </div>\n                        {log.wrong_topics && log.wrong_topics.length > 0 && (\n                          <div className=\"mt-2 text-xs text-red-600\">\n                            <span className=\"font-medium\">Yanlış Konular:</span> {log.wrong_topics.join(', ')}\n                          </div>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Deneme Sonuçları */}\n        <div className=\"grid grid-cols-1 gap-4 mb-6\">\n          <div className=\"bg-card rounded-xl border border-border p-6\">\n            <h3 className=\"text-lg font-semibold text-foreground mb-4 flex items-center justify-between\">\n              <div className=\"flex items-center\">\n                <BarChart3 className=\"h-5 w-5 mr-2 text-green-600\" />\n                Deneme Sonuçları\n              </div>\n              <Button \n                onClick={() => setShowExamDialog(true)}\n                size=\"sm\" \n                variant=\"outline\"\n                className=\"text-xs\"\n              >\n                <Plus className=\"h-3 w-3 mr-1\" />\n                Ekle\n              </Button>\n            </h3>\n            \n            {examResults.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                <BarChart3 className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n                <p className=\"text-sm\">Henüz deneme kaydı yok</p>\n              </div>\n            ) : (\n              <div className=\"space-y-3\">\n                {/* Exam results list */}\n                {examResults.slice(0, 5).map((exam, index) => (\n                  <div key={exam.id} className=\"p-3 bg-muted/20 rounded-lg\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <div className=\"text-sm font-medium text-foreground\">\n                        {index === 0 ? 'Son Deneme' : `${index + 1}. Deneme`}\n                      </div>\n                      <button\n                        onClick={() => deleteExamResultMutation.mutate(exam.id)}\n                        disabled={deleteExamResultMutation.isPending}\n                        className=\"text-red-500 hover:text-red-700 p-1 hover:bg-red-50 dark:hover:bg-red-900/20 rounded transition-colors\"\n                        title=\"Deneme sonucunu sil\"\n                        data-testid={`button-delete-exam-${exam.id}`}\n                      >\n                        <Trash2 className=\"h-3 w-3\" />\n                      </button>\n                    </div>\n                    <div className=\"space-y-1\">\n                      <div className=\"text-xs text-muted-foreground\">{exam.exam_name}</div>\n                      <div className=\"text-xs text-muted-foreground mb-1\">\n                        {new Date(exam.exam_date).toLocaleDateString('tr-TR')}\n                      </div>\n                      <div className=\"flex gap-2 text-sm\">\n                        <span className=\"text-blue-600\">TYT: {exam.tyt_net}</span>\n                        {exam.ayt_net && (\n                          <span className=\"text-purple-600\">AYT: {exam.ayt_net}</span>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Priority Topics Analysis and Error Frequency Analysis - Side by side below Test Results */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n          <AdvancedCharts />\n        </div>\n\n        {/* Net Progress Chart and Subject Net Distribution */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n          <QuestionAnalysisCharts />\n        </div>\n\n        {/* Daily Question Analysis - Single column */}\n        <div className=\"grid grid-cols-1 gap-6 mb-8\">\n          {/* This will be moved from QuestionAnalysisCharts component */}\n        </div>\n\n        {/* Subject Success Rates and Study Heatmap - Side by side at bottom */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n          <div className=\"bg-gradient-to-br from-card via-card to-card/80 rounded-xl border border-border shadow-lg p-6 transition-all duration-300 hover:shadow-xl\">\n            <h3 className=\"text-xl font-semibold text-foreground mb-6 flex items-center\">\n              <Award className=\"h-6 w-6 mr-3 text-amber-500\" />\n              📊 Ders Başarı Oranları\n            </h3>\n            <div className=\"text-center py-8 text-muted-foreground\">\n              <Award className=\"h-12 w-12 mx-auto mb-3 opacity-40\" />\n              <p className=\"text-sm\">Henüz yeterli veri yok</p>\n            </div>\n          </div>\n          \n          <div className=\"bg-gradient-to-br from-card via-card to-card/80 rounded-xl border border-border shadow-lg p-6 transition-all duration-300 hover:shadow-xl\">\n            <h3 className=\"text-xl font-semibold text-foreground mb-6 flex items-center\">\n              <CalendarDays className=\"h-6 w-6 mr-3 text-green-500\" />\n              🔥 Çalışma Heatmap\n            </h3>\n            <div className=\"grid grid-cols-10 gap-1\">\n              {heatmapData.slice(-70).map((day, index) => (\n                <div\n                  key={index}\n                  className={`w-3 h-3 rounded-sm transition-all hover:scale-110 cursor-pointer ${\n                    day.intensity === 0 ? 'bg-muted/30' :\n                    day.intensity < 0.25 ? 'bg-green-200 dark:bg-green-900/40' :\n                    day.intensity < 0.5 ? 'bg-green-300 dark:bg-green-800/60' :\n                    day.intensity < 0.75 ? 'bg-green-500 dark:bg-green-700/80' :\n                    'bg-green-600 dark:bg-green-600'\n                  }`}\n                  title={`${day.date}: ${day.count} görev`}\n                />\n              ))}\n            </div>\n            <div className=\"flex items-center justify-between mt-4 text-sm text-muted-foreground\">\n              <span>Az Aktif</span>\n              <span>Çok Aktif</span>\n            </div>\n          </div>\n        </div>\n\n        {/* Latest Activities and 90-Day Activities - Side by side */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n          <div className=\"bg-gradient-to-br from-card via-card to-card/80 rounded-xl border border-border shadow-lg p-6 transition-all duration-300 hover:shadow-xl\">\n            <h3 className=\"text-xl font-semibold text-foreground mb-6 flex items-center\">\n              <Clock className=\"h-6 w-6 mr-3 text-blue-500\" />\n              🕒 Son Aktiviteler\n            </h3>\n            {recentActivities.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                <Clock className=\"h-12 w-12 mx-auto mb-3 opacity-40\" />\n                <p className=\"text-sm\">Henüz aktivite yok</p>\n              </div>\n            ) : (\n              <div className=\"space-y-3 max-h-64 overflow-y-auto\">\n                {recentActivities.slice(0, 8).map((activity, index) => {\n                  const IconComponent = activity.icon;\n                  return (\n                    <div key={index} className=\"flex items-center gap-3 p-3 hover:bg-muted/10 rounded-lg transition-all duration-200 hover:scale-[1.02]\">\n                      <div className=\"w-10 h-10 rounded-full bg-gradient-to-r from-primary/20 to-secondary/20 flex items-center justify-center\">\n                        <IconComponent className=\"h-5 w-5 text-primary\" />\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"text-sm font-medium text-foreground truncate\">{activity.title}</div>\n                        <div className=\"text-xs text-muted-foreground\">\n                          {new Date(activity.date).toLocaleDateString('tr-TR')}\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            )}\n          </div>\n\n          <div className=\"bg-gradient-to-br from-card via-card to-card/80 rounded-xl border border-border shadow-lg p-6 transition-all duration-300 hover:shadow-xl\">\n            <h3 className=\"text-xl font-semibold text-foreground mb-6 flex items-center\">\n              <Zap className=\"h-6 w-6 mr-3 text-purple-500\" />\n              📈 Aktivitelerim (90 Gün)\n            </h3>\n            <div className=\"text-center py-8 text-muted-foreground\">\n              <Zap className=\"h-12 w-12 mx-auto mb-3 opacity-40\" />\n              <p className=\"text-sm\">90 günlük aktivite özeti</p>\n              <p className=\"text-xs mt-2\">Veri toplama devam ediyor...</p>\n            </div>\n          </div>\n        </div>\n      </main>\n\n      {/* Question Dialog */}\n      <Dialog open={showQuestionDialog} onOpenChange={setShowQuestionDialog}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>\n              {editingQuestionLog ? 'Soru Kaydını Düzenle' : 'Yeni Soru Kaydı'}\n            </DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">Sınav Türü</label>\n                <Select value={newQuestion.exam_type} onValueChange={(value) => setNewQuestion({...newQuestion, exam_type: value as \"TYT\" | \"AYT\"})}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"TYT\">TYT</SelectItem>\n                    <SelectItem value=\"AYT\">AYT</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">Ders</label>\n                <Select value={newQuestion.subject} onValueChange={(value) => setNewQuestion({...newQuestion, subject: value})}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {getSubjectOptions(newQuestion.exam_type).map(subject => (\n                      <SelectItem key={subject} value={subject}>{subject}</SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-3 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">Doğru</label>\n                <Input\n                  type=\"number\"\n                  value={newQuestion.correct_count}\n                  onChange={(e) => setNewQuestion({...newQuestion, correct_count: e.target.value})}\n                  placeholder=\"0\"\n                  min=\"0\"\n                />\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">Yanlış</label>\n                <Input\n                  type=\"number\"\n                  value={newQuestion.wrong_count}\n                  onChange={(e) => setNewQuestion({...newQuestion, wrong_count: e.target.value})}\n                  placeholder=\"0\"\n                  min=\"0\"\n                />\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">Boş</label>\n                <Input\n                  type=\"number\"\n                  value={newQuestion.blank_count}\n                  onChange={(e) => setNewQuestion({...newQuestion, blank_count: e.target.value})}\n                  placeholder=\"0\"\n                  min=\"0\"\n                />\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">Tarih</label>\n                <Input\n                  type=\"date\"\n                  value={newQuestion.study_date}\n                  onChange={(e) => setNewQuestion({...newQuestion, study_date: e.target.value})}\n                />\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">Süre (dk)</label>\n                <Input\n                  type=\"number\"\n                  value={newQuestion.time_spent_minutes}\n                  onChange={(e) => setNewQuestion({...newQuestion, time_spent_minutes: e.target.value})}\n                  placeholder=\"45\"\n                  min=\"0\"\n                />\n              </div>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium mb-1\">Yanlış Konular</label>\n              <div className=\"space-y-2\">\n                <Input\n                  value={wrongTopicInput}\n                  onChange={(e) => setWrongTopicInput(e.target.value)}\n                  placeholder=\"Konu adı yazın ve Enter'a basın\"\n                  onKeyPress={(e) => {\n                    if (e.key === 'Enter' && wrongTopicInput.trim()) {\n                      setNewQuestion({\n                        ...newQuestion, \n                        wrong_topics: [...newQuestion.wrong_topics, wrongTopicInput.trim()]\n                      });\n                      setWrongTopicInput(\"\");\n                    }\n                  }}\n                />\n                <div className=\"flex flex-wrap gap-1\">\n                  {newQuestion.wrong_topics.map((topic, index) => (\n                    <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                      {topic}\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"h-4 w-4 p-0 ml-1\"\n                        onClick={() => {\n                          setNewQuestion({\n                            ...newQuestion,\n                            wrong_topics: newQuestion.wrong_topics.filter((_, i) => i !== index)\n                          });\n                        }}\n                      >\n                        <X className=\"h-3 w-3\" />\n                      </Button>\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n            </div>\n\n            <div className=\"flex gap-2\">\n              <Button\n                onClick={() => {\n                  if (editingQuestionLog) {\n                    updateQuestionLogMutation.mutate({\n                      id: editingQuestionLog.id,\n                      data: {\n                        exam_type: newQuestion.exam_type,\n                        subject: newQuestion.subject,\n                        correct_count: newQuestion.correct_count,\n                        wrong_count: newQuestion.wrong_count,\n                        blank_count: newQuestion.blank_count || \"0\",\n                        study_date: newQuestion.study_date,\n                        wrong_topics: newQuestion.wrong_topics,\n                        time_spent_minutes: parseInt(newQuestion.time_spent_minutes) || null\n                      }\n                    });\n                  } else {\n                    createQuestionLogMutation.mutate({\n                      exam_type: newQuestion.exam_type,\n                      subject: newQuestion.subject,\n                      correct_count: newQuestion.correct_count,\n                      wrong_count: newQuestion.wrong_count,\n                      blank_count: newQuestion.blank_count || \"0\",\n                      study_date: newQuestion.study_date,\n                      wrong_topics: newQuestion.wrong_topics,\n                      time_spent_minutes: parseInt(newQuestion.time_spent_minutes) || null\n                    });\n                  }\n                }}\n                disabled={!newQuestion.correct_count || !newQuestion.wrong_count || createQuestionLogMutation.isPending}\n                className=\"flex-1\"\n              >\n                {createQuestionLogMutation.isPending ? 'Kaydediliyor...' : (editingQuestionLog ? 'Güncelle' : 'Kaydet')}\n              </Button>\n              <Button \n                variant=\"outline\" \n                onClick={() => {\n                  setShowQuestionDialog(false);\n                  setEditingQuestionLog(null);\n                  setNewQuestion({ \n                    exam_type: \"TYT\", \n                    subject: \"Türkçe\", \n                    correct_count: \"\", \n                    wrong_count: \"\", \n                    blank_count: \"\", \n                    study_date: new Date().toISOString().split('T')[0],\n                    wrong_topics: [],\n                    time_spent_minutes: \"\"\n                  });\n                  setWrongTopicInput(\"\");\n                }}\n              >\n                İptal\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Exam Result Dialog */}\n      <Dialog open={showExamDialog} onOpenChange={setShowExamDialog}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Yeni Deneme Sonucu</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">Deneme Adı</label>\n                <Input\n                  value={newExamResult.exam_name}\n                  onChange={(e) => setNewExamResult({...newExamResult, exam_name: e.target.value})}\n                  placeholder=\"YKS Deneme\"\n                />\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">Tarih</label>\n                <Input\n                  type=\"date\"\n                  value={newExamResult.exam_date}\n                  onChange={(e) => setNewExamResult({...newExamResult, exam_date: e.target.value})}\n                />\n              </div>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium mb-1\">Alan</label>\n              <Select value={newExamResult.exam_type} onValueChange={(value: \"TYT\" | \"Sayısal(AYT)\") => setNewExamResult({...newExamResult, exam_type: value})}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"TYT\">TYT</SelectItem>\n                  <SelectItem value=\"AYT\">Sayısal(AYT)</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* TYT Subjects */}\n            {newExamResult.exam_type === \"TYT\" && (\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold\">TYT Dersleri</h3>\n                \n                {/* Türkçe */}\n                <div className=\"border rounded-lg p-4 space-y-3\">\n                  <h4 className=\"font-medium text-green-600\">Türkçe</h4>\n                  <div className=\"grid grid-cols-3 gap-2\">\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Doğru</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"40\"\n                        value={newExamResult.subjects.turkce.correct}\n                        onChange={(e) => setNewExamResult({\n                          ...newExamResult,\n                          subjects: {\n                            ...newExamResult.subjects,\n                            turkce: { ...newExamResult.subjects.turkce, correct: e.target.value }\n                          }\n                        })}\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Yanlış</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"40\"\n                        value={newExamResult.subjects.turkce.wrong}\n                        onChange={(e) => setNewExamResult({\n                          ...newExamResult,\n                          subjects: {\n                            ...newExamResult.subjects,\n                            turkce: { ...newExamResult.subjects.turkce, wrong: e.target.value }\n                          }\n                        })}\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Boş</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"40\"\n                        value={newExamResult.subjects.turkce.blank}\n                        onChange={(e) => setNewExamResult({\n                          ...newExamResult,\n                          subjects: {\n                            ...newExamResult.subjects,\n                            turkce: { ...newExamResult.subjects.turkce, blank: e.target.value }\n                          }\n                        })}\n                      />\n                    </div>\n                  </div>\n                  {parseInt(newExamResult.subjects.turkce.wrong) > 0 && (\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1 text-red-600\">Eksik konuları yazınız (virgülle ayırın)</label>\n                      <Input\n                        value={currentWrongTopics.turkce || \"\"}\n                        onChange={(e) => {\n                          setCurrentWrongTopics({...currentWrongTopics, turkce: e.target.value});\n                          const topics = e.target.value.split(',').map(t => t.trim()).filter(t => t.length > 0);\n                          setNewExamResult({\n                            ...newExamResult,\n                            subjects: {\n                              ...newExamResult.subjects,\n                              turkce: { ...newExamResult.subjects.turkce, wrong_topics: topics }\n                            }\n                          });\n                        }}\n                        placeholder=\"konu1, konu2, konu3\"\n                      />\n                    </div>\n                  )}\n                </div>\n\n                {/* Matematik */}\n                <div className=\"border rounded-lg p-4 space-y-3\">\n                  <h4 className=\"font-medium text-blue-600\">Matematik</h4>\n                  <div className=\"grid grid-cols-3 gap-2\">\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Doğru</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"40\"\n                        value={newExamResult.subjects.matematik.correct}\n                        onChange={(e) => setNewExamResult({\n                          ...newExamResult,\n                          subjects: {\n                            ...newExamResult.subjects,\n                            matematik: { ...newExamResult.subjects.matematik, correct: e.target.value }\n                          }\n                        })}\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Yanlış</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"40\"\n                        value={newExamResult.subjects.matematik.wrong}\n                        onChange={(e) => setNewExamResult({\n                          ...newExamResult,\n                          subjects: {\n                            ...newExamResult.subjects,\n                            matematik: { ...newExamResult.subjects.matematik, wrong: e.target.value }\n                          }\n                        })}\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Boş</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"40\"\n                        value={newExamResult.subjects.matematik.blank}\n                        onChange={(e) => setNewExamResult({\n                          ...newExamResult,\n                          subjects: {\n                            ...newExamResult.subjects,\n                            matematik: { ...newExamResult.subjects.matematik, blank: e.target.value }\n                          }\n                        })}\n                      />\n                    </div>\n                  </div>\n                  {parseInt(newExamResult.subjects.matematik.wrong) > 0 && (\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1 text-red-600\">Eksik konuları yazınız (virgülle ayırın)</label>\n                      <Input\n                        value={currentWrongTopics.matematik || \"\"}\n                        onChange={(e) => {\n                          setCurrentWrongTopics({...currentWrongTopics, matematik: e.target.value});\n                          const topics = e.target.value.split(',').map(t => t.trim()).filter(t => t.length > 0);\n                          setNewExamResult({\n                            ...newExamResult,\n                            subjects: {\n                              ...newExamResult.subjects,\n                              matematik: { ...newExamResult.subjects.matematik, wrong_topics: topics }\n                            }\n                          });\n                        }}\n                        placeholder=\"konu1, konu2, konu3\"\n                      />\n                    </div>\n                  )}\n                </div>\n\n                {/* Sosyal */}\n                <div className=\"border rounded-lg p-4 space-y-3\">\n                  <h4 className=\"font-medium text-purple-600\">Sosyal Bilimler</h4>\n                  <div className=\"grid grid-cols-3 gap-2\">\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Doğru</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"20\"\n                        value={newExamResult.subjects.sosyal.correct}\n                        onChange={(e) => setNewExamResult({\n                          ...newExamResult,\n                          subjects: {\n                            ...newExamResult.subjects,\n                            sosyal: { ...newExamResult.subjects.sosyal, correct: e.target.value }\n                          }\n                        })}\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Yanlış</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"20\"\n                        value={newExamResult.subjects.sosyal.wrong}\n                        onChange={(e) => setNewExamResult({\n                          ...newExamResult,\n                          subjects: {\n                            ...newExamResult.subjects,\n                            sosyal: { ...newExamResult.subjects.sosyal, wrong: e.target.value }\n                          }\n                        })}\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Boş</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"20\"\n                        value={newExamResult.subjects.sosyal.blank}\n                        onChange={(e) => setNewExamResult({\n                          ...newExamResult,\n                          subjects: {\n                            ...newExamResult.subjects,\n                            sosyal: { ...newExamResult.subjects.sosyal, blank: e.target.value }\n                          }\n                        })}\n                      />\n                    </div>\n                  </div>\n                  {parseInt(newExamResult.subjects.sosyal.wrong) > 0 && (\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1 text-red-600\">Eksik konuları yazınız (virgülle ayırın)</label>\n                      <Input\n                        value={currentWrongTopics.sosyal || \"\"}\n                        onChange={(e) => {\n                          setCurrentWrongTopics({...currentWrongTopics, sosyal: e.target.value});\n                          const topics = e.target.value.split(',').map(t => t.trim()).filter(t => t.length > 0);\n                          setNewExamResult({\n                            ...newExamResult,\n                            subjects: {\n                              ...newExamResult.subjects,\n                              sosyal: { ...newExamResult.subjects.sosyal, wrong_topics: topics }\n                            }\n                          });\n                        }}\n                        placeholder=\"konu1, konu2, konu3\"\n                      />\n                    </div>\n                  )}\n                </div>\n\n                {/* Fen */}\n                <div className=\"border rounded-lg p-4 space-y-3\">\n                  <h4 className=\"font-medium text-orange-600\">Fen Bilimleri</h4>\n                  <div className=\"grid grid-cols-3 gap-2\">\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Doğru</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"20\"\n                        value={newExamResult.subjects.fen.correct}\n                        onChange={(e) => setNewExamResult({\n                          ...newExamResult,\n                          subjects: {\n                            ...newExamResult.subjects,\n                            fen: { ...newExamResult.subjects.fen, correct: e.target.value }\n                          }\n                        })}\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Yanlış</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"20\"\n                        value={newExamResult.subjects.fen.wrong}\n                        onChange={(e) => setNewExamResult({\n                          ...newExamResult,\n                          subjects: {\n                            ...newExamResult.subjects,\n                            fen: { ...newExamResult.subjects.fen, wrong: e.target.value }\n                          }\n                        })}\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Boş</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"20\"\n                        value={newExamResult.subjects.fen.blank}\n                        onChange={(e) => setNewExamResult({\n                          ...newExamResult,\n                          subjects: {\n                            ...newExamResult.subjects,\n                            fen: { ...newExamResult.subjects.fen, blank: e.target.value }\n                          }\n                        })}\n                      />\n                    </div>\n                  </div>\n                  {parseInt(newExamResult.subjects.fen.wrong) > 0 && (\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1 text-red-600\">Eksik konuları yazınız (virgülle ayırın)</label>\n                      <Input\n                        value={currentWrongTopics.fen || \"\"}\n                        onChange={(e) => {\n                          setCurrentWrongTopics({...currentWrongTopics, fen: e.target.value});\n                          const topics = e.target.value.split(',').map(t => t.trim()).filter(t => t.length > 0);\n                          setNewExamResult({\n                            ...newExamResult,\n                            subjects: {\n                              ...newExamResult.subjects,\n                              fen: { ...newExamResult.subjects.fen, wrong_topics: topics }\n                            }\n                          });\n                        }}\n                        placeholder=\"konu1, konu2, konu3\"\n                      />\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n\n            {/* AYT Sayısal Subjects */}\n            {newExamResult.exam_type === \"AYT\" && (\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold\">AYT Sayısal Dersleri</h3>\n                \n                {/* Matematik */}\n                <div className=\"border rounded-lg p-4 space-y-3\">\n                  <h4 className=\"font-medium text-blue-600\">Matematik</h4>\n                  <div className=\"grid grid-cols-3 gap-2\">\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Doğru</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"40\"\n                        value={newExamResult.subjects.matematik.correct}\n                        onChange={(e) => setNewExamResult({\n                          ...newExamResult,\n                          subjects: {\n                            ...newExamResult.subjects,\n                            matematik: { ...newExamResult.subjects.matematik, correct: e.target.value }\n                          }\n                        })}\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Yanlış</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"40\"\n                        value={newExamResult.subjects.matematik.wrong}\n                        onChange={(e) => setNewExamResult({\n                          ...newExamResult,\n                          subjects: {\n                            ...newExamResult.subjects,\n                            matematik: { ...newExamResult.subjects.matematik, wrong: e.target.value }\n                          }\n                        })}\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Boş</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"40\"\n                        value={newExamResult.subjects.matematik.blank}\n                        onChange={(e) => setNewExamResult({\n                          ...newExamResult,\n                          subjects: {\n                            ...newExamResult.subjects,\n                            matematik: { ...newExamResult.subjects.matematik, blank: e.target.value }\n                          }\n                        })}\n                      />\n                    </div>\n                  </div>\n                  {parseInt(newExamResult.subjects.matematik.wrong) > 0 && (\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1 text-red-600\">Eksik konuları yazınız (virgülle ayırın)</label>\n                      <Input\n                        value={currentWrongTopics.matematik || \"\"}\n                        onChange={(e) => {\n                          setCurrentWrongTopics({...currentWrongTopics, matematik: e.target.value});\n                          const topics = e.target.value.split(',').map(t => t.trim()).filter(t => t.length > 0);\n                          setNewExamResult({\n                            ...newExamResult,\n                            subjects: {\n                              ...newExamResult.subjects,\n                              matematik: { ...newExamResult.subjects.matematik, wrong_topics: topics }\n                            }\n                          });\n                        }}\n                        placeholder=\"konu1, konu2, konu3\"\n                      />\n                    </div>\n                  )}\n                </div>\n\n                {/* Fizik */}\n                <div className=\"border rounded-lg p-4 space-y-3\">\n                  <h4 className=\"font-medium text-red-600\">Fizik</h4>\n                  <div className=\"grid grid-cols-3 gap-2\">\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Doğru</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"14\"\n                        value={newExamResult.subjects.fizik.correct}\n                        onChange={(e) => setNewExamResult({\n                          ...newExamResult,\n                          subjects: {\n                            ...newExamResult.subjects,\n                            fizik: { ...newExamResult.subjects.fizik, correct: e.target.value }\n                          }\n                        })}\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Yanlış</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"14\"\n                        value={newExamResult.subjects.fizik.wrong}\n                        onChange={(e) => setNewExamResult({\n                          ...newExamResult,\n                          subjects: {\n                            ...newExamResult.subjects,\n                            fizik: { ...newExamResult.subjects.fizik, wrong: e.target.value }\n                          }\n                        })}\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Boş</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"14\"\n                        value={newExamResult.subjects.fizik.blank}\n                        onChange={(e) => setNewExamResult({\n                          ...newExamResult,\n                          subjects: {\n                            ...newExamResult.subjects,\n                            fizik: { ...newExamResult.subjects.fizik, blank: e.target.value }\n                          }\n                        })}\n                      />\n                    </div>\n                  </div>\n                  {parseInt(newExamResult.subjects.fizik.wrong) > 0 && (\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1 text-red-600\">Eksik konuları yazınız (virgülle ayırın)</label>\n                      <Input\n                        value={currentWrongTopics.fizik || \"\"}\n                        onChange={(e) => {\n                          setCurrentWrongTopics({...currentWrongTopics, fizik: e.target.value});\n                          const topics = e.target.value.split(',').map(t => t.trim()).filter(t => t.length > 0);\n                          setNewExamResult({\n                            ...newExamResult,\n                            subjects: {\n                              ...newExamResult.subjects,\n                              fizik: { ...newExamResult.subjects.fizik, wrong_topics: topics }\n                            }\n                          });\n                        }}\n                        placeholder=\"konu1, konu2, konu3\"\n                      />\n                    </div>\n                  )}\n                </div>\n\n                {/* Kimya */}\n                <div className=\"border rounded-lg p-4 space-y-3\">\n                  <h4 className=\"font-medium text-green-600\">Kimya</h4>\n                  <div className=\"grid grid-cols-3 gap-2\">\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Doğru</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"13\"\n                        value={newExamResult.subjects.kimya.correct}\n                        onChange={(e) => setNewExamResult({\n                          ...newExamResult,\n                          subjects: {\n                            ...newExamResult.subjects,\n                            kimya: { ...newExamResult.subjects.kimya, correct: e.target.value }\n                          }\n                        })}\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Yanlış</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"13\"\n                        value={newExamResult.subjects.kimya.wrong}\n                        onChange={(e) => setNewExamResult({\n                          ...newExamResult,\n                          subjects: {\n                            ...newExamResult.subjects,\n                            kimya: { ...newExamResult.subjects.kimya, wrong: e.target.value }\n                          }\n                        })}\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Boş</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"13\"\n                        value={newExamResult.subjects.kimya.blank}\n                        onChange={(e) => setNewExamResult({\n                          ...newExamResult,\n                          subjects: {\n                            ...newExamResult.subjects,\n                            kimya: { ...newExamResult.subjects.kimya, blank: e.target.value }\n                          }\n                        })}\n                      />\n                    </div>\n                  </div>\n                  {parseInt(newExamResult.subjects.kimya.wrong) > 0 && (\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1 text-red-600\">Eksik konuları yazınız (virgülle ayırın)</label>\n                      <Input\n                        value={currentWrongTopics.kimya || \"\"}\n                        onChange={(e) => {\n                          setCurrentWrongTopics({...currentWrongTopics, kimya: e.target.value});\n                          const topics = e.target.value.split(',').map(t => t.trim()).filter(t => t.length > 0);\n                          setNewExamResult({\n                            ...newExamResult,\n                            subjects: {\n                              ...newExamResult.subjects,\n                              kimya: { ...newExamResult.subjects.kimya, wrong_topics: topics }\n                            }\n                          });\n                        }}\n                        placeholder=\"konu1, konu2, konu3\"\n                      />\n                    </div>\n                  )}\n                </div>\n\n                {/* Biyoloji */}\n                <div className=\"border rounded-lg p-4 space-y-3\">\n                  <h4 className=\"font-medium text-teal-600\">Biyoloji</h4>\n                  <div className=\"grid grid-cols-3 gap-2\">\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Doğru</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"13\"\n                        value={newExamResult.subjects.biyoloji.correct}\n                        onChange={(e) => setNewExamResult({\n                          ...newExamResult,\n                          subjects: {\n                            ...newExamResult.subjects,\n                            biyoloji: { ...newExamResult.subjects.biyoloji, correct: e.target.value }\n                          }\n                        })}\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Yanlış</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"13\"\n                        value={newExamResult.subjects.biyoloji.wrong}\n                        onChange={(e) => setNewExamResult({\n                          ...newExamResult,\n                          subjects: {\n                            ...newExamResult.subjects,\n                            biyoloji: { ...newExamResult.subjects.biyoloji, wrong: e.target.value }\n                          }\n                        })}\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Boş</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"13\"\n                        value={newExamResult.subjects.biyoloji.blank}\n                        onChange={(e) => setNewExamResult({\n                          ...newExamResult,\n                          subjects: {\n                            ...newExamResult.subjects,\n                            biyoloji: { ...newExamResult.subjects.biyoloji, blank: e.target.value }\n                          }\n                        })}\n                      />\n                    </div>\n                  </div>\n                  {parseInt(newExamResult.subjects.biyoloji.wrong) > 0 && (\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1 text-red-600\">Eksik konuları yazınız (virgülle ayırın)</label>\n                      <Input\n                        value={currentWrongTopics.biyoloji || \"\"}\n                        onChange={(e) => {\n                          setCurrentWrongTopics({...currentWrongTopics, biyoloji: e.target.value});\n                          const topics = e.target.value.split(',').map(t => t.trim()).filter(t => t.length > 0);\n                          setNewExamResult({\n                            ...newExamResult,\n                            subjects: {\n                              ...newExamResult.subjects,\n                              biyoloji: { ...newExamResult.subjects.biyoloji, wrong_topics: topics }\n                            }\n                          });\n                        }}\n                        placeholder=\"konu1, konu2, konu3\"\n                      />\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n\n            <div className=\"flex gap-2\">\n              <Button\n                onClick={() => {\n                  // Calculate total net based on subjects\n                  let totalNet = 0;\n                  Object.values(newExamResult.subjects).forEach(subject => {\n                    const correct = parseInt(subject.correct) || 0;\n                    const wrong = parseInt(subject.wrong) || 0;\n                    totalNet += correct - (wrong * 0.25);\n                  });\n                  \n                  createExamResultMutation.mutate({\n                    exam_name: newExamResult.exam_name,\n                    exam_date: newExamResult.exam_date,\n                    tyt_net: newExamResult.exam_type === \"TYT\" ? totalNet.toString() : \"0\",\n                    ayt_net: newExamResult.exam_type === \"AYT\" ? totalNet.toString() : \"0\",\n                    subjects_data: JSON.stringify(newExamResult.subjects)\n                  });\n                }}\n                disabled={!newExamResult.exam_name || createExamResultMutation.isPending}\n                className=\"flex-1\"\n              >\n                {createExamResultMutation.isPending ? 'Kaydediliyor...' : 'Kaydet'}\n              </Button>\n              <Button \n                variant=\"outline\" \n                onClick={() => {\n                  setShowExamDialog(false);\n                  setNewExamResult({ \n                    exam_name: \"\", \n                    exam_date: new Date().toISOString().split('T')[0], \n                    exam_type: \"TYT\" as \"TYT\" | \"AYT\",\n                    subjects: {\n                      turkce: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n                      matematik: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n                      sosyal: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n                      fen: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n                      fizik: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n                      kimya: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n                      biyoloji: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] }\n                    }\n                  });\n                  setCurrentWrongTopics({});\n                }}\n              >\n                İptal\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":69997},"client/src/pages/home.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Header } from \"@/components/header\";\nimport { TasksSection } from \"@/components/tasks-section\";\nimport { ProfileModal } from \"@/components/profile-modal\";\nimport { AddTaskModal } from \"@/components/add-task-modal\";\n\nexport default function Home() {\n  const [addTaskModalOpen, setAddTaskModalOpen] = useState(false);\n  const [location] = useLocation();\n\n  return (\n    <div className=\"min-h-screen bg-background transition-colors duration-300\">\n      <Header />\n      \n      {/* Centered Navigation */}\n      <nav className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n        <div className=\"flex items-center justify-center space-x-6\">\n          <Link href=\"/\">\n            <button \n              className={`px-8 py-3 rounded-xl font-semibold text-lg transition-all duration-200 ${\n                location === '/' \n                  ? 'bg-primary text-primary-foreground shadow-lg' \n                  : 'bg-secondary text-secondary-foreground hover:bg-accent hover:scale-105'\n              }`}\n              data-testid=\"link-homepage\"\n            >\n              Anasayfa\n            </button>\n          </Link>\n          <Link href=\"/tasks\">\n            <button \n              className={`px-8 py-3 rounded-xl font-semibold text-lg transition-all duration-200 ${\n                location === '/tasks' \n                  ? 'bg-primary text-primary-foreground shadow-lg' \n                  : 'bg-secondary text-secondary-foreground hover:bg-accent hover:scale-105'\n              }`}\n              data-testid=\"link-todos\"\n            >\n              Yapılacaklar\n            </button>\n          </Link>\n          <Link href=\"/dashboard\">\n            <button \n              className={`px-8 py-3 rounded-xl font-semibold text-lg transition-all duration-200 ${\n                location === '/dashboard' \n                  ? 'bg-primary text-primary-foreground shadow-lg' \n                  : 'bg-secondary text-secondary-foreground hover:bg-accent hover:scale-105'\n              }`}\n              data-testid=\"link-dashboard\"\n            >\n              Raporlarım\n            </button>\n          </Link>\n          <Link href=\"/net-calculator\">\n            <button \n              className={`px-8 py-3 rounded-xl font-semibold text-lg transition-all duration-200 ${\n                location === '/net-calculator' \n                  ? 'bg-primary text-primary-foreground shadow-lg' \n                  : 'bg-secondary text-secondary-foreground hover:bg-accent hover:scale-105'\n              }`}\n            >\n              Net Hesapla\n            </button>\n          </Link>\n          <Link href=\"/timer\">\n            <button \n              className={`px-8 py-3 rounded-xl font-semibold text-lg transition-all duration-200 ${\n                location === '/timer' \n                  ? 'bg-primary text-primary-foreground shadow-lg' \n                  : 'bg-secondary text-secondary-foreground hover:bg-accent hover:scale-105'\n              }`}\n              data-testid=\"link-timer\"\n            >\n              Sayaç\n            </button>\n          </Link>\n        </div>\n      </nav>\n      \n      <main className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n        {/* Tasks Section - No sidebar anymore */}\n        <TasksSection onAddTask={() => setAddTaskModalOpen(true)} />\n      </main>\n\n      {/* Modals */}\n      <AddTaskModal \n        open={addTaskModalOpen} \n        onOpenChange={setAddTaskModalOpen} \n      />\n    </div>\n  );\n}\n","size_bytes":3534},"client/src/pages/homepage.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Header } from \"@/components/header\";\nimport { EnhancedWeatherWidget } from \"@/components/enhanced-weather-widget\";\nimport { CountdownWidget } from \"@/components/countdown-widget\";\nimport { TodaysTasksWidget } from \"@/components/todays-tasks-widget\";\nimport { FlashcardsWidget } from \"@/components/flashcards-widget\";\nimport { Calendar, TrendingUp } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Task } from \"@shared/schema\";\n\nexport default function Homepage() {\n  const [selectedDate, setSelectedDate] = useState<string>(\"\");\n  const [location] = useLocation();\n\n  const { data: calendarData } = useQuery<{\n    date: string;\n    dayNumber: number;\n    daysRemaining: number;\n    tasks: Task[];\n    tasksCount: number;\n  }>({\n    queryKey: [\"/api/calendar\", selectedDate],\n    queryFn: async () => {\n      if (!selectedDate) return null;\n      const response = await fetch(`/api/calendar/${selectedDate}`);\n      if (!response.ok) throw new Error('Failed to fetch calendar data');\n      return response.json();\n    },\n    enabled: !!selectedDate,\n  });\n\n  // Generate calendar for current month\n  const currentDate = new Date();\n  const year = currentDate.getFullYear();\n  const month = currentDate.getMonth();\n  const firstDay = new Date(year, month, 1);\n  const today = currentDate.getDate();\n\n  // Start from Monday (fix week alignment)\n  const startOffset = (firstDay.getDay() + 6) % 7;\n  const startDate = new Date(year, month, 1 - startOffset);\n  \n  const calendarDays = [];\n  for (let i = 0; i < 42; i++) {\n    const date = new Date(startDate);\n    date.setDate(startDate.getDate() + i);\n    calendarDays.push(date);\n  }\n\n  const handleDateClick = (date: Date) => {\n    // Fix: Use the actual date without timezone issues\n    const year = date.getFullYear();\n    const month = (date.getMonth() + 1).toString().padStart(2, '0');\n    const day = date.getDate().toString().padStart(2, '0');\n    const dateStr = `${year}-${month}-${day}`;\n    setSelectedDate(dateStr);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background transition-colors duration-300\">\n      <Header />\n      \n      {/* Centered Navigation */}\n      <nav className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n        <div className=\"flex items-center justify-center space-x-6\">\n          <Link href=\"/\">\n            <button \n              className={`px-8 py-3 rounded-xl font-semibold text-lg transition-all duration-200 ${\n                location === '/' \n                  ? 'bg-primary text-primary-foreground shadow-lg' \n                  : 'bg-secondary text-secondary-foreground hover:bg-accent hover:scale-105'\n              }`}\n              data-testid=\"link-homepage\"\n            >\n              Anasayfa\n            </button>\n          </Link>\n          <Link href=\"/tasks\">\n            <button \n              className={`px-8 py-3 rounded-xl font-semibold text-lg transition-all duration-200 ${\n                location === '/tasks' \n                  ? 'bg-primary text-primary-foreground shadow-lg' \n                  : 'bg-secondary text-secondary-foreground hover:bg-accent hover:scale-105'\n              }`}\n              data-testid=\"link-todos\"\n            >\n              Yapılacaklar\n            </button>\n          </Link>\n          <Link href=\"/dashboard\">\n            <button \n              className={`px-8 py-3 rounded-xl font-semibold text-lg transition-all duration-200 ${\n                location === '/dashboard' \n                  ? 'bg-primary text-primary-foreground shadow-lg' \n                  : 'bg-secondary text-secondary-foreground hover:bg-accent hover:scale-105'\n              }`}\n              data-testid=\"link-dashboard\"\n            >\n              Raporlarım\n            </button>\n          </Link>\n          <Link href=\"/net-calculator\">\n            <button \n              className={`px-8 py-3 rounded-xl font-semibold text-lg transition-all duration-200 ${\n                location === '/net-calculator' \n                  ? 'bg-primary text-primary-foreground shadow-lg' \n                  : 'bg-secondary text-secondary-foreground hover:bg-accent hover:scale-105'\n              }`}\n            >\n              Net Hesapla\n            </button>\n          </Link>\n          <Link href=\"/timer\">\n            <button \n              className={`px-8 py-3 rounded-xl font-semibold text-lg transition-all duration-200 ${\n                location === '/timer' \n                  ? 'bg-primary text-primary-foreground shadow-lg' \n                  : 'bg-secondary text-secondary-foreground hover:bg-accent hover:scale-105'\n              }`}\n              data-testid=\"link-timer\"\n            >\n              Sayaç\n            </button>\n          </Link>\n        </div>\n      </nav>\n\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n        {/* Dashboard Header */}\n        <div className=\"mb-6\">\n          <h1 className=\"text-3xl font-bold text-foreground mb-2 text-center\">Hoşgeldiniz Berat</h1>\n        </div>\n\n        {/* Top Row - Calendar and Today's Tasks Side-by-Side */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-5 gap-6 mb-6 items-stretch\">\n          {/* Modern Calendar Widget - Takes 3 columns (slightly bigger) */}\n          <div className=\"lg:col-span-3 bg-gradient-to-br from-card to-card/80 rounded-2xl border border-border/50 p-4 shadow-lg backdrop-blur-sm transition-all duration-300 hover:shadow-xl\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h3 className=\"text-xl font-bold bg-gradient-to-r from-primary to-primary/80 bg-clip-text text-transparent flex items-center\">\n                <Calendar className=\"h-5 w-5 mr-3 text-primary\" />\n                Takvim\n              </h3>\n              <div className=\"text-sm font-medium text-muted-foreground px-3 py-1 bg-muted/50 rounded-full\">\n                {currentDate.toLocaleDateString(\"tr-TR\", { month: \"long\", year: \"numeric\" })}\n              </div>\n            </div>\n\n            {/* Modern Calendar Grid */}\n            <div className=\"space-y-2\">\n              {/* Week Headers */}\n              <div className=\"grid grid-cols-7 gap-2 mb-4\">\n                {['Pzt', 'Sal', 'Çar', 'Per', 'Cum', 'Cmt', 'Paz'].map((day, index) => (\n                  <div key={day} className=\"text-center text-xs font-semibold text-muted-foreground/70 py-2\">\n                    {day}\n                  </div>\n                ))}\n              </div>\n              \n              {/* Calendar Days */}\n              <div className=\"grid grid-cols-7 gap-2\">\n                {calendarDays.map((date, index) => {\n                  const isCurrentMonth = date.getMonth() === month;\n                  const isToday = date.getDate() === today && isCurrentMonth;\n                  const year = date.getFullYear();\n                  const month_num = (date.getMonth() + 1).toString().padStart(2, '0');\n                  const day = date.getDate().toString().padStart(2, '0');\n                  const dateStr = `${year}-${month_num}-${day}`;\n                  const isSelected = selectedDate === dateStr;\n                  \n                  return (\n                    <button\n                      key={index}\n                      onClick={() => handleDateClick(date)}\n                      className={`relative aspect-square flex items-center justify-center text-sm font-medium rounded-xl transition-all duration-200 transform hover:scale-105 ${\n                        isToday\n                          ? \"bg-gradient-to-br from-primary to-primary/80 text-primary-foreground shadow-lg shadow-primary/25 scale-105\"\n                          : isSelected\n                          ? \"bg-gradient-to-br from-accent to-accent/80 text-accent-foreground ring-2 ring-primary/50 shadow-md\"\n                          : isCurrentMonth\n                          ? \"hover:bg-gradient-to-br hover:from-secondary hover:to-secondary/80 cursor-pointer text-foreground hover:shadow-md border border-transparent hover:border-border/50\"\n                          : \"text-muted-foreground/30 cursor-pointer hover:text-muted-foreground/50\"\n                      }`}\n                      data-testid={`calendar-day-${date.getDate()}`}\n                    >\n                      {date.getDate()}\n                      {isToday && (\n                        <div className=\"absolute -top-1 -right-1 w-2 h-2 bg-amber-400 rounded-full animate-pulse\"></div>\n                      )}\n                    </button>\n                  );\n                })}\n              </div>\n            </div>\n\n            {/* Modern Selected Date Info */}\n            {selectedDate && calendarData && (\n              <div className=\"mt-6 p-5 bg-gradient-to-r from-muted/50 to-muted/30 rounded-xl border border-border/30 backdrop-blur-sm\">\n                <div className=\"flex items-center justify-between mb-3\">\n                  <h4 className=\"font-bold text-lg text-foreground flex items-center\">\n                    <div className=\"w-3 h-3 bg-primary rounded-full mr-2 animate-pulse\"></div>\n                    {new Date(selectedDate + 'T12:00:00').getDate()}. Gün\n                  </h4>\n                  <span className=\"px-3 py-1 bg-primary/10 text-primary text-xs font-medium rounded-full\">\n                    {calendarData.daysRemaining > 0 \n                      ? `${calendarData.daysRemaining} gün sonra` \n                      : calendarData.daysRemaining === 0 \n                      ? \"Bugün\" \n                      : `${Math.abs(calendarData.daysRemaining)} gün önce`}\n                  </span>\n                </div>\n                <div className=\"flex items-center mb-3\">\n                  <TrendingUp className=\"h-4 w-4 mr-2 text-primary\" />\n                  <p className=\"text-sm font-medium text-foreground\">\n                    {calendarData.tasksCount} görev planlanmış\n                  </p>\n                </div>\n                {calendarData.tasks && calendarData.tasks.length > 0 && (\n                  <div className=\"space-y-2\">\n                    {calendarData.tasks.slice(0, 3).map((task: Task) => (\n                      <div key={task.id} className=\"flex items-center text-sm text-muted-foreground\">\n                        <div className=\"w-1.5 h-1.5 bg-primary/60 rounded-full mr-3\"></div>\n                        {task.title}\n                      </div>\n                    ))}\n                    {calendarData.tasks.length > 3 && (\n                      <div className=\"text-xs text-muted-foreground italic\">\n                        ve {calendarData.tasks.length - 3} görev daha...\n                      </div>\n                    )}\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n\n          {/* Today's Tasks and Flashcards Column - Takes 2 columns */}\n          <div className=\"lg:col-span-2 flex h-full flex-col gap-0\">\n            <div className=\"flex-grow min-h-0\">\n              <TodaysTasksWidget />\n            </div>\n            <div className=\"flex-shrink-0\">\n              <FlashcardsWidget />\n            </div>\n          </div>\n        </div>\n\n        {/* Middle Row - Weather Widget (Full Width) */}\n        <div className=\"mb-8\">\n          <EnhancedWeatherWidget />\n        </div>\n\n\n        {/* Countdown Section - Moved to Bottom */}\n        <div className=\"mb-8\">\n          <CountdownWidget className=\"p-5 md:p-6\" />\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":11526},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/net-calculator.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Header } from \"@/components/header\";\nimport { Calculator, TrendingUp, BookOpen, Brain, BarChart2, FlaskConical } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Separator } from \"@/components/ui/separator\";\n\ninterface TYTData {\n  Türkçe: { dogru: number; yanlis: number; };\n  sosyal: { dogru: number; yanlis: number; };\n  matematik: { dogru: number; yanlis: number; };\n  fenBilimleri: { dogru: number; yanlis: number; };\n}\n\ninterface AYTData {\n  matematik: { dogru: number; yanlis: number; };\n  fizik: { dogru: number; yanlis: number; };\n  kimya: { dogru: number; yanlis: number; };\n  biyoloji: { dogru: number; yanlis: number; };\n}\n\ninterface OBPData {\n  diplomaNotu: number;\n  gecenSeneYerlesti: boolean;\n}\n\n\nexport default function NetCalculator() {\n  const [location] = useLocation();\n  \n  const [tytData, setTytData] = useState<TYTData>({\n    Türkçe: { dogru: 0, yanlis: 0 },\n    sosyal: { dogru: 0, yanlis: 0 },\n    matematik: { dogru: 0, yanlis: 0 },\n    fenBilimleri: { dogru: 0, yanlis: 0 }\n  });\n\n  const [aytData, setAytData] = useState<AYTData>({\n    matematik: { dogru: 0, yanlis: 0 },\n    fizik: { dogru: 0, yanlis: 0 },\n    kimya: { dogru: 0, yanlis: 0 },\n    biyoloji: { dogru: 0, yanlis: 0 }\n  });\n\n  const [obpData, setObpData] = useState<OBPData>({\n    diplomaNotu: 85,\n    gecenSeneYerlesti: false\n  });\n\n\n  // Calculate net for a subject\n  const calculateNet = (dogru: number, yanlis: number): number => {\n    return Math.max(0, dogru - (yanlis / 4));\n  };\n\n  // Calculate TYT total net\n  const calculateTYTNet = (): number => {\n    return Object.values(tytData).reduce((total, subject) => {\n      return total + calculateNet(subject.dogru, subject.yanlis);\n    }, 0);\n  };\n\n  // Calculate AYT total net\n  const calculateAYTNet = (): number => {\n    return Object.values(aytData).reduce((total, subject) => {\n      return total + calculateNet(subject.dogru, subject.yanlis);\n    }, 0);\n  };\n\n  // Calculate OBP (YKS standard: diploma * 5, max 500)\n  const calculateOBP = (): number => {\n    let obp = (obpData.diplomaNotu / 100) * 500;\n    if (obpData.gecenSeneYerlesti) {\n      obp = obp / 2;\n    }\n    return Math.min(500, Math.max(0, obp));\n  };\n\n\n  // Input validation\n  const validateInput = (subject: string, value: number, section: 'tyt' | 'ayt'): number => {\n    const maxValues: Record<string, number> = {\n      // TYT limits\n      'tyt-Türkçe': 40,\n      'tyt-sosyal': 20, \n      'tyt-matematik': 40,\n      'tyt-fenBilimleri': 20,\n      // AYT limits  \n      'ayt-matematik': 40,\n      'ayt-fizik': 14,\n      'ayt-kimya': 13,\n      'ayt-biyoloji': 13\n    };\n    \n    const key = `${section}-${subject}`;\n    const max = maxValues[key] || 40;\n    return Math.min(Math.max(0, value), max);\n  };\n\n  // Reset all data\n  const resetAllData = () => {\n    setTytData({\n      Türkçe: { dogru: 0, yanlis: 0 },\n      sosyal: { dogru: 0, yanlis: 0 },\n      matematik: { dogru: 0, yanlis: 0 },\n      fenBilimleri: { dogru: 0, yanlis: 0 }\n    });\n    setAytData({\n      matematik: { dogru: 0, yanlis: 0 },\n      fizik: { dogru: 0, yanlis: 0 },\n      kimya: { dogru: 0, yanlis: 0 },\n      biyoloji: { dogru: 0, yanlis: 0 }\n    });\n    setObpData({\n      diplomaNotu: 85,\n      gecenSeneYerlesti: false\n    });\n  };\n\n\n  const tytNet = calculateTYTNet();\n  const aytNet = calculateAYTNet();\n  const obp = calculateOBP();\n\n  return (\n    <div className=\"min-h-screen bg-background transition-colors duration-300\">\n      <Header />\n      \n      {/* Centered Navigation */}\n      <nav className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n        <div className=\"flex items-center justify-center space-x-6\">\n          <Link href=\"/\">\n            <button \n              className={`px-8 py-3 rounded-xl font-semibold text-lg transition-all duration-200 ${\n                location === '/' \n                  ? 'bg-primary text-primary-foreground shadow-lg' \n                  : 'bg-secondary text-secondary-foreground hover:bg-accent hover:scale-105'\n              }`}\n            >\n              Anasayfa\n            </button>\n          </Link>\n          <Link href=\"/tasks\">\n            <button \n              className={`px-8 py-3 rounded-xl font-semibold text-lg transition-all duration-200 ${\n                location === '/tasks' \n                  ? 'bg-primary text-primary-foreground shadow-lg' \n                  : 'bg-secondary text-secondary-foreground hover:bg-accent hover:scale-105'\n              }`}\n            >\n              Yapılacaklar\n            </button>\n          </Link>\n          <Link href=\"/dashboard\">\n            <button \n              className={`px-8 py-3 rounded-xl font-semibold text-lg transition-all duration-200 ${\n                location === '/dashboard' \n                  ? 'bg-primary text-primary-foreground shadow-lg' \n                  : 'bg-secondary text-secondary-foreground hover:bg-accent hover:scale-105'\n              }`}\n            >\n              Raporlarım\n            </button>\n          </Link>\n          <Link href=\"/net-calculator\">\n            <button \n              className={`px-8 py-3 rounded-xl font-semibold text-lg transition-all duration-200 ${\n                location === '/net-calculator' \n                  ? 'bg-primary text-primary-foreground shadow-lg' \n                  : 'bg-secondary text-secondary-foreground hover:bg-accent hover:scale-105'\n              }`}\n            >\n              Net Hesapla\n            </button>\n          </Link>\n          <Link href=\"/timer\">\n            <button \n              className={`px-8 py-3 rounded-xl font-semibold text-lg transition-all duration-200 ${\n                location === '/timer' \n                  ? 'bg-primary text-primary-foreground shadow-lg' \n                  : 'bg-secondary text-secondary-foreground hover:bg-accent hover:scale-105'\n              }`}\n              data-testid=\"link-timer\"\n            >\n              Sayaç\n            </button>\n          </Link>\n        </div>\n      </nav>\n\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n        {/* Page Header */}\n        <div className=\"mb-8 text-center\">\n          <h1 className=\"text-3xl font-bold text-foreground mb-2 flex items-center justify-center\">\n            <Calculator className=\"h-8 w-8 mr-3 text-primary\" />\n            Net Hesaplama\n          </h1>\n          <p className=\"text-muted-foreground\">TYT ve AYT netlerinizi hesaplayın ve OBP'nizi görün</p>\n        </div>\n\n        {/* OBP Section - moved up */}\n        <Card className=\"mb-8 shadow-xl border-purple-300 dark:border-purple-800/50 hover:shadow-2xl transition-all duration-500 ring-1 ring-purple-200 dark:ring-purple-800/30\">\n          <CardHeader className=\"bg-gradient-to-r from-purple-800 via-purple-900 to-purple-950 text-white rounded-t-lg shadow-lg\">\n            <CardTitle className=\"text-white flex items-center gap-2 text-lg\">\n              <BookOpen className=\"h-6 w-6\" />\n              Ortaöğretim Başarı Puanı (OBP)\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"diploma-notu\">Diploma Notu</Label>\n                  <Input\n                    id=\"diploma-notu\"\n                    type=\"number\"\n                    min=\"0\"\n                    max=\"100\"\n                    value={obpData.diplomaNotu}\n                    onChange={(e) => setObpData(prev => ({...prev, diplomaNotu: parseFloat(e.target.value) || 0}))}\n                    className=\"mt-1\"\n                  />\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id=\"gecen-sene\"\n                    checked={obpData.gecenSeneYerlesti}\n                    onCheckedChange={(checked) => setObpData(prev => ({...prev, gecenSeneYerlesti: checked as boolean}))}\n                  />\n                  <Label htmlFor=\"gecen-sene\" className=\"text-sm\">\n                    Geçen Sene Bir Bölüme Yerleştim (OBP yarıya düşer)\n                  </Label>\n                </div>\n              </div>\n              <div className=\"flex items-center justify-center\">\n                <div className=\"text-center\">\n                  <div className=\"text-3xl font-bold text-purple-600\">{obp.toFixed(2)}</div>\n                  <div className=\"text-sm text-muted-foreground\">Hesaplanan OBP</div>\n                  <Progress value={(obp / 500) * 100} className=\"mt-2 w-32\" />\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8\">\n          {/* TYT Section */}\n          <Card className=\"shadow-xl border-purple-300 dark:border-purple-800/50 hover:shadow-2xl transition-all duration-500 ring-1 ring-purple-200 dark:ring-purple-800/30\">\n            <CardHeader className=\"bg-gradient-to-r from-purple-600 via-purple-700 to-purple-800 text-white rounded-t-lg shadow-lg\">\n              <CardTitle className=\"text-white flex items-center gap-2 text-lg\">\n                <Calculator className=\"h-6 w-6\" />\n                TYT Puan Hesaplama\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {Object.entries(tytData).map(([subject, data]) => {\n                const subjectDisplayName = {\n                  'Türkçe': 'Türkçe',\n                  'sosyal': 'Sosyal Bilimler',\n                  'matematik': 'Matematik',\n                  'fenBilimleri': 'Fen Bilimleri'\n                }[subject] || subject;\n                \n                const subjectIcon = {\n                  'Türkçe': <BookOpen className=\"h-4 w-4\" />,\n                  'sosyal': <Brain className=\"h-4 w-4\" />,\n                  'matematik': <BarChart2 className=\"h-4 w-4\" />,\n                  'fenBilimleri': <FlaskConical className=\"h-4 w-4\" />\n                }[subject];\n                \n                return (\n                <div key={subject} className=\"space-y-3 p-4 bg-gradient-to-r from-purple-50 to-purple-100 dark:from-purple-950/50 dark:to-purple-900/50 rounded-xl border border-purple-200 dark:border-purple-800/50 shadow-md hover:shadow-lg transition-all duration-300\">\n                  <Label className=\"text-sm font-semibold flex items-center gap-2 text-purple-700 dark:text-purple-300\">\n                    {subjectIcon}\n                    {subjectDisplayName}\n                  </Label>\n                  <div className=\"grid grid-cols-5 gap-3 items-center\">\n                    <div className=\"space-y-1\">\n                      <label className=\"text-xs font-medium text-purple-600 dark:text-purple-400\">Doğru</label>\n                      <Input\n                        type=\"number\"\n                        placeholder=\"0\"\n                        value={data.dogru}\n                        onChange={(e) => {\n                          const value = validateInput(subject, parseInt(e.target.value) || 0, 'tyt');\n                          setTytData(prev => ({\n                            ...prev,\n                            [subject]: { ...prev[subject as keyof TYTData], dogru: value }\n                          }));\n                        }}\n                        className=\"h-12 text-center text-lg font-semibold border-purple-300 focus:border-purple-500 dark:border-purple-700 dark:focus:border-purple-400 rounded-lg bg-white dark:bg-purple-950/30 placeholder:text-purple-400 shadow-sm hover:shadow-md transition-all\"\n                        data-testid={`tyt-${subject}-dogru`}\n                      />\n                    </div>\n                    <div className=\"flex items-center justify-center\">\n                      <div className=\"w-12 h-12 rounded-full bg-gradient-to-r from-red-400 to-pink-500 text-white flex items-center justify-center font-bold shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-110 cursor-pointer group\">\n                        <span className=\"text-xl group-hover:scale-125 transition-transform\">−</span>\n                      </div>\n                    </div>\n                    <div className=\"space-y-1\">\n                      <label className=\"text-xs font-medium text-purple-600 dark:text-purple-400\">Yanlış</label>\n                      <Input\n                        type=\"number\"\n                        placeholder=\"0\"\n                        value={data.yanlis}\n                        onChange={(e) => {\n                          const value = validateInput(subject, parseInt(e.target.value) || 0, 'tyt');\n                          setTytData(prev => ({\n                            ...prev,\n                            [subject]: { ...prev[subject as keyof TYTData], yanlis: value }\n                          }));\n                        }}\n                        className=\"h-12 text-center text-lg font-semibold border-purple-300 focus:border-purple-500 dark:border-purple-700 dark:focus:border-purple-400 rounded-lg bg-white dark:bg-purple-950/30 placeholder:text-purple-400 shadow-sm hover:shadow-md transition-all\"\n                        data-testid={`tyt-${subject}-yanlis`}\n                      />\n                    </div>\n                    <div className=\"flex items-center justify-center\">\n                      <div className=\"w-12 h-12 rounded-full bg-gradient-to-r from-purple-500 to-indigo-600 text-white flex items-center justify-center font-bold shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-110 cursor-pointer group\">\n                        <span className=\"text-xl group-hover:scale-125 transition-transform\">=</span>\n                      </div>\n                    </div>\n                    <div className=\"space-y-1\">\n                      <label className=\"text-xs font-medium text-purple-600 dark:text-purple-400\">Net</label>\n                      <div className=\"h-12 flex items-center justify-center text-lg font-bold text-purple-800 dark:text-purple-200 bg-gradient-to-r from-purple-100 to-purple-200 dark:from-purple-900/60 dark:to-purple-800/60 rounded-lg border border-purple-300 dark:border-purple-700 shadow-sm\">\n                        {calculateNet(data.dogru, data.yanlis).toFixed(2)}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                );\n              })}\n              <Separator />\n              <div className=\"flex justify-between items-center pt-2\">\n                <span className=\"font-bold\">Toplam TYT Net:</span>\n                <span className=\"text-lg font-bold text-blue-600\">{tytNet.toFixed(2)}</span>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* AYT Section */}\n          <Card className=\"shadow-xl border-purple-300 dark:border-purple-800/50 hover:shadow-2xl transition-all duration-500 ring-1 ring-purple-200 dark:ring-purple-800/30\">\n            <CardHeader className=\"bg-gradient-to-r from-purple-700 via-purple-800 to-purple-900 text-white rounded-t-lg shadow-lg\">\n              <CardTitle className=\"text-white flex items-center gap-2 text-lg\">\n                <TrendingUp className=\"h-6 w-6\" />\n                AYT Puan Hesaplama (Sayısal)\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {Object.entries(aytData).map(([subject, data]) => {\n                const subjectDisplayName = {\n                  'matematik': 'Matematik',\n                  'fizik': 'Fizik',\n                  'kimya': 'Kimya',\n                  'biyoloji': 'Biyoloji'\n                }[subject] || subject;\n                \n                const subjectIcon = {\n                  'matematik': <BarChart2 className=\"h-4 w-4\" />,\n                  'fizik': <FlaskConical className=\"h-4 w-4\" />,\n                  'kimya': <FlaskConical className=\"h-4 w-4\" />,\n                  'biyoloji': <Brain className=\"h-4 w-4\" />\n                }[subject];\n                \n                return (\n                <div key={subject} className=\"space-y-3 p-4 bg-gradient-to-r from-green-50 to-green-100 dark:from-green-950/50 dark:to-green-900/50 rounded-xl border border-green-200 dark:border-green-800/50 shadow-md hover:shadow-lg transition-all duration-300\">\n                  <Label className=\"text-sm font-semibold flex items-center gap-2 text-green-700 dark:text-green-300\">\n                    {subjectIcon}\n                    {subjectDisplayName}\n                  </Label>\n                  <div className=\"grid grid-cols-5 gap-3 items-center\">\n                    <div className=\"space-y-1\">\n                      <label className=\"text-xs font-medium text-green-600 dark:text-green-400\">Doğru</label>\n                      <Input\n                        type=\"number\"\n                        placeholder=\"0\"\n                        value={data.dogru}\n                        onChange={(e) => {\n                          const value = validateInput(subject, parseInt(e.target.value) || 0, 'ayt');\n                          setAytData(prev => ({\n                            ...prev,\n                            [subject]: { ...prev[subject as keyof AYTData], dogru: value }\n                          }));\n                        }}\n                        className=\"h-12 text-center text-lg font-semibold border-green-300 focus:border-green-500 dark:border-green-700 dark:focus:border-green-400 rounded-lg bg-white dark:bg-green-950/30 placeholder:text-green-400 shadow-sm hover:shadow-md transition-all\"\n                        data-testid={`ayt-${subject}-dogru`}\n                      />\n                    </div>\n                    <div className=\"flex items-center justify-center\">\n                      <div className=\"w-12 h-12 rounded-full bg-gradient-to-r from-red-400 to-pink-500 text-white flex items-center justify-center font-bold shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-110 cursor-pointer group\">\n                        <span className=\"text-xl group-hover:scale-125 transition-transform\">−</span>\n                      </div>\n                    </div>\n                    <div className=\"space-y-1\">\n                      <label className=\"text-xs font-medium text-green-600 dark:text-green-400\">Yanlış</label>\n                      <Input\n                        type=\"number\"\n                        placeholder=\"0\"\n                        value={data.yanlis}\n                        onChange={(e) => {\n                          const value = validateInput(subject, parseInt(e.target.value) || 0, 'ayt');\n                          setAytData(prev => ({\n                            ...prev,\n                            [subject]: { ...prev[subject as keyof AYTData], yanlis: value }\n                          }));\n                        }}\n                        className=\"h-12 text-center text-lg font-semibold border-green-300 focus:border-green-500 dark:border-green-700 dark:focus:border-green-400 rounded-lg bg-white dark:bg-green-950/30 placeholder:text-green-400 shadow-sm hover:shadow-md transition-all\"\n                        data-testid={`ayt-${subject}-yanlis`}\n                      />\n                    </div>\n                    <div className=\"flex items-center justify-center\">\n                      <div className=\"w-12 h-12 rounded-full bg-gradient-to-r from-purple-500 to-indigo-600 text-white flex items-center justify-center font-bold shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-110 cursor-pointer group\">\n                        <span className=\"text-xl group-hover:scale-125 transition-transform\">=</span>\n                      </div>\n                    </div>\n                    <div className=\"space-y-1\">\n                      <label className=\"text-xs font-medium text-green-600 dark:text-green-400\">Net</label>\n                      <div className=\"h-12 flex items-center justify-center text-lg font-bold text-green-800 dark:text-green-200 bg-gradient-to-r from-green-100 to-green-200 dark:from-green-900/60 dark:to-green-800/60 rounded-lg border border-green-300 dark:border-green-700 shadow-sm\">\n                        {calculateNet(data.dogru, data.yanlis).toFixed(2)}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                );\n              })}\n              <Separator />\n              <div className=\"flex justify-between items-center pt-2\">\n                <span className=\"font-bold\">Toplam AYT Net:</span>\n                <span className=\"text-lg font-bold text-green-600\">{aytNet.toFixed(2)}</span>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Results Summary - enlarged and centered */}\n        <div className=\"flex justify-center\">\n          <Card className=\"mb-8 shadow-2xl border-purple-400 dark:border-purple-700/50 hover:shadow-purple-500/25 transition-all duration-500 ring-2 ring-purple-300 dark:ring-purple-800/40 w-full max-w-5xl\">\n            <CardHeader className=\"bg-gradient-to-r from-purple-600 via-purple-700 to-purple-800 text-white rounded-t-lg shadow-xl py-8\">\n              <CardTitle className=\"flex items-center justify-center text-white text-2xl\">\n                <TrendingUp className=\"h-8 w-8 mr-3\" />\n                Sonuçlar Özeti\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"p-8\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-10\">\n                <div className=\"text-center bg-gradient-to-br from-blue-50 to-blue-100 dark:from-blue-950/50 dark:to-blue-900/50 rounded-xl p-6 border border-blue-200 dark:border-blue-800/50 shadow-lg hover:shadow-xl transition-all duration-300\">\n                  <div className=\"text-4xl font-bold text-blue-600 mb-2\">{tytNet.toFixed(2)}</div>\n                  <div className=\"text-lg font-medium text-muted-foreground mb-4\">TYT Net</div>\n                  <Progress value={(tytNet / 120) * 100} className=\"h-3\" />\n                  <div className=\"text-sm text-muted-foreground mt-2\">/ 120 soruden</div>\n                </div>\n                <div className=\"text-center bg-gradient-to-br from-green-50 to-green-100 dark:from-green-950/50 dark:to-green-900/50 rounded-xl p-6 border border-green-200 dark:border-green-800/50 shadow-lg hover:shadow-xl transition-all duration-300\">\n                  <div className=\"text-4xl font-bold text-green-600 mb-2\">{aytNet.toFixed(2)}</div>\n                  <div className=\"text-lg font-medium text-muted-foreground mb-4\">AYT Net</div>\n                  <Progress value={(aytNet / 80) * 100} className=\"h-3\" />\n                  <div className=\"text-sm text-muted-foreground mt-2\">/ 80 soruden</div>\n                </div>\n                <div className=\"text-center bg-gradient-to-br from-purple-50 to-purple-100 dark:from-purple-950/50 dark:to-purple-900/50 rounded-xl p-6 border border-purple-200 dark:border-purple-800/50 shadow-lg hover:shadow-xl transition-all duration-300\">\n                  <div className=\"text-4xl font-bold text-purple-600 mb-2\">{obp.toFixed(2)}</div>\n                  <div className=\"text-lg font-medium text-muted-foreground mb-4\">OBP</div>\n                  <Progress value={(obp / 500) * 100} className=\"h-3\" />\n                  <div className=\"text-sm text-muted-foreground mt-2\">/ 500 puan</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":23868},"client/src/components/todays-tasks-widget.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Task } from \"@shared/schema\";\nimport { CheckCircle2, Circle, Plus, Calendar } from \"lucide-react\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport function TodaysTasksWidget() {\n  const { toast } = useToast();\n  \n  // Get today's date in YYYY-MM-DD format (locale-safe)\n  const today = new Date();\n  const year = today.getFullYear();\n  const month = (today.getMonth() + 1).toString().padStart(2, '0');\n  const day = today.getDate().toString().padStart(2, '0');\n  const todayStr = `${year}-${month}-${day}`;\n  \n  const { data: todaysData, isLoading } = useQuery<{\n    date: string;\n    dayNumber: number;\n    daysRemaining: number;\n    tasks: Task[];\n    tasksCount: number;\n  }>({\n    queryKey: [\"/api/calendar\", todayStr],\n    queryFn: async () => {\n      const response = await fetch(`/api/calendar/${todayStr}`);\n      if (!response.ok) throw new Error('Failed to fetch today\\'s tasks');\n      return response.json();\n    },\n  });\n\n  const toggleTaskMutation = useMutation({\n    mutationFn: (taskId: string) => \n      apiRequest(\"PATCH\", `/api/tasks/${taskId}/toggle`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/calendar\", todayStr] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/tasks\"] });\n      toast({\n        title: \"Görev güncellendi\",\n        description: \"Görev durumu başarıyla değiştirildi.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Hata\",\n        description: \"Görev durumu değiştirilemedi.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const tasks = todaysData?.tasks || [];\n  const completedCount = tasks.filter(task => task.completed).length;\n  const totalCount = tasks.length;\n\n  if (isLoading) {\n    return (\n      <div className=\"bg-card rounded-xl border border-border p-6 transition-colors duration-300 h-full\">\n        <h3 className=\"text-lg font-semibold text-foreground mb-3 flex items-center\">\n          <Calendar className=\"h-5 w-5 mr-2 text-primary\" />\n          Bugün Yapılacaklar\n        </h3>\n        <div className=\"animate-pulse\">\n          <div className=\"h-4 bg-muted rounded mb-2\"></div>\n          <div className=\"h-3 bg-muted rounded w-2/3\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-card rounded-xl border border-border p-6 transition-colors duration-300 h-full flex flex-col\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <h3 className=\"text-lg font-semibold text-foreground flex items-center\">\n          <Calendar className=\"h-5 w-5 mr-2 text-primary\" />\n          Bugün Yapılacaklar\n        </h3>\n        <div className=\"text-sm text-muted-foreground bg-muted/50 rounded-full px-3 py-1\" data-testid=\"text-today-counts\">\n          {completedCount}/{totalCount}\n        </div>\n      </div>\n\n      {tasks.length === 0 ? (\n        <div className=\"text-center py-8 text-muted-foreground\">\n          <Calendar className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n          <p className=\"text-sm\">Bugün için görev bulunmuyor</p>\n          <p className=\"text-xs mt-1\">Yeni görevler eklemek için Yapılacaklar sayfasına gidin</p>\n        </div>\n      ) : (\n        <>\n          {/* Progress bar */}\n          <div className=\"w-full bg-secondary rounded-full h-2 mb-4\">\n            <div \n              className=\"bg-gradient-to-r from-primary to-primary/80 h-2 rounded-full transition-all duration-500\"\n              style={{ width: `${totalCount > 0 ? (completedCount / totalCount) * 100 : 0}%` }}\n            ></div>\n          </div>\n\n          {/* Tasks list */}\n          <div className=\"space-y-3 flex-1 min-h-0 overflow-y-auto\">\n            {tasks.map((task) => (\n              <div\n                key={task.id}\n                className={`flex items-start gap-3 p-3 rounded-lg border transition-all duration-200 hover:bg-muted/50 ${\n                  task.completed \n                    ? 'bg-muted/30 border-muted' \n                    : 'bg-background border-border/50 hover:border-border'\n                }`}\n                style={{\n                  borderLeft: `4px solid ${task.color || '#8B5CF6'}`,\n                }}\n                data-testid={`list-task-${task.id}`}\n              >\n                <button\n                  onClick={() => toggleTaskMutation.mutate(task.id)}\n                  className={`flex-shrink-0 transition-colors duration-200 ${\n                    task.completed \n                      ? 'text-primary hover:text-primary/80' \n                      : 'text-muted-foreground hover:text-primary'\n                  }`}\n                  disabled={toggleTaskMutation.isPending}\n                  data-testid={`button-toggle-task-${task.id}`}\n                >\n                  {task.completed ? (\n                    <CheckCircle2 className=\"h-5 w-5\" />\n                  ) : (\n                    <Circle className=\"h-5 w-5\" />\n                  )}\n                </button>\n                \n                <div className=\"flex-1 min-w-0\">\n                  <div className={`font-medium text-sm transition-all duration-200 ${\n                    task.completed \n                      ? 'line-through text-muted-foreground' \n                      : 'text-foreground'\n                  }`}>\n                    {task.title}\n                  </div>\n                  \n                  {task.description && (\n                    <div className={`text-xs mt-1 transition-all duration-200 ${\n                      task.completed \n                        ? 'line-through text-muted-foreground/70' \n                        : 'text-muted-foreground'\n                    }`}>\n                      {task.description.length > 80 \n                        ? `${task.description.substring(0, 80)}...` \n                        : task.description}\n                    </div>\n                  )}\n                  \n                  <div className=\"flex items-center gap-2 mt-2\">\n                    <span className={`text-xs px-2 py-1 rounded-full ${\n                      task.priority === 'high' \n                        ? 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'\n                        : task.priority === 'medium'\n                        ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200'\n                        : 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200'\n                    }`}>\n                      {task.priority === 'high' ? 'Yüksek' : task.priority === 'medium' ? 'Orta' : 'Düşük'}\n                    </span>\n                    \n                    <span className=\"text-xs text-muted-foreground bg-muted/50 rounded-full px-2 py-1\">\n                      {task.category}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n\n          {/* Summary */}\n          {tasks.length > 0 && (\n            <div className=\"mt-auto pt-4 border-t border-border\">\n              <div className=\"text-xs text-muted-foreground text-center\">\n                {completedCount === totalCount \n                  ? \"🎉 Tüm günlük görevler tamamlandı!\" \n                  : `${totalCount - completedCount} görev kaldı`\n                }\n              </div>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n}","size_bytes":7442},"client/src/components/latest-notes-widget.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { StickyNote, Calendar, Plus } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\n\ninterface Mood {\n  id: string;\n  mood: string;\n  moodBg?: string | null;\n  note?: string | null;\n  createdAt: string;\n}\n\nexport function LatestNotesWidget() {\n  const [isAddingNote, setIsAddingNote] = useState(false);\n  const [noteText, setNoteText] = useState('');\n  const queryClient = useQueryClient();\n  \n  const { data: moods = [], isLoading } = useQuery<Mood[]>({\n    queryKey: [\"/api/moods\"],\n  });\n  \n  const addNoteMutation = useMutation({\n    mutationFn: async (noteContent: string) => {\n      const response = await fetch('/api/moods', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          mood: '📝',\n          note: noteContent,\n          date: new Date().toISOString().split('T')[0]\n        })\n      });\n      if (!response.ok) throw new Error('Failed to add note');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/moods\"] });\n      setNoteText('');\n      setIsAddingNote(false);\n    }\n  });\n  \n  const handleAddNote = () => {\n    if (noteText.trim()) {\n      addNoteMutation.mutate(noteText.trim());\n    }\n  };\n\n  // Filter moods that have notes and get the latest 3\n  const latestNotes = moods\n    .filter(mood => mood.note && mood.note.trim().length > 0)\n    .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())\n    .slice(0, 3);\n\n  const formatDate = (dateStr: string) => {\n    const date = new Date(dateStr);\n    const now = new Date();\n    const diffInMinutes = Math.floor((now.getTime() - date.getTime()) / (1000 * 60));\n    \n    if (diffInMinutes < 1) return 'Şimdi';\n    if (diffInMinutes < 60) return `${diffInMinutes}dk önce`;\n    \n    const diffInHours = Math.floor(diffInMinutes / 60);\n    if (diffInHours < 24) return `${diffInHours}s önce`;\n    \n    const diffInDays = Math.floor(diffInHours / 24);\n    if (diffInDays < 7) return `${diffInDays} gün önce`;\n    \n    return date.toLocaleDateString('tr-TR', { \n      day: 'numeric', \n      month: 'short' \n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"bg-card rounded-xl border border-border p-4 transition-colors duration-300\">\n        <h3 className=\"text-lg font-semibold text-foreground mb-3 flex items-center\">\n          <StickyNote className=\"h-5 w-5 mr-2 text-primary\" />\n          Son Eklenen Notlar\n        </h3>\n        <div className=\"space-y-3\">\n          {[1, 2, 3].map(i => (\n            <div key={i} className=\"animate-pulse\">\n              <div className=\"h-4 bg-muted rounded mb-2\"></div>\n              <div className=\"h-3 bg-muted rounded w-3/4\"></div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-card rounded-xl border border-border p-4 transition-colors duration-300\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <h3 className=\"text-lg font-semibold text-foreground flex items-center\">\n          <StickyNote className=\"h-5 w-5 mr-2 text-primary\" />\n          Son Eklenen Notlar\n        </h3>\n        <div className=\"flex items-center gap-2\">\n          <div className=\"text-sm text-muted-foreground bg-muted/50 rounded-full px-3 py-1\">\n            {latestNotes.length}/3\n          </div>\n          <Dialog open={isAddingNote} onOpenChange={setIsAddingNote}>\n            <DialogTrigger asChild>\n              <Button size=\"sm\" variant=\"outline\" className=\"h-8 w-8 p-0\">\n                <Plus className=\"h-4 w-4\" />\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"sm:max-w-md\">\n              <DialogHeader>\n                <DialogTitle>Yeni Not Ekle</DialogTitle>\n              </DialogHeader>\n              <div className=\"space-y-4\">\n                <Input\n                  value={noteText}\n                  onChange={(e) => setNoteText(e.target.value)}\n                  placeholder=\"Notunuzu yazın...\"\n                  maxLength={200}\n                />\n                <div className=\"text-xs text-muted-foreground text-right\">\n                  {noteText.length}/200 karakter\n                </div>\n                <div className=\"flex justify-end gap-2\">\n                  <Button variant=\"outline\" onClick={() => setIsAddingNote(false)}>\n                    İptal\n                  </Button>\n                  <Button \n                    onClick={handleAddNote} \n                    disabled={!noteText.trim() || addNoteMutation.isPending}\n                  >\n                    {addNoteMutation.isPending ? 'Ekleniyor...' : 'Ekle'}\n                  </Button>\n                </div>\n              </div>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {latestNotes.length === 0 ? (\n        <div className=\"text-center py-6 text-muted-foreground\">\n          <StickyNote className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n          <p className=\"text-sm\">Henüz not eklenmemiş</p>\n          <p className=\"text-xs mt-1\">Profil modalu üzerinden not ekleyebilirsiniz</p>\n        </div>\n      ) : (\n        <div className=\"space-y-3\" data-testid=\"latest-notes-container\">\n          {latestNotes.map((mood, index) => (\n            <div\n              key={mood.id}\n              className=\"bg-background/50 rounded-lg p-3 border border-border/30 hover:bg-muted/30 transition-all duration-200\"\n              data-testid={`note-card-${index}`}\n            >\n              <div className=\"flex items-start gap-3\">\n                {/* Mood emoji */}\n                <div \n                  className=\"flex-shrink-0 w-8 h-8 rounded-full flex items-center justify-center text-lg\"\n                  style={{\n                    backgroundColor: mood.moodBg || '#f3f4f6'\n                  }}\n                >\n                  {mood.mood}\n                </div>\n\n                {/* Note content */}\n                <div className=\"flex-1 min-w-0\">\n                  <p \n                    className=\"text-sm text-foreground leading-relaxed\"\n                    data-testid={`note-text-${index}`}\n                  >\n                    {mood.note && mood.note.length > 120 \n                      ? `${mood.note.substring(0, 120)}...` \n                      : mood.note}\n                  </p>\n                  \n                  <div className=\"flex items-center gap-2 mt-2\">\n                    <Calendar className=\"h-3 w-3 text-muted-foreground\" />\n                    <span \n                      className=\"text-xs text-muted-foreground\"\n                      data-testid={`note-date-${index}`}\n                    >\n                      {formatDate(mood.createdAt)}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      )}\n\n      {/* Footer with link to add more notes */}\n      {latestNotes.length > 0 && (\n        <div className=\"mt-4 pt-3 border-t border-border text-center\">\n          <p className=\"text-xs text-muted-foreground\">\n            Profil modali üzerinden yeni notlar ekleyebilirsiniz\n          </p>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":7494},"client/src/components/weekly-progress-chart.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { TrendingUp, BarChart3, Calendar } from \"lucide-react\";\n\ninterface DaySummary {\n  date: string;\n  tasksCompleted: number;\n  totalTasks: number;\n  moods: any[];\n  productivity: number;\n}\n\nexport function WeeklyProgressChart() {\n  const { data: summaryData = [], isLoading } = useQuery<DaySummary[]>({\n    queryKey: [\"/api/summary/daily\", { range: 7 }],\n    queryFn: () => fetch(\"/api/summary/daily?range=7\").then(res => res.json()),\n  });\n\n  const formatDayName = (dateStr: string) => {\n    const date = new Date(dateStr);\n    const dayNames = ['Paz', 'Pzt', 'Sal', 'Çar', 'Per', 'Cum', 'Cmt'];\n    return dayNames[date.getDay()];\n  };\n\n  const getBarHeight = (tasksCompleted: number, maxTasks: number) => {\n    if (maxTasks === 0) return 0;\n    // Ensure minimum visible height for any completed tasks\n    return Math.max((tasksCompleted / maxTasks) * 100, tasksCompleted > 0 ? 15 : 0);\n  };\n\n  const getBarColor = (productivity: number) => {\n    if (productivity >= 80) return '#10b981'; // Green\n    if (productivity >= 60) return '#f59e0b'; // Yellow\n    if (productivity >= 40) return '#f97316'; // Orange\n    if (productivity > 0) return '#ef4444';   // Red\n    return '#6b7280'; // Gray\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"bg-card rounded-xl border border-border p-4 transition-colors duration-300\">\n        <h3 className=\"text-lg font-semibold text-foreground mb-3 flex items-center\">\n          <TrendingUp className=\"h-5 w-5 mr-2 text-primary\" />\n          Haftalık İlerleme\n        </h3>\n        <div className=\"space-y-3\">\n          {[1, 2, 3].map(i => (\n            <div key={i} className=\"animate-pulse\">\n              <div className=\"h-4 bg-muted rounded mb-2\"></div>\n              <div className=\"h-8 bg-muted rounded\"></div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  const reversedData = [...summaryData].reverse(); // Show oldest to newest (left to right)\n  const maxTasks = Math.max(...reversedData.map(day => day.tasksCompleted), 1);\n  const totalTasksCompleted = reversedData.reduce((sum, day) => sum + day.tasksCompleted, 0);\n  const averageProductivity = reversedData.length > 0 \n    ? Math.round(reversedData.reduce((sum, day) => sum + day.productivity, 0) / reversedData.length)\n    : 0;\n\n  return (\n    <div className=\"bg-card rounded-xl border border-border p-4 transition-colors duration-300\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-4\">\n        <h3 className=\"text-lg font-semibold text-foreground flex items-center\">\n          <TrendingUp className=\"h-5 w-5 mr-2 text-primary\" />\n          Haftalık İlerleme\n        </h3>\n        <div className=\"text-sm text-muted-foreground bg-muted/50 rounded-full px-3 py-1\">\n          Son 7 Gün\n        </div>\n      </div>\n\n      {/* Summary Stats - Compact */}\n      <div className=\"grid grid-cols-3 gap-3 mb-4\">\n        <div className=\"text-center p-3 bg-muted/10 rounded-lg\">\n          <div className=\"text-xs text-muted-foreground mb-1\">Toplam</div>\n          <div className=\"text-lg font-bold text-foreground\" data-testid=\"total-tasks-completed\">{totalTasksCompleted}</div>\n        </div>\n        <div className=\"text-center p-3 bg-muted/10 rounded-lg\">\n          <div className=\"text-xs text-muted-foreground mb-1\">Verimlilik</div>\n          <div className=\"text-lg font-bold text-foreground\" data-testid=\"average-productivity\">{averageProductivity}%</div>\n        </div>\n        <div className=\"text-center p-3 bg-muted/10 rounded-lg\">\n          <div className=\"text-xs text-muted-foreground mb-1\">Aktif</div>\n          <div className=\"text-lg font-bold text-foreground\">{reversedData.filter(day => day.tasksCompleted > 0).length}/7</div>\n        </div>\n      </div>\n\n\n      {/* Chart */}\n      <div className=\"space-y-2\" data-testid=\"progress-chart\">\n        {reversedData.length === 0 || (totalTasksCompleted === 0 && averageProductivity === 0) ? (\n          <div className=\"text-center py-6 text-muted-foreground\">\n            <Calendar className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n            <p className=\"text-sm\">Henüz veri bulunmuyor</p>\n            <p className=\"text-xs mt-1\">Görev tamamlayarak ilerlemenizi takip edin</p>\n          </div>\n        ) : (\n          <div className=\"space-y-2\">\n            {reversedData.map((day, index) => {\n              const barWidth = Math.max((day.tasksCompleted / Math.max(maxTasks, 1)) * 100, day.tasksCompleted > 0 ? 15 : 0);\n              const barColor = getBarColor(day.productivity);\n              \n              return (\n                <div key={day.date} className=\"flex items-center gap-3\" data-testid={`progress-bar-${index}`}>\n                  {/* Day label */}\n                  <div className=\"text-sm font-medium text-foreground w-10\">\n                    {formatDayName(day.date)}\n                  </div>\n                  \n                  {/* Horizontal Bar */}\n                  <div className=\"flex-1 relative\">\n                    <div className=\"h-6 bg-muted/30 rounded-lg overflow-hidden\">\n                      <div\n                        className=\"h-full rounded-lg transition-all duration-500 flex items-center justify-end pr-2\"\n                        style={{\n                          width: `${barWidth}%`,\n                          backgroundColor: barColor,\n                        }}\n                      >\n                        {day.tasksCompleted > 0 && (\n                          <span className=\"text-xs font-medium text-white\">\n                            {day.tasksCompleted}\n                          </span>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                  \n                  {/* Productivity */}\n                  <div className=\"text-xs text-muted-foreground w-12 text-right\">\n                    {day.productivity}%\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        )}\n      </div>\n\n      {/* Legend - Compact */}\n      <div className=\"mt-3 pt-3 border-t border-border\">\n        <div className=\"flex items-center justify-center gap-3 text-xs\">\n          <div className=\"flex items-center gap-1\">\n            <div className=\"w-2 h-2 rounded-full bg-green-500\"></div>\n            <span className=\"text-muted-foreground\">Mükemmel</span>\n          </div>\n          <div className=\"flex items-center gap-1\">\n            <div className=\"w-2 h-2 rounded-full bg-yellow-500\"></div>\n            <span className=\"text-muted-foreground\">İyi</span>\n          </div>\n          <div className=\"flex items-center gap-1\">\n            <div className=\"w-2 h-2 rounded-full bg-orange-500\"></div>\n            <span className=\"text-muted-foreground\">Orta</span>\n          </div>\n          <div className=\"flex items-center gap-1\">\n            <div className=\"w-2 h-2 rounded-full bg-red-500\"></div>\n            <span className=\"text-muted-foreground\">Zayıf</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":7080},"client/src/components/flashcards-widget.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { ChevronLeft, ChevronRight, Brain, RefreshCw, Shuffle, CheckCircle, XCircle, AlertCircle, Plus } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\n\ninterface Flashcard {\n  id: string;\n  question: string;\n  answer: string;\n  subject: string;\n  difficulty: 'easy' | 'medium' | 'hard';\n  lastReviewed?: Date | null;\n  nextReview?: Date | null;\n  reviewCount: string;\n  createdAt: Date;\n}\n\nexport function FlashcardsWidget() {\n  const [currentCard, setCurrentCard] = useState<Flashcard | null>(null);\n  const [showAnswer, setShowAnswer] = useState(false);\n  const [isStudyMode, setIsStudyMode] = useState(false);\n  const [isCreatingCard, setIsCreatingCard] = useState(false);\n  const [newCard, setNewCard] = useState({\n    question: '',\n    answer: '',\n    subject: '',\n    difficulty: 'medium' as 'easy' | 'medium' | 'hard'\n  });\n  const queryClient = useQueryClient();\n\n  const { data: dueCards = [], isLoading } = useQuery<Flashcard[]>({\n    queryKey: [\"/api/flashcards/due\"],\n  });\n\n  const reviewCardMutation = useMutation({\n    mutationFn: async ({ cardId, difficulty }: { cardId: string; difficulty: 'easy' | 'medium' | 'hard' }) => {\n      const response = await fetch(`/api/flashcards/${cardId}/review`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ difficulty }),\n      });\n      if (!response.ok) throw new Error('Failed to review card');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/flashcards/due\"] });\n      setShowAnswer(false);\n      setCurrentCard(null);\n    }\n  });\n\n  const createCardMutation = useMutation({\n    mutationFn: async (cardData: typeof newCard) => {\n      const response = await fetch('/api/flashcards', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(cardData)\n      });\n      if (!response.ok) throw new Error('Failed to create card');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/flashcards/due\"] });\n      setNewCard({ question: '', answer: '', subject: '', difficulty: 'medium' });\n      setIsCreatingCard(false);\n    }\n  });\n\n  const handleCreateCard = () => {\n    if (newCard.question.trim() && newCard.answer.trim() && newCard.subject.trim()) {\n      createCardMutation.mutate(newCard);\n    }\n  };\n\n  const drawRandomCard = () => {\n    if (dueCards.length === 0) return;\n    \n    const availableCards = dueCards.filter(card => !currentCard || card.id !== currentCard.id);\n    if (availableCards.length === 0 && dueCards.length > 0) {\n      setCurrentCard(dueCards[0]);\n    } else if (availableCards.length > 0) {\n      const randomIndex = Math.floor(Math.random() * availableCards.length);\n      setCurrentCard(availableCards[randomIndex]);\n    }\n    \n    setShowAnswer(false);\n    setIsStudyMode(true);\n  };\n\n  const handleReview = (difficulty: 'easy' | 'medium' | 'hard') => {\n    if (!currentCard) return;\n    reviewCardMutation.mutate({ cardId: currentCard.id, difficulty });\n  };\n\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty) {\n      case 'easy': return 'text-green-600 dark:text-green-400 bg-green-50 dark:bg-green-950/30 border-green-200 dark:border-green-800';\n      case 'medium': return 'text-yellow-600 dark:text-yellow-400 bg-yellow-50 dark:bg-yellow-950/30 border-yellow-200 dark:border-yellow-800';\n      case 'hard': return 'text-red-600 dark:text-red-400 bg-red-50 dark:bg-red-950/30 border-red-200 dark:border-red-800';\n      default: return 'text-gray-600 dark:text-gray-400 bg-gray-50 dark:bg-gray-950/30 border-gray-200 dark:border-gray-800';\n    }\n  };\n\n  const getSubjectEmoji = (subject: string) => {\n    const emojiMap: { [key: string]: string } = {\n      'matematik': '📐',\n      'turkce': '📚',\n      'fizik': '⚛️',\n      'kimya': '🧪',\n      'biyoloji': '🧬',\n      'tarih': '🏛️',\n      'cografya': '🌍',\n      'felsefe': '🤔',\n      'genel': '📖'\n    };\n    return emojiMap[subject] || '📖';\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"bg-card rounded-xl border border-border p-4 transition-colors duration-300\">\n        <h3 className=\"text-lg font-semibold text-foreground mb-3 flex items-center\">\n          <Brain className=\"h-5 w-5 mr-2 text-primary\" />\n          Tekrar Kartları\n        </h3>\n        <div className=\"animate-pulse space-y-3\">\n          <div className=\"h-4 bg-muted rounded\"></div>\n          <div className=\"h-20 bg-muted rounded\"></div>\n          <div className=\"h-8 bg-muted rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isStudyMode || !currentCard) {\n    return (\n      <div className=\"bg-card rounded-xl border border-border p-4 transition-colors duration-300\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-semibold text-foreground flex items-center\">\n            <Brain className=\"h-5 w-5 mr-2 text-primary\" />\n            Tekrar Kartları\n          </h3>\n          <div className=\"flex items-center gap-2\">\n            <div className=\"text-sm text-muted-foreground bg-muted/50 rounded-full px-3 py-1\">\n              {dueCards.length} kart hazır\n            </div>\n            <Dialog open={isCreatingCard} onOpenChange={setIsCreatingCard}>\n              <DialogTrigger asChild>\n                <Button size=\"sm\" variant=\"outline\" className=\"h-8 w-8 p-0\">\n                  <Plus className=\"h-4 w-4\" />\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"sm:max-w-md\">\n                <DialogHeader>\n                  <DialogTitle>Yeni Tekrar Kartı Oluştur</DialogTitle>\n                </DialogHeader>\n                <div className=\"space-y-4\">\n                  <div>\n                    <label className=\"text-sm font-medium text-foreground\">Konu</label>\n                    <Select value={newCard.subject} onValueChange={(value) => setNewCard({...newCard, subject: value})}>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Konu seçin\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"matematik\">Matematik</SelectItem>\n                        <SelectItem value=\"turkce\">Türkçe</SelectItem>\n                        <SelectItem value=\"fizik\">Fizik</SelectItem>\n                        <SelectItem value=\"kimya\">Kimya</SelectItem>\n                        <SelectItem value=\"biyoloji\">Biyoloji</SelectItem>\n                        <SelectItem value=\"tarih\">Tarih</SelectItem>\n                        <SelectItem value=\"cografya\">Coğrafya</SelectItem>\n                        <SelectItem value=\"felsefe\">Felsefe</SelectItem>\n                        <SelectItem value=\"genel\">Genel</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium text-foreground\">Soru</label>\n                    <Textarea\n                      value={newCard.question}\n                      onChange={(e) => setNewCard({...newCard, question: e.target.value})}\n                      placeholder=\"Soruyu yazın...\"\n                      rows={3}\n                    />\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium text-foreground\">Cevap</label>\n                    <Textarea\n                      value={newCard.answer}\n                      onChange={(e) => setNewCard({...newCard, answer: e.target.value})}\n                      placeholder=\"Cevabı yazın...\"\n                      rows={3}\n                    />\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium text-foreground\">Zorluk</label>\n                    <Select value={newCard.difficulty} onValueChange={(value: 'easy' | 'medium' | 'hard') => setNewCard({...newCard, difficulty: value})}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"easy\">Kolay</SelectItem>\n                        <SelectItem value=\"medium\">Orta</SelectItem>\n                        <SelectItem value=\"hard\">Zor</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"flex justify-end gap-2\">\n                    <Button variant=\"outline\" onClick={() => setIsCreatingCard(false)}>\n                      İptal\n                    </Button>\n                    <Button \n                      onClick={handleCreateCard} \n                      disabled={!newCard.question.trim() || !newCard.answer.trim() || !newCard.subject || createCardMutation.isPending}\n                    >\n                      {createCardMutation.isPending ? 'Oluşturuluyor...' : 'Oluştur'}\n                    </Button>\n                  </div>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </div>\n\n        {dueCards.length === 0 ? (\n          <div className=\"text-center py-6 text-muted-foreground\">\n            <Brain className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n            <p className=\"text-sm\">Çalışılacak kart yok</p>\n            <p className=\"text-xs mt-1\">Tüm kartlar gözden geçirilmiş!</p>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            <div className=\"text-center\">\n              <p className=\"text-sm text-muted-foreground mb-3\">\n                {dueCards.length} kart çalışmaya hazır\n              </p>\n              <button\n                onClick={drawRandomCard}\n                className=\"bg-primary text-primary-foreground px-6 py-3 rounded-lg font-medium hover:bg-primary/90 transition-colors duration-200 flex items-center gap-2 mx-auto\"\n                data-testid=\"draw-card-button\"\n              >\n                <Shuffle className=\"h-4 w-4\" />\n                Kart Çek\n              </button>\n            </div>\n\n            <div className=\"grid grid-cols-3 gap-2 text-xs\">\n              <div className=\"text-center p-2 bg-green-50 dark:bg-green-900/30 border border-green-200 dark:border-green-800 rounded-lg\">\n                <div className=\"font-medium text-green-800 dark:text-green-300\">Kolay</div>\n                <div className=\"text-green-600 dark:text-green-400\">\n                  {dueCards.filter(c => c.difficulty === 'easy').length}\n                </div>\n              </div>\n              <div className=\"text-center p-2 bg-yellow-50 dark:bg-yellow-900/30 border border-yellow-200 dark:border-yellow-800 rounded-lg\">\n                <div className=\"font-medium text-yellow-800 dark:text-yellow-300\">Orta</div>\n                <div className=\"text-yellow-600 dark:text-yellow-400\">\n                  {dueCards.filter(c => c.difficulty === 'medium').length}\n                </div>\n              </div>\n              <div className=\"text-center p-2 bg-red-50 dark:bg-red-900/30 border border-red-200 dark:border-red-800 rounded-lg\">\n                <div className=\"font-medium text-red-800 dark:text-red-300\">Zor</div>\n                <div className=\"text-red-600 dark:text-red-400\">\n                  {dueCards.filter(c => c.difficulty === 'hard').length}\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-card rounded-xl border border-border p-4 transition-colors duration-300\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <div className=\"flex items-center gap-2\">\n          <Brain className=\"h-5 w-5 text-primary\" />\n          <h3 className=\"text-lg font-semibold text-foreground\">Tekrar Kartları</h3>\n        </div>\n        <button\n          onClick={() => setIsStudyMode(false)}\n          className=\"text-muted-foreground hover:text-foreground p-1\"\n          title=\"Kart seçimine dön\"\n        >\n          <ChevronLeft className=\"h-4 w-4\" />\n        </button>\n      </div>\n\n      <div className=\"space-y-4\" data-testid=\"flashcard-study-mode\">\n        {/* Card Info */}\n        <div className=\"flex items-center justify-between text-sm\">\n          <div className=\"flex items-center gap-2\">\n            <span className=\"text-lg\">{getSubjectEmoji(currentCard.subject)}</span>\n            <span className=\"font-medium capitalize\">{currentCard.subject}</span>\n          </div>\n          <div className={`px-2 py-1 rounded-lg border text-xs font-medium ${getDifficultyColor(currentCard.difficulty)}`}>\n            {currentCard.difficulty === 'easy' ? 'Kolay' : currentCard.difficulty === 'medium' ? 'Orta' : 'Zor'}\n          </div>\n        </div>\n\n        {/* Question Card */}\n        <div className=\"bg-gradient-to-br from-primary/5 to-primary/10 border border-primary/20 rounded-xl p-6 min-h-[120px]\">\n          <div className=\"text-xs text-primary font-medium mb-2\">SORU</div>\n          <p className=\"text-foreground font-medium text-base leading-relaxed\" data-testid=\"flashcard-question\">\n            {currentCard.question}\n          </p>\n        </div>\n\n        {/* Show Answer Button or Answer */}\n        {!showAnswer ? (\n          <button\n            onClick={() => setShowAnswer(true)}\n            className=\"w-full bg-muted text-foreground py-3 rounded-lg font-medium hover:bg-muted/80 transition-colors duration-200 border border-border\"\n            data-testid=\"show-answer-button\"\n          >\n            Cevabı Göster\n          </button>\n        ) : (\n          <div className=\"space-y-4\">\n            {/* Answer Card */}\n            <div className=\"bg-gradient-to-br from-green-50 to-green-100 dark:from-green-900/20 dark:to-green-800/20 border border-green-200 dark:border-green-800 rounded-xl p-6 min-h-[120px]\">\n              <div className=\"text-xs text-green-700 dark:text-green-400 font-medium mb-2\">CEVAP</div>\n              <p className=\"text-foreground font-medium text-base leading-relaxed\" data-testid=\"flashcard-answer\">\n                {currentCard.answer}\n              </p>\n            </div>\n\n            {/* Review Buttons */}\n            <div className=\"space-y-2\">\n              <div className=\"grid grid-cols-3 gap-2\">\n                <button\n                  onClick={() => handleReview('hard')}\n                  className=\"flex flex-col items-center gap-1 p-3 bg-red-50 dark:bg-red-900/30 border border-red-200 dark:border-red-800 rounded-lg text-red-700 dark:text-red-300 hover:bg-red-100 dark:hover:bg-red-900/50 transition-colors duration-200\"\n                  disabled={reviewCardMutation.isPending}\n                  data-testid=\"review-hard-button\"\n                >\n                  <XCircle className=\"h-4 w-4\" />\n                  <span className=\"text-xs font-medium\">Zor</span>\n                  <span className=\"text-xs opacity-75\">1 gün</span>\n                </button>\n                <button\n                  onClick={() => handleReview('medium')}\n                  className=\"flex flex-col items-center gap-1 p-3 bg-yellow-50 dark:bg-yellow-900/30 border border-yellow-200 dark:border-yellow-800 rounded-lg text-yellow-700 dark:text-yellow-300 hover:bg-yellow-100 dark:hover:bg-yellow-900/50 transition-colors duration-200\"\n                  disabled={reviewCardMutation.isPending}\n                  data-testid=\"review-medium-button\"\n                >\n                  <AlertCircle className=\"h-4 w-4\" />\n                  <span className=\"text-xs font-medium\">Orta</span>\n                  <span className=\"text-xs opacity-75\">2-4 gün</span>\n                </button>\n                <button\n                  onClick={() => handleReview('easy')}\n                  className=\"flex flex-col items-center gap-1 p-3 bg-green-50 dark:bg-green-900/30 border border-green-200 dark:border-green-800 rounded-lg text-green-700 dark:text-green-300 hover:bg-green-100 dark:hover:bg-green-900/50 transition-colors duration-200\"\n                  disabled={reviewCardMutation.isPending}\n                  data-testid=\"review-easy-button\"\n                >\n                  <CheckCircle className=\"h-4 w-4\" />\n                  <span className=\"text-xs font-medium\">Kolay</span>\n                  <span className=\"text-xs opacity-75\">3+ gün</span>\n                </button>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Card Progress */}\n        <div className=\"text-xs text-muted-foreground text-center pt-2 border-t border-border\">\n          İnceleme: {parseInt(currentCard.reviewCount) + 1} • \n          Kalan: {dueCards.length - 1} kart\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":17247},"client/src/components/enhanced-weather-widget.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Droplets, Wind, Eye, Thermometer, Sun, Moon, Activity, Shirt, Plane, Car, Heart, Dumbbell, CloudRain, Gauge, Sunrise, Sunset, Clock, ArrowUp, ArrowDown, Calendar } from \"lucide-react\";\nimport { useEffect, useState } from \"react\";\n\ninterface WeatherData {\n  location: string;\n  current: {\n    temperature: number;\n    description: string;\n    emoji: string;\n    humidity: number;\n    windSpeed: number;\n    windDirection: string;\n    windDescription: string;\n    feelsLike: number;\n    pressure: number;\n    visibility: number;\n    precipitation: number;\n  };\n  hourlyForecast: Array<{\n    time: string;\n    hour: number;\n    temperature: number;\n    emoji: string;\n    humidity: number;\n    windSpeed: number;\n    windDirection: number;\n    precipitation: number;\n  }>;\n  sunData: {\n    sunrise: string;\n    sunset: string;\n    dayLength: string;\n    sunProgress: number;\n  };\n  forecast: Array<{\n    date: string;\n    dayName: string;\n    temperature: {\n      max: number;\n      min: number;\n    };\n    description: string;\n    emoji: string;\n    humidity: number;\n    windSpeed: number;\n  }>;\n  uvIndex: {\n    value: number;\n    level: string;\n    description: string;\n  };\n  airQuality: {\n    aqi: number;\n    level: string;\n    description: string;\n    components: {\n      pm2_5: number;\n      pm10: number;\n      o3: number;\n    };\n  } | null;\n  lifeIndices: {\n    exercise: {\n      level: string;\n      emoji: string;\n      description: string;\n    };\n    clothing: {\n      level: string;\n      emoji: string;\n      description: string;\n    };\n    travel: {\n      level: string;\n      emoji: string;\n      description: string;\n    };\n    skin: {\n      level: string;\n      emoji: string;\n      description: string;\n    };\n    driving: {\n      level: string;\n      emoji: string;\n      description: string;\n    };\n    comfort: {\n      level: string;\n      emoji: string;\n      description: string;\n    };\n  };\n}\n\nexport function EnhancedWeatherWidget() {\n  const [currentTime, setCurrentTime] = useState(new Date());\n  \n  useEffect(() => {\n    const timer = setInterval(() => setCurrentTime(new Date()), 60000);\n    return () => clearInterval(timer);\n  }, []);\n\n  const { data: weather, isLoading, error } = useQuery<WeatherData>({\n    queryKey: [\"/api/weather\"],\n    queryFn: async () => {\n      const response = await fetch(`/api/weather`);\n      if (!response.ok) throw new Error('Failed to fetch weather data');\n      return response.json();\n    },\n    refetchInterval: 10 * 60 * 1000, // Refetch every 10 minutes\n    staleTime: 5 * 60 * 1000, // Consider data stale after 5 minutes\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"bg-gradient-to-br from-card to-card/80 rounded-xl border border-border/50 p-4 transition-all duration-300 hover:shadow-lg backdrop-blur-sm\">\n        <h3 className=\"text-lg font-semibold text-foreground mb-3 flex items-center\">\n          <Sun className=\"h-5 w-5 mr-2 text-primary animate-spin\" />\n          Hava Durumu\n        </h3>\n        <div className=\"text-center\">\n          <div className=\"text-3xl mb-2\">🔄</div>\n          <div className=\"text-muted-foreground mb-2\">Hava durumu yükleniyor...</div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"bg-gradient-to-br from-card to-card/80 rounded-xl border border-border/50 p-4 transition-all duration-300 hover:shadow-lg backdrop-blur-sm\">\n        <h3 className=\"text-lg font-semibold text-foreground mb-3 flex items-center\">\n          <Sun className=\"h-5 w-5 mr-2 text-destructive\" />\n          Hava Durumu\n        </h3>\n        <div className=\"text-center\">\n          <div className=\"text-3xl mb-2\">⚠️</div>\n          <div className=\"text-muted-foreground mb-2\">Hava durumu yüklenemedi</div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!weather) return null;\n\n  // Helper function to get wind direction\n  const getWindDirection = (degree: number) => {\n    const directions = [\"K\", \"KKD\", \"KD\", \"DKD\", \"D\", \"DGD\", \"GD\", \"GGD\", \"G\", \"GGB\", \"GB\", \"BGB\", \"B\", \"BKB\", \"KB\", \"KKB\"];\n    const index = Math.round(degree / 22.5) % 16;\n    return directions[index];\n  };\n\n  // Helper function to get wind description\n  const getWindDescription = (speed: number) => {\n    if (speed < 1) return \"sakin\";\n    if (speed < 6) return \"hafif esinti\";\n    if (speed < 12) return \"meltem\";\n    if (speed < 20) return \"orta rüzgar\";\n    if (speed < 29) return \"güçlü rüzgar\";\n    return \"fırtına\";\n  };\n\n  // Get background class based on weather\n  const getWeatherBackground = () => {\n    const weatherId = weather.hourlyForecast[0]?.emoji || weather.current.emoji;\n    if (weatherId.includes('☀️') || weatherId.includes('🌤️')) return 'from-yellow-300/20 via-orange-300/20 to-blue-300/20';\n    if (weatherId.includes('🌧️') || weatherId.includes('⛈️')) return 'from-gray-400/20 via-blue-400/20 to-gray-600/20';\n    if (weatherId.includes('❄️')) return 'from-blue-100/30 via-white/20 to-blue-200/30';\n    if (weatherId.includes('☁️') || weatherId.includes('⛅')) return 'from-gray-300/20 via-gray-100/20 to-gray-400/20';\n    return 'from-blue-400/20 via-indigo-400/20 to-purple-400/20';\n  };\n\n  // Calculate best time to go outside\n  const getBestOutdoorTime = () => {\n    const now = new Date();\n    const currentHour = now.getHours();\n    let bestHour = currentHour;\n    let bestTemp = weather.current.temperature;\n    let reason = \"Şu anda uygun\";\n\n    weather.hourlyForecast.forEach((hour) => {\n      const temp = hour.temperature;\n      const hourTime = hour.hour;\n      \n      // Prefer temperatures between 20-25°C, avoid extreme hours\n      if (hourTime >= 8 && hourTime <= 20) {\n        if (Math.abs(temp - 22) < Math.abs(bestTemp - 22)) {\n          bestTemp = temp;\n          bestHour = hourTime;\n          reason = `${hourTime}:00'da ${temp}°C ile ideal`;\n        }\n      }\n    });\n\n    return reason;\n  };\n\n  // Get health advice based on weather\n  const getHealthAdvice = () => {\n    const uvLevel = weather.uvIndex.value;\n    const humidity = weather.current.humidity;\n    const airQuality = weather.airQuality;\n    \n    if (uvLevel > 7) return \"☀️ UV çok yüksek - güneş kremi ve şapka şart\";\n    if (airQuality && airQuality.aqi > 3) return \"💨 Hava kalitesi düşük - dışarı çıkarken dikkat\";\n    if (humidity > 80) return \"💧 Yüksek nem - bol su için ve hafif giyinin\";\n    if (humidity < 30) return \"🌪️ Kuru hava - cilt nemlendiricisi kullanın\";\n    return \"✅ Sağlıklı hava koşulları\";\n  };\n\n  // Get sleep index\n  const getSleepIndex = () => {\n    const temp = weather.current.temperature;\n    const humidity = weather.current.humidity;\n    const airQuality = weather.airQuality?.aqi || 2;\n    \n    let score = 100;\n    \n    // Ideal sleep temp 18-22°C\n    if (temp < 16 || temp > 24) score -= 30;\n    else if (temp < 18 || temp > 22) score -= 15;\n    \n    // Ideal humidity 40-60%\n    if (humidity < 30 || humidity > 70) score -= 20;\n    else if (humidity < 40 || humidity > 60) score -= 10;\n    \n    // Air quality impact\n    if (airQuality > 3) score -= 25;\n    else if (airQuality > 2) score -= 10;\n    \n    score = Math.max(0, Math.min(100, score));\n    \n    let level = \"Mükemmel\";\n    let advice = \"Rahat uyku için ideal koşullar\";\n    \n    if (score < 50) {\n      level = \"Zor\";\n      advice = \"Klima/ısıtıcı ve havalandırma önerilir\";\n    } else if (score < 70) {\n      level = \"Orta\";\n      advice = \"Oda sıcaklığını ayarlayın\";\n    } else if (score < 85) {\n      level = \"İyi\";\n      advice = \"Güzel bir uyku geçireceksiniz\";\n    }\n    \n    return { score: Math.round(score), level, advice };\n  };\n\n  const sleepIndex = getSleepIndex();\n  const bestOutdoorTime = getBestOutdoorTime();\n  const healthAdvice = getHealthAdvice();\n\n  return (\n    <div className={`bg-gradient-to-br ${getWeatherBackground()} from-card to-card/80 rounded-xl border border-border/50 p-6 transition-all duration-300 hover:shadow-lg backdrop-blur-sm overflow-hidden relative`}>\n      {/* Animated Weather Background Effects */}\n      {weather.current.emoji.includes('🌧️') && (\n        <div className=\"absolute inset-0 pointer-events-none\">\n          <div className=\"rain-animation\"></div>\n        </div>\n      )}\n      \n      {weather.current.emoji.includes('☀️') && (\n        <div className=\"absolute inset-0 pointer-events-none\">\n          <div className=\"sun-rays-animation\"></div>\n        </div>\n      )}\n\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h3 className=\"text-2xl font-bold text-foreground flex items-center\">\n            <span className=\"text-3xl mr-3\">{weather.current.emoji}</span>\n            {weather.location}\n          </h3>\n          <p className=\"text-sm text-muted-foreground capitalize\">{weather.current.description}</p>\n        </div>\n        <div className=\"text-right\">\n          <div className=\"text-4xl font-bold text-foreground\">{weather.current.temperature}°C</div>\n          <div className=\"text-sm text-muted-foreground\">Hissedilen: {weather.current.feelsLike}°C</div>\n        </div>\n      </div>\n\n      {/* Main Weather Details */}\n      <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-4 mb-6\">\n        <div className=\"bg-white/10 dark:bg-black/10 rounded-lg p-3 text-center hover:bg-white/20 dark:hover:bg-black/20 transition-all duration-300 hover:scale-105 cursor-pointer group\">\n          <div className=\"flex items-center justify-center mb-2\">\n            <CloudRain className=\"h-4 w-4 text-blue-500 mr-1 group-hover:scale-110 transition-transform\" />\n            <span className=\"text-xs text-muted-foreground\">Yağış</span>\n          </div>\n          <div className=\"text-lg font-bold text-foreground\">{weather.current.precipitation.toFixed(1)} mm</div>\n          <div className=\"text-xs text-muted-foreground\">\n            {weather.current.precipitation > 0 ? `%${Math.round(weather.current.precipitation * 10)} nem` : 'Şu anda yağmur yok'}\n          </div>\n        </div>\n\n        <div className=\"bg-white/10 dark:bg-black/10 rounded-lg p-3 text-center hover:bg-white/20 dark:hover:bg-black/20 transition-all duration-300 hover:scale-105 cursor-pointer group\">\n          <div className=\"flex items-center justify-center mb-2\">\n            <Wind className=\"h-4 w-4 text-gray-500 mr-1 group-hover:scale-110 transition-transform\" />\n            <span className=\"text-xs text-muted-foreground\">Rüzgar</span>\n          </div>\n          <div className=\"text-lg font-bold text-foreground\">{weather.current.windSpeed} km/h</div>\n          <div className=\"text-xs text-muted-foreground\">\n            {getWindDirection(Number(weather.current.windDirection))} | {getWindDescription(weather.current.windSpeed)}\n          </div>\n        </div>\n\n        {weather.airQuality && (\n          <div className=\"bg-white/10 dark:bg-black/10 rounded-lg p-3 text-center hover:bg-white/20 dark:hover:bg-black/20 transition-all duration-300 hover:scale-105 cursor-pointer group\">\n            <div className=\"flex items-center justify-center mb-2\">\n              <Eye className=\"h-4 w-4 text-green-500 mr-1 group-hover:scale-110 transition-transform\" />\n              <span className=\"text-xs text-muted-foreground\">Hava Kalitesi</span>\n            </div>\n            <div className=\"text-lg font-bold text-foreground\">{weather.airQuality.aqi * 20}</div>\n            <div className=\"text-xs text-muted-foreground\">{weather.airQuality.level} | {weather.airQuality.description}</div>\n          </div>\n        )}\n\n        <div className=\"bg-white/10 dark:bg-black/10 rounded-lg p-3 text-center hover:bg-white/20 dark:hover:bg-black/20 transition-all duration-300 hover:scale-105 cursor-pointer group\">\n          <div className=\"flex items-center justify-center mb-2\">\n            <Sun className=\"h-4 w-4 text-yellow-500 mr-1 group-hover:scale-110 transition-transform\" />\n            <span className=\"text-xs text-muted-foreground\">UV Endeksi</span>\n          </div>\n          <div className=\"text-lg font-bold text-foreground\">{weather.uvIndex.value}</div>\n          <div className=\"text-xs text-muted-foreground\">{weather.uvIndex.level} | {weather.uvIndex.description}</div>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 mb-6\">\n        <div className=\"bg-white/10 dark:bg-black/10 rounded-lg p-3 text-center\">\n          <div className=\"flex items-center justify-center mb-2\">\n            <Droplets className=\"h-4 w-4 text-blue-500 mr-1\" />\n            <span className=\"text-xs text-muted-foreground\">Nem</span>\n          </div>\n          <div className=\"text-lg font-bold text-foreground\">%{weather.current.humidity}</div>\n          <div className=\"text-xs text-muted-foreground\">\n            {weather.current.humidity > 70 ? 'Yüksek nem seviyesi' : \n             weather.current.humidity > 30 ? 'Mevcut ortamda orta seviye nem' : 'Düşük nem seviyesi'}\n          </div>\n        </div>\n\n        <div className=\"bg-white/10 dark:bg-black/10 rounded-lg p-3 text-center\">\n          <div className=\"flex items-center justify-center mb-2\">\n            <Clock className=\"h-4 w-4 text-purple-500 mr-1\" />\n            <span className=\"text-xs text-muted-foreground\">En İyi Saat</span>\n          </div>\n          <div className=\"text-sm font-bold text-foreground\">{bestOutdoorTime}</div>\n          <div className=\"text-xs text-muted-foreground\">Dışarı çıkmak için</div>\n        </div>\n      </div>\n\n      {/* Sunrise/Sunset Arc with Moving Sun */}\n      <div className=\"bg-gradient-to-t from-orange-100/20 via-yellow-50/20 to-blue-100/20 dark:from-orange-900/20 dark:via-yellow-900/20 dark:to-blue-900/20 rounded-lg p-4 mb-6\">\n        <div className=\"flex justify-between items-center text-xs text-muted-foreground mb-2\">\n          <div className=\"flex items-center\">\n            <Sunrise className=\"h-4 w-4 mr-1 text-orange-500\" />\n            <span>{weather.sunData.sunrise}</span>\n          </div>\n          <span className=\"font-medium text-foreground\">Gün Uzunluğu: {weather.sunData.dayLength}</span>\n          <div className=\"flex items-center\">\n            <Sunset className=\"h-4 w-4 mr-1 text-orange-600\" />\n            <span>{weather.sunData.sunset}</span>\n          </div>\n        </div>\n        \n        <div className=\"relative h-16 flex items-end justify-center\">\n          <svg viewBox=\"0 0 200 60\" className=\"w-full h-full\">\n            {/* Sunrise/Sunset Arc */}\n            <path\n              d=\"M 20 50 Q 100 10 180 50\"\n              stroke=\"currentColor\"\n              strokeWidth=\"2\"\n              fill=\"none\"\n              className=\"text-orange-400/60\"\n            />\n            \n            {/* Sun Position */}\n            <circle\n              cx={20 + (160 * (weather.sunData.sunProgress / 100))}\n              cy={50 - (40 * Math.sin(Math.PI * (weather.sunData.sunProgress / 100)))}\n              r=\"6\"\n              fill=\"currentColor\"\n              className=\"text-yellow-500 animate-pulse\"\n            />\n            \n            {/* Sun Rays */}\n            <g className=\"text-yellow-400 opacity-70\">\n              {[0, 45, 90, 135, 180, 225, 270, 315].map((angle, i) => {\n                const sunX = 20 + (160 * (weather.sunData.sunProgress / 100));\n                const sunY = 50 - (40 * Math.sin(Math.PI * (weather.sunData.sunProgress / 100)));\n                const radians = (angle * Math.PI) / 180;\n                const x1 = sunX + 8 * Math.cos(radians);\n                const y1 = sunY + 8 * Math.sin(radians);\n                const x2 = sunX + 12 * Math.cos(radians);\n                const y2 = sunY + 12 * Math.sin(radians);\n                \n                return (\n                  <line\n                    key={i}\n                    x1={x1}\n                    y1={y1}\n                    x2={x2}\n                    y2={y2}\n                    stroke=\"currentColor\"\n                    strokeWidth=\"1\"\n                    className=\"animate-pulse\"\n                    style={{ animationDelay: `${i * 0.1}s` }}\n                  />\n                );\n              })}\n            </g>\n          </svg>\n        </div>\n      </div>\n\n      {/* Hourly Weather Forecast - Simplified */}\n      <div className=\"bg-white/5 dark:bg-black/5 rounded-lg p-4 mb-6\">\n        <h4 className=\"text-lg font-semibold text-foreground mb-4 flex items-center\">\n          <Clock className=\"h-5 w-5 mr-2 text-primary\" />\n          Saatlik Hava Durumu\n        </h4>\n        <div className=\"grid grid-cols-8 gap-2\">\n          {weather.hourlyForecast.slice(0, 8).map((hour, index) => (\n            <div key={index} className=\"text-center bg-white/10 dark:bg-black/10 rounded-lg p-3 hover:scale-105 transition-transform\">\n              <div className=\"text-xs text-muted-foreground mb-2\">\n                {hour.hour === currentTime.getHours() ? 'Şimdi' : `${hour.hour.toString().padStart(2, '0')}:00`}\n              </div>\n              <div className=\"text-2xl mb-2 hover:scale-110 transition-transform\">{hour.emoji}</div>\n              <div className=\"text-sm font-bold text-foreground mb-1\">{hour.temperature}°C</div>\n              <div className=\"text-xs text-muted-foreground flex items-center justify-center\">\n                <Droplets className=\"h-3 w-3 mr-1\" />\n                {Math.round(hour.precipitation)}mm\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Health & Lifestyle Advice */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 mb-6\">\n        <div className=\"bg-white/5 dark:bg-black/5 rounded-lg p-4\">\n          <div className=\"flex items-center mb-3\">\n            <Heart className=\"h-5 w-5 mr-2 text-red-500\" />\n            <span className=\"font-semibold text-foreground\">Sağlık Tavsiyesi</span>\n          </div>\n          <p className=\"text-sm text-muted-foreground\">{healthAdvice}</p>\n        </div>\n        \n        <div className=\"bg-white/5 dark:bg-black/5 rounded-lg p-4\">\n          <div className=\"flex items-center mb-3\">\n            <Moon className=\"h-5 w-5 mr-2 text-indigo-500\" />\n            <span className=\"font-semibold text-foreground\">Uyku Endeksi</span>\n          </div>\n          <div className=\"flex items-center mb-2\">\n            <div className=\"text-2xl font-bold text-foreground mr-2\">{sleepIndex.score}</div>\n            <div className=\"text-sm text-muted-foreground\">{sleepIndex.level}</div>\n          </div>\n          <p className=\"text-xs text-muted-foreground\">{sleepIndex.advice}</p>\n        </div>\n        \n        <div className=\"bg-white/5 dark:bg-black/5 rounded-lg p-4\">\n          <div className=\"flex items-center mb-3\">\n            <Clock className=\"h-5 w-5 mr-2 text-purple-500\" />\n            <span className=\"font-semibold text-foreground\">Dışarı Çıkma Önerisi</span>\n          </div>\n          <p className=\"text-sm text-muted-foreground\">{bestOutdoorTime}</p>\n        </div>\n      </div>\n\n      {/* 7-Day Forecast - Enhanced */}\n      <div className=\"bg-white/5 dark:bg-black/5 rounded-lg p-4 mb-6\">\n        <h4 className=\"text-lg font-semibold text-foreground mb-4 flex items-center\">\n          <Calendar className=\"h-5 w-5 mr-2 text-primary\" />\n          7 Günlük Hava Durumu Tahmini\n        </h4>\n        <div className=\"grid grid-cols-7 gap-2\">\n          {weather.forecast.map((day, index) => (\n            <div key={index} className=\"text-center bg-white/10 dark:bg-black/10 rounded-lg p-3 hover:scale-105 transition-all duration-200\">\n              <div className=\"text-xs font-medium text-muted-foreground mb-2\">\n                {index === 0 ? \"Bugün\" : day.dayName}\n              </div>\n              <div className=\"text-2xl mb-3 hover:scale-110 transition-transform\">{day.emoji}</div>\n              \n              <div className=\"flex items-center justify-center space-x-1 mb-2\">\n                <ArrowUp className=\"h-3 w-3 text-red-500\" />\n                <span className=\"text-sm font-bold text-foreground\">{day.temperature.max}°</span>\n              </div>\n              \n              {/* Enhanced Temperature Range Bar */}\n              <div className=\"relative h-16 w-3 mx-auto bg-gradient-to-t from-gray-800 via-purple-800 to-black dark:from-gray-900 dark:via-purple-900 dark:to-black rounded-full overflow-hidden mb-2\">\n                <div \n                  className=\"absolute bottom-0 w-full bg-gradient-to-t from-purple-600 via-purple-400 to-gray-900 rounded-full transition-all duration-500\"\n                  style={{\n                    height: `${Math.min(90, Math.max(30, ((day.temperature.max - day.temperature.min + 10) / 35) * 100))}%`\n                  }}\n                ></div>\n                \n                {/* Temperature markers */}\n                <div className=\"absolute inset-0 flex flex-col justify-between py-1\">\n                  <div className=\"w-full h-0.5 bg-red-600/50 rounded\"></div>\n                  <div className=\"w-full h-0.5 bg-blue-600/50 rounded\"></div>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center justify-center space-x-1 mb-2\">\n                <ArrowDown className=\"h-3 w-3 text-blue-500\" />\n                <span className=\"text-xs font-medium text-muted-foreground\">{day.temperature.min}°</span>\n              </div>\n              \n              <div className=\"text-xs text-muted-foreground capitalize truncate\" title={day.description}>\n                {day.description.length > 10 ? day.description.substring(0, 10) + '...' : day.description}\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Enhanced Lifestyle Index */}\n      <div className=\"bg-white/5 dark:bg-black/5 rounded-lg p-4\">\n        <h4 className=\"text-lg font-semibold text-foreground mb-4 flex items-center\">\n          <Activity className=\"h-5 w-5 mr-2 text-primary\" />\n          Yaşam Endeksi - Hava Durumuna Göre Öneriler\n        </h4>\n        <div className=\"grid grid-cols-2 lg:grid-cols-6 gap-3\">\n          <div className=\"bg-white/10 dark:bg-black/10 rounded-lg p-3 text-center hover:scale-105 transition-all\">\n            <div className=\"text-2xl mb-2\">{weather.lifeIndices.exercise.emoji}</div>\n            <div className=\"text-xs text-muted-foreground mb-1\">Egzersiz</div>\n            <div className=\"text-sm font-bold text-foreground mb-1\">{weather.lifeIndices.exercise.level}</div>\n            <div className=\"text-xs text-muted-foreground\">{weather.lifeIndices.exercise.description.substring(0, 20)}...</div>\n          </div>\n          \n          <div className=\"bg-white/10 dark:bg-black/10 rounded-lg p-3 text-center hover:scale-105 transition-all\">\n            <div className=\"text-2xl mb-2\">{weather.lifeIndices.clothing.emoji}</div>\n            <div className=\"text-xs text-muted-foreground mb-1\">Giyim</div>\n            <div className=\"text-sm font-bold text-foreground mb-1\">{weather.lifeIndices.clothing.level}</div>\n            <div className=\"text-xs text-muted-foreground\">{weather.lifeIndices.clothing.description.substring(0, 20)}...</div>\n          </div>\n          \n          <div className=\"bg-white/10 dark:bg-black/10 rounded-lg p-3 text-center hover:scale-105 transition-all\">\n            <div className=\"text-2xl mb-2\">{weather.lifeIndices.travel.emoji}</div>\n            <div className=\"text-xs text-muted-foreground mb-1\">Seyahat</div>\n            <div className=\"text-sm font-bold text-foreground mb-1\">{weather.lifeIndices.travel.level}</div>\n            <div className=\"text-xs text-muted-foreground\">{weather.lifeIndices.travel.description.substring(0, 20)}...</div>\n          </div>\n          \n          <div className=\"bg-white/10 dark:bg-black/10 rounded-lg p-3 text-center hover:scale-105 transition-all\">\n            <div className=\"text-2xl mb-2\">{weather.lifeIndices.driving.emoji}</div>\n            <div className=\"text-xs text-muted-foreground mb-1\">Sürüş</div>\n            <div className=\"text-sm font-bold text-foreground mb-1\">{weather.lifeIndices.driving.level}</div>\n            <div className=\"text-xs text-muted-foreground\">{weather.lifeIndices.driving.description.substring(0, 20)}...</div>\n          </div>\n          \n          <div className=\"bg-white/10 dark:bg-black/10 rounded-lg p-3 text-center hover:scale-105 transition-all\">\n            <div className=\"text-2xl mb-2\">{weather.lifeIndices.skin.emoji}</div>\n            <div className=\"text-xs text-muted-foreground mb-1\">Cilt Bakımı</div>\n            <div className=\"text-sm font-bold text-foreground mb-1\">{weather.lifeIndices.skin.level}</div>\n            <div className=\"text-xs text-muted-foreground\">{weather.lifeIndices.skin.description.substring(0, 20)}...</div>\n          </div>\n          \n          <div className=\"bg-white/10 dark:bg-black/10 rounded-lg p-3 text-center hover:scale-105 transition-all\">\n            <div className=\"text-2xl mb-2\">💤</div>\n            <div className=\"text-xs text-muted-foreground mb-1\">Uyku</div>\n            <div className=\"text-sm font-bold text-foreground mb-1\">{sleepIndex.level}</div>\n            <div className=\"text-xs text-muted-foreground\">%{sleepIndex.score}</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":25244},"client/src/components/edit-task-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { Task, InsertTask } from \"@shared/schema\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface EditTaskModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  task: Task | null;\n}\n\nexport function EditTaskModal({ open, onOpenChange, task }: EditTaskModalProps) {\n  const [formData, setFormData] = useState<{\n    title: string;\n    description: string;\n    priority: \"low\" | \"medium\" | \"high\";\n    category: \"genel\" | \"turkce\" | \"sosyal\" | \"matematik\" | \"fizik\" | \"kimya\" | \"biyoloji\" | \"ayt-matematik\" | \"ayt-fizik\" | \"ayt-kimya\" | \"ayt-biyoloji\";\n    color: string;\n    dueDate: string;\n  }>({\n    title: \"\",\n    description: \"\",\n    priority: \"medium\",\n    category: \"genel\",\n    color: \"#8B5CF6\",\n    dueDate: new Date().toISOString().split('T')[0],\n  });\n\n  const { toast } = useToast();\n\n  // Update form data when task changes\n  useEffect(() => {\n    if (task) {\n      setFormData({\n        title: task.title || \"\",\n        description: task.description || \"\",\n        priority: task.priority || \"medium\",\n        category: task.category || \"genel\",\n        color: task.color || \"#8B5CF6\",\n        dueDate: task.dueDate ? task.dueDate.split('T')[0] : new Date().toISOString().split('T')[0],\n      });\n    }\n  }, [task]);\n\n  const updateTaskMutation = useMutation({\n    mutationFn: (data: { id: string; updates: Partial<InsertTask> }) => \n      apiRequest(\"PUT\", `/api/tasks/${data.id}`, data.updates),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tasks\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/calendar\"] });\n      toast({\n        title: \"Görev güncellendi\",\n        description: \"Görev başarıyla güncellendi.\",\n      });\n      onOpenChange(false);\n    },\n    onError: () => {\n      toast({\n        title: \"Hata\",\n        description: \"Görev güncellenemedi.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!task) return;\n\n    if (!formData.title.trim()) {\n      toast({\n        title: \"Uyarı\",\n        description: \"Görev başlığı gereklidir.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    updateTaskMutation.mutate({\n      id: task.id,\n      updates: {\n        title: formData.title.trim(),\n        description: formData.description.trim() || undefined,\n        priority: formData.priority,\n        category: formData.category,\n        color: formData.color,\n        dueDate: formData.dueDate,\n      }\n    });\n  };\n\n  const handleCancel = () => {\n    onOpenChange(false);\n  };\n\n  if (!task) return null;\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-lg\">\n        <DialogHeader>\n          <DialogTitle>Görevi Düzenle</DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          {/* Task Title */}\n          <div>\n            <Label htmlFor=\"edit-task-title\">Görev Başlığı</Label>\n            <Input\n              id=\"edit-task-title\"\n              placeholder=\"Görev başlığını girin...\"\n              value={formData.title}\n              onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}\n              data-testid=\"input-edit-task-title\"\n            />\n          </div>\n\n          {/* Task Description */}\n          <div>\n            <Label htmlFor=\"edit-task-description\">Açıklama</Label>\n            <Textarea\n              id=\"edit-task-description\"\n              placeholder=\"Görev detaylarını açıklayın...\"\n              value={formData.description}\n              onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n              className=\"h-20 resize-none\"\n              data-testid=\"input-edit-task-description\"\n            />\n          </div>\n\n          {/* Priority & Category */}\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"edit-task-priority\">Öncelik</Label>\n              <Select\n                value={formData.priority}\n                onValueChange={(value: \"low\" | \"medium\" | \"high\") => \n                  setFormData(prev => ({ ...prev, priority: value }))\n                }\n              >\n                <SelectTrigger data-testid=\"select-edit-task-priority\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"low\">Düşük</SelectItem>\n                  <SelectItem value=\"medium\">Orta</SelectItem>\n                  <SelectItem value=\"high\">Yüksek</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label htmlFor=\"edit-task-category\">Ders Kategorisi</Label>\n              <Select\n                value={formData.category}\n                onValueChange={(value: \"genel\" | \"turkce\" | \"sosyal\" | \"matematik\" | \"fizik\" | \"kimya\" | \"biyoloji\" | \"ayt-matematik\" | \"ayt-fizik\" | \"ayt-kimya\" | \"ayt-biyoloji\") => \n                  setFormData(prev => ({ ...prev, category: value }))\n                }\n              >\n                <SelectTrigger data-testid=\"select-edit-task-category\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"genel\">Genel</SelectItem>\n                  <div className=\"px-2 py-1 text-xs font-semibold text-muted-foreground border-b\">TYT Dersleri</div>\n                  <SelectItem value=\"turkce\">Türkçe</SelectItem>\n                  <SelectItem value=\"sosyal\">Sosyal Bilimler</SelectItem>\n                  <SelectItem value=\"matematik\">Matematik</SelectItem>\n                  <SelectItem value=\"fizik\">Fizik</SelectItem>\n                  <SelectItem value=\"kimya\">Kimya</SelectItem>\n                  <SelectItem value=\"biyoloji\">Biyoloji</SelectItem>\n                  <div className=\"px-2 py-1 text-xs font-semibold text-muted-foreground border-b border-t\">AYT Dersleri</div>\n                  <SelectItem value=\"ayt-matematik\">AYT Matematik</SelectItem>\n                  <SelectItem value=\"ayt-fizik\">AYT Fizik</SelectItem>\n                  <SelectItem value=\"ayt-kimya\">AYT Kimya</SelectItem>\n                  <SelectItem value=\"ayt-biyoloji\">AYT Biyoloji</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          {/* Due Date */}\n          <div>\n            <Label htmlFor=\"edit-task-due-date\">Son Tarih</Label>\n            <Input\n              id=\"edit-task-due-date\"\n              type=\"date\"\n              value={formData.dueDate}\n              onChange={(e) => setFormData(prev => ({ ...prev, dueDate: e.target.value }))}\n              className=\"w-full\"\n              data-testid=\"input-edit-task-due-date\"\n            />\n          </div>\n\n          {/* Color Picker */}\n          <div>\n            <Label htmlFor=\"edit-task-color\">Görev Rengi</Label>\n            <div className=\"flex items-center space-x-3\">\n              <Input\n                id=\"edit-task-color\"\n                type=\"color\"\n                value={formData.color}\n                onChange={(e) => setFormData(prev => ({ ...prev, color: e.target.value }))}\n                className=\"w-16 h-10 rounded cursor-pointer\"\n                data-testid=\"input-edit-task-color\"\n              />\n              <div className=\"flex space-x-2\">\n                {[\"#8B5CF6\", \"#EC4899\", \"#10B981\", \"#F59E0B\", \"#EF4444\", \"#3B82F6\"].map((color) => (\n                  <button\n                    key={color}\n                    type=\"button\"\n                    onClick={() => setFormData(prev => ({ ...prev, color }))}\n                    className={`w-6 h-6 rounded-full border-2 ${\n                      formData.color === color ? \"border-gray-400\" : \"border-transparent\"\n                    }`}\n                    style={{ backgroundColor: color }}\n                    title={color}\n                  />\n                ))}\n              </div>\n            </div>\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"flex space-x-3 pt-4\">\n            <Button \n              type=\"submit\"\n              disabled={updateTaskMutation.isPending}\n              className=\"flex-1\"\n              data-testid=\"button-update-task\"\n            >\n              {updateTaskMutation.isPending ? \"Güncelleniyor...\" : \"Güncelle\"}\n            </Button>\n            <Button \n              type=\"button\"\n              variant=\"secondary\"\n              onClick={handleCancel}\n              className=\"flex-1\"\n              data-testid=\"button-cancel-edit-task\"\n            >\n              İptal\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":9352},"client/src/components/dashboard-summary-cards.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { TrendingUp, TrendingDown, Target, BookOpen, Award, Brain } from \"lucide-react\";\nimport { ExamResult, QuestionLog } from \"@shared/schema\";\n\nexport function DashboardSummaryCards() {\n  const { data: examResults = [] } = useQuery<ExamResult[]>({\n    queryKey: [\"/api/exam-results\"],\n  });\n  \n  const { data: questionLogs = [] } = useQuery<QuestionLog[]>({\n    queryKey: [\"/api/question-logs\"],\n  });\n  \n\n  // Calculate TYT/AYT averages from last 5 exams\n  const calculateNetAverages = () => {\n    // Sort by exam date descending to get actual last 5 exams\n    const sortedExams = [...examResults].sort((a, b) => new Date(b.exam_date).getTime() - new Date(a.exam_date).getTime());\n    const last5Exams = sortedExams.slice(0, 5);\n    const tytNets = last5Exams.filter(exam => exam.tyt_net !== undefined && exam.tyt_net !== null && exam.tyt_net !== '').map(exam => parseFloat(exam.tyt_net.toString()));\n    const aytNets = last5Exams.filter(exam => exam.ayt_net !== undefined && exam.ayt_net !== null && exam.ayt_net !== '').map(exam => parseFloat(exam.ayt_net.toString()));\n    \n    const tytAvg = tytNets.length > 0 ? tytNets.reduce((sum, net) => sum + net, 0) / tytNets.length : 0;\n    const aytAvg = aytNets.length > 0 ? aytNets.reduce((sum, net) => sum + net, 0) / aytNets.length : 0;\n    \n    return { tytAvg: tytAvg.toFixed(1), aytAvg: aytAvg.toFixed(1), examCount: last5Exams.length };\n  };\n\n  // Calculate total solved questions and daily average\n  const calculateQuestionStats = () => {\n    const totalCorrect = questionLogs.reduce((total, log) => total + (Number(log.correct_count) || 0), 0);\n    const totalWrong = questionLogs.reduce((total, log) => total + (Number(log.wrong_count) || 0), 0);\n    const totalBlank = questionLogs.reduce((total, log) => total + (Number(log.blank_count) || 0), 0);\n    const totalQuestions = totalCorrect + totalWrong + totalBlank;\n    \n    // Calculate daily average based on unique dates\n    const uniqueDates = Array.from(new Set(questionLogs.map(log => log.study_date)));\n    const dailyAverage = uniqueDates.length > 0 ? (totalQuestions / uniqueDates.length).toFixed(1) : '0';\n    \n    return { totalQuestions, dailyAverage, totalCorrect, activeDays: uniqueDates.length };\n  };\n\n  // Calculate strongest and weakest subjects based on success rates\n  const calculateSubjectPerformance = () => {\n    const subjectStats: { [key: string]: { correct: number; attempted: number } } = {};\n    \n    questionLogs.forEach(log => {\n      const subject = log.subject;\n      const correct = Number(log.correct_count) || 0;\n      const wrong = Number(log.wrong_count) || 0;\n      const blank = Number(log.blank_count) || 0;\n      // Calculate success rate excluding blanks (correct / (correct + wrong))\n      const attempted = correct + wrong;\n      const total = attempted + blank;\n      \n      if (!subjectStats[subject]) {\n        subjectStats[subject] = { correct: 0, attempted: 0 };\n      }\n      \n      subjectStats[subject].correct += correct;\n      subjectStats[subject].attempted += attempted;\n    });\n    \n    const subjects = Object.entries(subjectStats)\n      .map(([subject, stats]) => ({\n        subject,\n        successRate: stats.attempted > 0 ? (stats.correct / stats.attempted) * 100 : 0,\n        totalQuestions: stats.attempted\n      }))\n      .filter(s => s.totalQuestions >= 5) // Only consider subjects with at least 5 attempted questions\n      .sort((a, b) => b.successRate - a.successRate);\n    \n    const strongest = subjects[0];\n    const weakest = subjects[subjects.length - 1];\n    \n    return { strongest, weakest };\n  };\n\n  const netAverages = calculateNetAverages();\n  const questionStats = calculateQuestionStats();\n  const subjectPerformance = calculateSubjectPerformance();\n\n  return (\n    <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8\">\n      {/* TYT/AYT Net Averages Card */}\n      <div className=\"bg-card rounded-xl border border-border p-6 relative overflow-hidden\">\n        <div className=\"absolute top-0 right-0 w-20 h-20 bg-gradient-to-br from-blue-500/10 to-green-500/10 rounded-full blur-2xl\"></div>\n        <div className=\"relative\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div className=\"flex items-center\">\n              <Target className=\"h-5 w-5 mr-2 text-blue-600\" />\n              <h3 className=\"text-lg font-semibold text-foreground\">Deneme Net Ortalamaları</h3>\n            </div>\n            <div className=\"text-xs text-muted-foreground\">Son {netAverages.examCount} deneme</div>\n          </div>\n          \n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <div className=\"text-2xl font-bold text-blue-600\" data-testid=\"text-tyt-average\">\n                  {netAverages.tytAvg}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">TYT Ortalama</div>\n              </div>\n              <div className=\"p-2 bg-blue-50 dark:bg-blue-900/20 rounded-lg\">\n                <div className=\"text-xs font-medium text-blue-600\">TYT</div>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center justify-between\">\n              <div>\n                <div className=\"text-2xl font-bold text-green-600\" data-testid=\"text-ayt-average\">\n                  {netAverages.aytAvg}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">AYT Ortalama</div>\n              </div>\n              <div className=\"p-2 bg-green-50 dark:bg-green-900/20 rounded-lg\">\n                <div className=\"text-xs font-medium text-green-600\">AYT</div>\n              </div>\n            </div>\n            \n            {netAverages.examCount === 0 && (\n              <div className=\"text-center py-4 text-muted-foreground text-sm\">\n                Henüz deneme kaydı bulunmuyor\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Question Statistics Card */}\n      <div className=\"bg-card rounded-xl border border-border p-6 relative overflow-hidden\">\n        <div className=\"absolute top-0 right-0 w-20 h-20 bg-gradient-to-br from-purple-500/10 to-pink-500/10 rounded-full blur-2xl\"></div>\n        <div className=\"relative\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div className=\"flex items-center\">\n              <BookOpen className=\"h-5 w-5 mr-2 text-purple-600\" />\n              <h3 className=\"text-lg font-semibold text-foreground\">Soru İstatistikleri</h3>\n            </div>\n          </div>\n          \n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <div className=\"text-2xl font-bold text-foreground\" data-testid=\"text-total-questions\">\n                  {questionStats.totalQuestions.toLocaleString('tr-TR')}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Toplam Çözülen Soru</div>\n              </div>\n              <div className=\"p-2 bg-purple-50 dark:bg-purple-900/20 rounded-lg\">\n                <Brain className=\"h-4 w-4 text-purple-600\" />\n              </div>\n            </div>\n            \n            <div className=\"flex items-center justify-between\">\n              <div>\n                <div className=\"text-2xl font-bold text-green-600\" data-testid=\"text-daily-average\">\n                  {questionStats.dailyAverage}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Günlük Ortalama</div>\n              </div>\n              <div className=\"text-xs text-muted-foreground\">\n                {questionStats.activeDays} aktif gün\n              </div>\n            </div>\n            \n            <div className=\"pt-2 border-t border-border\">\n              <div className=\"flex justify-between text-xs\">\n                <span className=\"text-green-600\">Doğru: {questionStats.totalCorrect}</span>\n                <span className=\"text-muted-foreground\">\n                  Başarı: {(questionStats.totalQuestions - (questionLogs.reduce((total, log) => total + (Number(log.blank_count) || 0), 0))) > 0 ? ((questionStats.totalCorrect / (questionStats.totalQuestions - (questionLogs.reduce((total, log) => total + (Number(log.blank_count) || 0), 0)))) * 100).toFixed(1) : 0}%\n                </span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Subject Performance Card */}\n      <div className=\"bg-card rounded-xl border border-border p-6 relative overflow-hidden\">\n        <div className=\"absolute top-0 right-0 w-20 h-20 bg-gradient-to-br from-orange-500/10 to-red-500/10 rounded-full blur-2xl\"></div>\n        <div className=\"relative\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div className=\"flex items-center\">\n              <Award className=\"h-5 w-5 mr-2 text-orange-600\" />\n              <h3 className=\"text-lg font-semibold text-foreground\">Ders Performansı</h3>\n            </div>\n          </div>\n          \n          <div className=\"space-y-4\">\n            {subjectPerformance.strongest ? (\n              <>\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center\">\n                    <TrendingUp className=\"h-4 w-4 mr-2 text-green-600\" />\n                    <div>\n                      <div className=\"font-medium text-foreground\" data-testid=\"text-strongest-subject\">\n                        {subjectPerformance.strongest.subject}\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">En güçlü ders</div>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"text-lg font-bold text-green-600\">\n                      {subjectPerformance.strongest.successRate.toFixed(1)}%\n                    </div>\n                    <div className=\"text-xs text-muted-foreground\">\n                      {subjectPerformance.strongest.totalQuestions} soru\n                    </div>\n                  </div>\n                </div>\n                \n                {subjectPerformance.weakest && subjectPerformance.weakest.subject !== subjectPerformance.strongest.subject && (\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center\">\n                      <TrendingDown className=\"h-4 w-4 mr-2 text-red-600\" />\n                      <div>\n                        <div className=\"font-medium text-foreground\" data-testid=\"text-weakest-subject\">\n                          {subjectPerformance.weakest.subject}\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\">Geliştirilmesi gereken</div>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"text-lg font-bold text-red-600\">\n                        {subjectPerformance.weakest.successRate.toFixed(1)}%\n                      </div>\n                      <div className=\"text-xs text-muted-foreground\">\n                        {subjectPerformance.weakest.totalQuestions} soru\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </>\n            ) : (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                <Brain className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n                <p className=\"text-sm\">Yeterli veri bulunmuyor</p>\n                <p className=\"text-xs\">Her dersten en az 5 soru çözün</p>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":11849},"client/src/components/advanced-charts.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, RadarChart, PolarGrid, PolarAngleAxis, PolarRadiusAxis, Radar, BarChart, Bar, Cell } from \"recharts\";\nimport { TrendingUp, Target, Activity, AlertTriangle, BarChart3, Brain } from \"lucide-react\";\nimport { ExamResult, ExamSubjectNet } from \"@shared/schema\";\n\ninterface TopicStats {\n  topic: string;\n  wrongMentions: number;\n  totalSessions: number;\n  mentionFrequency: number;\n}\n\ninterface PriorityTopic {\n  topic: string;\n  priority: number;\n  lastSeen: string;\n  improvementNeeded: boolean;\n}\n\nexport function AdvancedCharts() {\n  const { data: examResults = [] } = useQuery<ExamResult[]>({\n    queryKey: [\"/api/exam-results\"],\n  });\n  \n  const { data: examSubjectNets = [] } = useQuery<ExamSubjectNet[]>({\n    queryKey: [\"/api/exam-subject-nets\"],\n  });\n\n  // NEW: Topic analytics queries\n  const { data: topicStats = [] } = useQuery<TopicStats[]>({\n    queryKey: [\"/api/topics/stats\"],\n  });\n\n  const { data: priorityTopics = [] } = useQuery<PriorityTopic[]>({\n    queryKey: [\"/api/topics/priority\"],\n  });\n\n  // Prepare line chart data for net progression over time\n  const prepareNetProgressionData = () => {\n    // Sort exams by date descending to get latest 10, then reverse for chronological order\n    const sortedExams = [...examResults]\n      .sort((a, b) => new Date(b.exam_date).getTime() - new Date(a.exam_date).getTime())\n      .slice(0, 10)\n      .reverse();\n    \n    return sortedExams.map((exam, index) => ({\n      exam: `Deneme ${index + 1}`,\n      examName: exam.exam_name.length > 15 ? `${exam.exam_name.substring(0, 15)}...` : exam.exam_name,\n      date: new Date(exam.exam_date).toLocaleDateString('tr-TR', { month: 'short', day: 'numeric' }),\n      TYT: exam.tyt_net != null && exam.tyt_net !== '' ? parseFloat(exam.tyt_net.toString()) : null,\n      AYT: exam.ayt_net != null && exam.ayt_net !== '' ? parseFloat(exam.ayt_net.toString()) : null,\n      TYTTarget: 80, // Target line for TYT\n      AYTTarget: 40  // Target line for AYT\n    }));\n  };\n\n  // Prepare radar chart data for subject distribution (latest exam)\n  const prepareSubjectRadarData = () => {\n    if (examResults.length === 0) return [];\n    \n    // Sort exams by date descending to get the actual latest exam\n    const sortedExams = [...examResults].sort((a, b) => new Date(b.exam_date).getTime() - new Date(a.exam_date).getTime());\n    const latestExam = sortedExams[0];\n    const latestExamNets = examSubjectNets.filter(net => net.exam_id === latestExam.id);\n    \n    if (latestExamNets.length === 0) {\n      return []; // No mock data - show empty state\n    }\n    \n    // Subject max values for percentage calculation\n    const subjectMaxValues: { [key: string]: number } = {\n      'Türkçe': 40, 'Sosyal Bilimler': 20, 'Matematik': 40, 'Fizik': 14, 'Kimya': 13, 'Biyoloji': 13\n    };\n    \n    return latestExamNets.map(net => {\n      const netScore = parseFloat(net.net_score) || 0;\n      const maxValue = subjectMaxValues[net.subject] || 40; // Default to 40 if subject not found\n      const percentage = Math.min(Math.round((netScore / maxValue) * 100), 100); // Clamp to 100\n      \n      return {\n        subject: net.subject,\n        net: netScore,\n        percentage: isNaN(percentage) ? 0 : percentage,\n        maxPercentage: 100\n      };\n    });\n  };\n\n  // NEW: Prepare priority topics data for bar chart\n  const preparePriorityTopicsData = () => {\n    return priorityTopics.slice(0, 8).map(topic => ({\n      topic: topic.topic.length > 15 ? `${topic.topic.substring(0, 15)}...` : topic.topic,\n      fullTopic: topic.topic,\n      priority: topic.priority,\n      improvementNeeded: topic.improvementNeeded,\n      color: topic.improvementNeeded ? '#ef4444' : topic.priority > 70 ? '#f97316' : '#eab308'\n    }));\n  };\n\n  // NEW: Prepare topic error frequency data\n  const prepareTopicErrorData = () => {\n    return topicStats.slice(0, 6).map(stat => ({\n      topic: stat.topic.length > 12 ? `${stat.topic.substring(0, 12)}...` : stat.topic,\n      fullTopic: stat.topic,\n      errors: stat.wrongMentions,\n      frequency: stat.mentionFrequency,\n      sessions: stat.totalSessions,\n      color: stat.wrongMentions >= 5 ? '#dc2626' : stat.wrongMentions >= 3 ? '#ea580c' : '#f59e0b'\n    }));\n  };\n\n  const lineChartData = prepareNetProgressionData();\n  const radarChartData = prepareSubjectRadarData();\n  const priorityTopicsData = preparePriorityTopicsData();\n  const topicErrorData = prepareTopicErrorData();\n\n  return (\n    <div className=\"space-y-8\">\n      {/* First Row - Existing Charts */}\n      <div className=\"grid grid-cols-1 xl:grid-cols-2 gap-6\">\n        {/* Line Chart - Net Progression */}\n        <div className=\"bg-card rounded-xl border border-border p-6 relative overflow-hidden\">\n          <div className=\"absolute top-0 right-0 w-32 h-32 bg-gradient-to-br from-blue-500/5 to-green-500/5 rounded-full blur-3xl\"></div>\n          <div className=\"relative\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <div className=\"flex items-center\">\n                <TrendingUp className=\"h-5 w-5 mr-2 text-blue-600\" />\n                <h3 className=\"text-lg font-semibold text-foreground\">Net Gelişim Grafiği</h3>\n              </div>\n              <div className=\"text-xs text-muted-foreground\">\n                Son {lineChartData.length} deneme\n              </div>\n            </div>\n            \n            {lineChartData.length === 0 ? (\n              <div className=\"text-center py-16 text-muted-foreground\">\n                <Activity className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                <p className=\"text-sm\">Yeterli deneme verisi bulunmuyor</p>\n                <p className=\"text-xs mt-1\">En az 2 deneme kaydı gerekli</p>\n              </div>\n            ) : (\n              <div className=\"h-80\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart data={lineChartData} margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>\n                    <CartesianGrid strokeDasharray=\"3 3\" className=\"opacity-30\" />\n                    <XAxis \n                      dataKey=\"date\" \n                      className=\"text-xs text-muted-foreground\"\n                      tick={{ fontSize: 12 }}\n                      stroke=\"currentColor\"\n                    />\n                    <YAxis \n                      className=\"text-xs text-muted-foreground\"\n                      tick={{ fontSize: 12 }}\n                      stroke=\"currentColor\"\n                    />\n                    <Tooltip \n                      contentStyle={{ \n                        backgroundColor: 'hsl(var(--card))',\n                        border: '1px solid hsl(var(--border))',\n                        borderRadius: '8px',\n                        fontSize: '12px'\n                      }}\n                      labelFormatter={(label, payload) => {\n                        const data = payload?.[0]?.payload;\n                        return data ? data.examName : label;\n                      }}\n                    />\n                    <Legend />\n                    \n                    {/* Target lines */}\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"TYTTarget\" \n                      stroke=\"#3b82f6\" \n                      strokeDasharray=\"5 5\" \n                      strokeWidth={1}\n                      dot={false} \n                      connectNulls={false}\n                      name=\"TYT Hedef (80)\"\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"AYTTarget\" \n                      stroke=\"#10b981\" \n                      strokeDasharray=\"5 5\" \n                      strokeWidth={1}\n                      dot={false} \n                      connectNulls={false}\n                      name=\"AYT Hedef (40)\"\n                    />\n                    \n                    {/* Actual performance lines */}\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"TYT\" \n                      stroke=\"#1e40af\" \n                      strokeWidth={3}\n                      dot={{ fill: '#1e40af', strokeWidth: 2, r: 4 }} \n                      connectNulls={false}\n                      name=\"TYT Net\"\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"AYT\" \n                      stroke=\"#059669\" \n                      strokeWidth={3}\n                      dot={{ fill: '#059669', strokeWidth: 2, r: 4 }} \n                      connectNulls={false}\n                      name=\"AYT Net\"\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Radar Chart - Subject Distribution */}\n        <div className=\"bg-card rounded-xl border border-border p-6 relative overflow-hidden\">\n          <div className=\"absolute top-0 right-0 w-32 h-32 bg-gradient-to-br from-purple-500/5 to-orange-500/5 rounded-full blur-3xl\"></div>\n          <div className=\"relative\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <div className=\"flex items-center\">\n                <Target className=\"h-5 w-5 mr-2 text-purple-600\" />\n                <h3 className=\"text-lg font-semibold text-foreground\">Ders Net Dağılımı</h3>\n              </div>\n              <div className=\"text-xs text-muted-foreground\">\n                {examResults.length > 0 && radarChartData.length > 0 ? 'Son deneme' : 'Veri yok'}\n              </div>\n            </div>\n            \n            {radarChartData.length === 0 ? (\n              <div className=\"text-center py-16 text-muted-foreground\">\n                <Target className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                <p className=\"text-sm\">Ders net verisi bulunmuyor</p>\n                <p className=\"text-xs mt-1\">Deneme sonuçlarına ders netleri ekleyin</p>\n              </div>\n            ) : (\n              <div className=\"h-80\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <RadarChart data={radarChartData} margin={{ top: 40, right: 40, bottom: 40, left: 40 }}>\n                    <PolarGrid className=\"opacity-30\" />\n                    <PolarAngleAxis \n                      dataKey=\"subject\" \n                      className=\"text-xs text-foreground\"\n                      tick={{ fontSize: 11, fontWeight: 500 }}\n                    />\n                    <PolarRadiusAxis \n                      angle={90} \n                      domain={[0, 100]}\n                      className=\"text-xs text-muted-foreground\"\n                      tick={{ fontSize: 10 }}\n                      tickCount={5}\n                    />\n                    <Tooltip\n                      contentStyle={{\n                        backgroundColor: 'hsl(var(--card))',\n                        border: '1px solid hsl(var(--border))',\n                        borderRadius: '8px',\n                        fontSize: '12px'\n                      }}\n                      formatter={(value, name) => [\n                        `${value}${name === 'percentage' ? '%' : ' net'}`,\n                        name === 'percentage' ? 'Başarı Oranı' : 'Net Sayısı'\n                      ]}\n                    />\n                    <Radar\n                      name=\"percentage\"\n                      dataKey=\"percentage\"\n                      stroke=\"#8b5cf6\"\n                      fill=\"rgba(139, 92, 246, 0.1)\"\n                      fillOpacity={0.3}\n                      strokeWidth={2}\n                      dot={{ fill: \"#8b5cf6\", strokeWidth: 1, r: 4 }}\n                    />\n                  </RadarChart>\n                </ResponsiveContainer>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Second Row - NEW Priority & Error Analysis Charts */}\n      <div className=\"grid grid-cols-1 xl:grid-cols-2 gap-6\">\n        {/* Priority Topics Bar Chart */}\n        <div className=\"bg-gradient-to-br from-red-50/50 via-card to-orange-50/50 dark:from-red-950/20 dark:via-card dark:to-orange-950/20 rounded-xl border-2 border-red-200/30 dark:border-red-800/30 p-6 relative overflow-hidden shadow-2xl\">\n          <div className=\"absolute top-0 right-0 w-32 h-32 bg-gradient-to-br from-red-500/10 to-orange-500/10 rounded-full blur-3xl\"></div>\n          <div className=\"relative\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <div className=\"flex items-center\">\n                <AlertTriangle className=\"h-6 w-6 mr-2 text-red-600\" />\n                <h3 className=\"text-xl font-bold bg-gradient-to-r from-red-600 to-orange-600 bg-clip-text text-transparent\">\n                  🎯 Öncelik Konuları Analizi\n                </h3>\n              </div>\n              <div className=\"text-xs text-muted-foreground bg-red-100/50 dark:bg-red-900/20 px-3 py-1 rounded-full\">\n                {priorityTopicsData.length} sorunlu konu\n              </div>\n            </div>\n            \n            {priorityTopicsData.length === 0 ? (\n              <div className=\"text-center py-16 text-muted-foreground\">\n                <AlertTriangle className=\"h-12 w-12 mx-auto mb-4 opacity-40\" />\n                <p className=\"text-sm font-medium\">Henüz öncelik verisi yok</p>\n                <p className=\"text-xs mt-1\">Yanlış konular ekleyince burada görünecek</p>\n              </div>\n            ) : (\n              <div className=\"h-80\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <BarChart data={priorityTopicsData} margin={{ top: 20, right: 30, left: 20, bottom: 60 }}>\n                    <CartesianGrid strokeDasharray=\"3 3\" className=\"opacity-30\" />\n                    <XAxis \n                      dataKey=\"topic\"\n                      className=\"text-xs text-muted-foreground\"\n                      tick={{ fontSize: 11, textAnchor: 'end' }}\n                      angle={-45}\n                      height={80}\n                    />\n                    <YAxis \n                      className=\"text-xs text-muted-foreground\"\n                      tick={{ fontSize: 12 }}\n                      label={{ value: 'Öncelik %', angle: -90, position: 'insideLeft' }}\n                    />\n                    <Tooltip\n                      contentStyle={{\n                        backgroundColor: 'hsl(var(--card))',\n                        border: '1px solid hsl(var(--border))',\n                        borderRadius: '12px',\n                        fontSize: '13px',\n                        boxShadow: '0 8px 32px rgba(0,0,0,0.1)'\n                      }}\n                      formatter={(value: any, name: any, props: any) => [\n                        `%${value.toFixed(1)}`,\n                        props.payload.improvementNeeded ? '🔥 Acil Öncelik' : '⚠️ Dikkat Gerekli'\n                      ]}\n                      labelFormatter={(label: any, payload: any) => payload?.[0]?.payload?.fullTopic || label}\n                    />\n                    <Bar dataKey=\"priority\" radius={[4, 4, 0, 0]}>\n                      {priorityTopicsData.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={entry.color} />\n                      ))}\n                    </Bar>\n                  </BarChart>\n                </ResponsiveContainer>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Topic Error Frequency Analysis */}\n        <div className=\"bg-gradient-to-br from-blue-50/50 via-card to-purple-50/50 dark:from-blue-950/20 dark:via-card dark:to-purple-950/20 rounded-xl border-2 border-blue-200/30 dark:border-blue-800/30 p-6 relative overflow-hidden shadow-2xl\">\n          <div className=\"absolute top-0 right-0 w-32 h-32 bg-gradient-to-br from-blue-500/10 to-purple-500/10 rounded-full blur-3xl\"></div>\n          <div className=\"relative\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <div className=\"flex items-center\">\n                <Brain className=\"h-6 w-6 mr-2 text-blue-600\" />\n                <h3 className=\"text-xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n                  📊 Hata Sıklığı Analizi\n                </h3>\n              </div>\n              <div className=\"text-xs text-muted-foreground bg-blue-100/50 dark:bg-blue-900/20 px-3 py-1 rounded-full\">\n                Toplam {topicErrorData.reduce((sum, item) => sum + item.errors, 0)} hata\n              </div>\n            </div>\n            \n            {topicErrorData.length === 0 ? (\n              <div className=\"text-center py-16 text-muted-foreground\">\n                <BarChart3 className=\"h-12 w-12 mx-auto mb-4 opacity-40\" />\n                <p className=\"text-sm font-medium\">Henüz hata analizi yok</p>\n                <p className=\"text-xs mt-1\">Yanlış konularını belirtmeye başla</p>\n              </div>\n            ) : (\n              <div className=\"h-80\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <BarChart data={topicErrorData} margin={{ top: 20, right: 30, left: 20, bottom: 60 }}>\n                    <CartesianGrid strokeDasharray=\"3 3\" className=\"opacity-30\" />\n                    <XAxis \n                      dataKey=\"topic\"\n                      className=\"text-xs text-muted-foreground\"\n                      tick={{ fontSize: 11, textAnchor: 'end' }}\n                      angle={-45}\n                      height={80}\n                    />\n                    <YAxis \n                      className=\"text-xs text-muted-foreground\"\n                      tick={{ fontSize: 12 }}\n                      label={{ value: 'Hata Sayısı', angle: -90, position: 'insideLeft' }}\n                    />\n                    <Tooltip\n                      contentStyle={{\n                        backgroundColor: 'hsl(var(--card))',\n                        border: '1px solid hsl(var(--border))',\n                        borderRadius: '12px',\n                        fontSize: '13px',\n                        boxShadow: '0 8px 32px rgba(0,0,0,0.1)'\n                      }}\n                      formatter={(value: any, name: any, props: any) => [\n                        `${value} hata`,\n                        `%${props.payload.frequency.toFixed(1)} sıklıkla`\n                      ]}\n                      labelFormatter={(label: any, payload: any) => payload?.[0]?.payload?.fullTopic || label}\n                    />\n                    <Bar dataKey=\"errors\" radius={[4, 4, 0, 0]}>\n                      {topicErrorData.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={entry.color} />\n                      ))}\n                    </Bar>\n                  </BarChart>\n                </ResponsiveContainer>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":19122},"client/src/components/question-analysis-charts.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, PieChart, Pie, Cell, Line, ComposedChart } from \"recharts\";\nimport { BookOpen, TrendingUp, Calendar, Target } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { QuestionLog } from \"@shared/schema\";\n\nexport function QuestionAnalysisCharts() {\n  const [viewMode, setViewMode] = useState<'daily' | 'weekly'>('daily');\n  \n  const { data: questionLogs = [] } = useQuery<QuestionLog[]>({\n    queryKey: [\"/api/question-logs\"],\n  });\n\n  // Prepare daily/weekly questions chart data\n  const prepareDailyWeeklyData = () => {\n    if (questionLogs.length === 0) return [];\n\n    if (viewMode === 'daily') {\n      const last14Days = Array.from({ length: 14 }, (_, i) => {\n        const date = new Date();\n        date.setDate(date.getDate() - (13 - i));\n        return date.toISOString().split('T')[0];\n      });\n\n      return last14Days.map(dateStr => {\n        const dayLogs = questionLogs.filter(log => log.study_date === dateStr);\n        const totalQuestions = dayLogs.reduce((sum, log) => \n          sum + (Number(log.correct_count) || 0) + (Number(log.wrong_count) || 0) + (Number(log.blank_count) || 0), 0\n        );\n        const correctQuestions = dayLogs.reduce((sum, log) => sum + (Number(log.correct_count) || 0), 0);\n        const attempted = dayLogs.reduce((sum, log) => sum + (Number(log.correct_count) || 0) + (Number(log.wrong_count) || 0), 0);\n        \n        return {\n          date: dateStr,\n          dayName: new Date(dateStr).toLocaleDateString('tr-TR', { weekday: 'short', day: 'numeric' }),\n          totalQuestions,\n          correctQuestions,\n          wrongQuestions: dayLogs.reduce((sum, log) => sum + (Number(log.wrong_count) || 0), 0),\n          successRate: attempted > 0 ? Math.round((correctQuestions / attempted) * 100) : 0\n        };\n      });\n    } else {\n      // Weekly aggregation - last 8 weeks (ISO weeks starting Monday)\n      const weeks = [];\n      const today = new Date();\n      \n      for (let i = 7; i >= 0; i--) {\n        // Calculate Monday of target week (ISO week start) in UTC\n        const weekStart = new Date(today);\n        const daysFromMonday = (today.getUTCDay() + 6) % 7; // Convert Sunday=0 to Monday=0 system\n        weekStart.setUTCDate(today.getUTCDate() - (i * 7) - daysFromMonday);\n        weekStart.setUTCHours(0, 0, 0, 0); // UTC midnight\n        \n        const weekEnd = new Date(weekStart);\n        weekEnd.setUTCDate(weekStart.getUTCDate() + 6);\n        weekEnd.setUTCHours(23, 59, 59, 999); // End of Sunday in UTC\n        \n        // Filter logs for this week using UTC-based string comparison \n        const weekLogs = questionLogs.filter(log => {\n          const logDateStr = log.study_date;\n          const weekStartStr = weekStart.toISOString().slice(0, 10); // YYYY-MM-DD\n          const weekEndStr = weekEnd.toISOString().slice(0, 10); // YYYY-MM-DD\n          return logDateStr >= weekStartStr && logDateStr <= weekEndStr;\n        });\n        \n        const totalQuestions = weekLogs.reduce((sum, log) => \n          sum + (Number(log.correct_count) || 0) + (Number(log.wrong_count) || 0) + (Number(log.blank_count) || 0), 0\n        );\n        const correctQuestions = weekLogs.reduce((sum, log) => sum + (Number(log.correct_count) || 0), 0);\n        const attempted = weekLogs.reduce((sum, log) => sum + (Number(log.correct_count) || 0) + (Number(log.wrong_count) || 0), 0);\n        \n        // Create descriptive week label with date range\n        const weekKey = `${weekStart.getUTCFullYear()}-W${String(8 - i).padStart(2, '0')}`;\n        const startMonth = weekStart.toLocaleDateString('tr-TR', { month: 'short', timeZone: 'UTC' });\n        const endMonth = weekEnd.toLocaleDateString('tr-TR', { month: 'short', timeZone: 'UTC' });\n        const startYear = weekStart.getUTCFullYear();\n        const endYear = weekEnd.getUTCFullYear();\n        \n        let weekLabel;\n        if (startMonth === endMonth && startYear === endYear) {\n          // Same month and year: \"02–08 Eyl\"\n          weekLabel = `${weekStart.getUTCDate().toString().padStart(2, '0')}–${weekEnd.getUTCDate().toString().padStart(2, '0')} ${startMonth}`;\n        } else if (startYear === endYear) {\n          // Different months, same year: \"29 Ağu – 04 Eyl\"\n          weekLabel = `${weekStart.getUTCDate().toString().padStart(2, '0')} ${startMonth} – ${weekEnd.getUTCDate().toString().padStart(2, '0')} ${endMonth}`;\n        } else {\n          // Different years: \"29 Ara 2024 – 04 Oca 2025\"\n          weekLabel = `${weekStart.getUTCDate().toString().padStart(2, '0')} ${startMonth} ${startYear} – ${weekEnd.getUTCDate().toString().padStart(2, '0')} ${endMonth} ${endYear}`;\n        }\n        \n        weeks.push({\n          date: weekKey,\n          dayName: weekLabel,\n          totalQuestions,\n          correctQuestions,\n          wrongQuestions: weekLogs.reduce((sum, log) => sum + (Number(log.wrong_count) || 0), 0),\n          successRate: attempted > 0 ? Math.round((correctQuestions / attempted) * 100) : 0\n        });\n      }\n      \n      return weeks;\n    }\n  };\n\n  // Prepare topic success rate data\n  const prepareTopicSuccessData = () => {\n    if (questionLogs.length === 0) return [];\n\n    const subjectStats: { [key: string]: { correct: number; wrong: number; blank: number } } = {};\n    \n    questionLogs.forEach(log => {\n      if (!subjectStats[log.subject]) {\n        subjectStats[log.subject] = { correct: 0, wrong: 0, blank: 0 };\n      }\n      \n      subjectStats[log.subject].correct += Number(log.correct_count) || 0;\n      subjectStats[log.subject].wrong += Number(log.wrong_count) || 0;\n      subjectStats[log.subject].blank += Number(log.blank_count) || 0;\n    });\n\n    return Object.entries(subjectStats)\n      .map(([subject, stats]) => {\n        const attempted = stats.correct + stats.wrong;\n        const total = attempted + stats.blank;\n        return {\n          subject,\n          attempted,\n          total,\n          successRate: attempted > 0 ? Math.round((stats.correct / attempted) * 100) : 0,\n          correct: stats.correct,\n          wrong: stats.wrong,\n          blank: stats.blank\n        };\n      })\n      .filter(item => item.attempted >= 5) // Only show subjects with at least 5 attempted questions\n      .sort((a, b) => b.successRate - a.successRate);\n  };\n\n  // Prepare heatmap data for daily question solving (last 90 days)\n  const prepareHeatmapData = () => {\n    const data = [];\n    const today = new Date();\n    \n    for (let i = 89; i >= 0; i--) {\n      const date = new Date(today);\n      date.setDate(today.getDate() - i);\n      const dateStr = date.toISOString().split('T')[0];\n      \n      const dayLogs = questionLogs.filter(log => log.study_date === dateStr);\n      const totalQuestions = dayLogs.reduce((sum, log) => \n        sum + (Number(log.correct_count) || 0) + (Number(log.wrong_count) || 0) + (Number(log.blank_count) || 0), 0\n      );\n      \n      data.push({\n        date: dateStr,\n        day: date.getDate(),\n        month: date.getMonth(),\n        weekday: date.getDay(),\n        intensity: Math.min(totalQuestions / 50, 1), // Normalize to max 50 questions\n        count: totalQuestions\n      });\n    }\n    \n    return data;\n  };\n\n  const dailyWeeklyData = useMemo(() => prepareDailyWeeklyData(), [questionLogs, viewMode]);\n  const topicSuccessData = useMemo(() => prepareTopicSuccessData(), [questionLogs]);\n  const heatmapData = useMemo(() => prepareHeatmapData(), [questionLogs]);\n\n  // Colors for pie chart\n  const pieColors = ['#3b82f6', '#10b981', '#f59e0b', '#ef4444', '#8b5cf6', '#ec4899'];\n\n  return (\n    <div className=\"space-y-6 mb-8\">\n      {/* Daily/Weekly Questions Chart */}\n      <div className=\"bg-card rounded-xl border border-border p-6 relative overflow-hidden\">\n        <div className=\"absolute top-0 right-0 w-32 h-32 bg-gradient-to-br from-green-500/5 to-blue-500/5 rounded-full blur-3xl\"></div>\n        <div className=\"relative\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <div className=\"flex items-center\">\n              <BookOpen className=\"h-5 w-5 mr-2 text-green-600\" />\n              <h3 className=\"text-lg font-semibold text-foreground\">\n                {viewMode === 'daily' ? 'Günlük' : 'Haftalık'} Soru Çözüm Analizi\n              </h3>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <div className=\"flex border border-border rounded-lg p-1\">\n                <Button\n                  variant={viewMode === 'daily' ? 'default' : 'ghost'}\n                  size=\"sm\"\n                  onClick={() => setViewMode('daily')}\n                  className=\"text-xs px-3 py-1.5 h-auto\"\n                  data-testid=\"button-daily-view\"\n                >\n                  Günlük\n                </Button>\n                <Button\n                  variant={viewMode === 'weekly' ? 'default' : 'ghost'}\n                  size=\"sm\"\n                  onClick={() => setViewMode('weekly')}\n                  className=\"text-xs px-3 py-1.5 h-auto\"\n                  data-testid=\"button-weekly-view\"\n                >\n                  Haftalık\n                </Button>\n              </div>\n              <div className=\"text-xs text-muted-foreground\">\n                {viewMode === 'daily' ? 'Son 14 gün' : 'Son 8 hafta'}\n              </div>\n            </div>\n          </div>\n          \n          {dailyWeeklyData.length === 0 || dailyWeeklyData.every(d => d.totalQuestions === 0) ? (\n            <div className=\"text-center py-16 text-muted-foreground\">\n              <BookOpen className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n              <p className=\"text-sm\">Soru çözüm verisi bulunmuyor</p>\n              <p className=\"text-xs mt-1\">Soru kayıtları ekleyerek analizi görüntüleyin</p>\n            </div>\n          ) : (\n            <>\n              <div className=\"h-80 mb-4\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <ComposedChart data={dailyWeeklyData} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\n                    <CartesianGrid strokeDasharray=\"3 3\" className=\"opacity-30\" />\n                    <XAxis \n                      dataKey=\"dayName\" \n                      className=\"text-xs text-muted-foreground\"\n                      tick={{ fontSize: 11 }}\n                      stroke=\"currentColor\"\n                    />\n                    <YAxis \n                      yAxisId=\"questions\"\n                      className=\"text-xs text-muted-foreground\"\n                      tick={{ fontSize: 11 }}\n                      stroke=\"currentColor\"\n                    />\n                    <YAxis \n                      yAxisId=\"percentage\"\n                      orientation=\"right\"\n                      className=\"text-xs text-muted-foreground\"\n                      tick={{ fontSize: 11 }}\n                      stroke=\"currentColor\"\n                      domain={[0, 100]}\n                    />\n                    <Tooltip\n                      contentStyle={{\n                        backgroundColor: 'hsl(var(--card))',\n                        border: '1px solid hsl(var(--border))',\n                        borderRadius: '8px',\n                        fontSize: '12px'\n                      }}\n                      formatter={(value, name) => [\n                        name === 'successRate' ? `${value}%` : value,\n                        name === 'correctQuestions' ? 'Doğru' : \n                        name === 'wrongQuestions' ? 'Yanlış' : \n                        name === 'successRate' ? 'Başarı Oranı' :\n                        name === 'totalQuestions' ? 'Toplam' : name\n                      ]}\n                    />\n                    <Legend />\n                    <Bar yAxisId=\"questions\" dataKey=\"correctQuestions\" stackId=\"a\" fill=\"#10b981\" name=\"Doğru\" radius={[0, 0, 0, 0]} />\n                    <Bar yAxisId=\"questions\" dataKey=\"wrongQuestions\" stackId=\"a\" fill=\"#ef4444\" name=\"Yanlış\" radius={[4, 4, 0, 0]} />\n                    <Line yAxisId=\"percentage\" type=\"monotone\" dataKey=\"successRate\" stroke=\"#3b82f6\" strokeWidth={3} dot={{ r: 4, fill: \"#3b82f6\" }} name=\"Başarı Oranı (%)\" />\n                  </ComposedChart>\n                </ResponsiveContainer>\n              </div>\n              \n              <div className=\"grid grid-cols-3 gap-4 text-center pt-4 border-t border-border\">\n                <div>\n                  <div className=\"text-lg font-bold text-green-600\">\n                    {dailyWeeklyData.reduce((sum, d) => sum + d.correctQuestions, 0)}\n                  </div>\n                  <div className=\"text-xs text-muted-foreground\">Toplam Doğru</div>\n                </div>\n                <div>\n                  <div className=\"text-lg font-bold text-foreground\">\n                    {dailyWeeklyData.reduce((sum, d) => sum + d.totalQuestions, 0)}\n                  </div>\n                  <div className=\"text-xs text-muted-foreground\">Toplam Soru</div>\n                </div>\n                <div>\n                  <div className=\"text-lg font-bold text-blue-600\">\n                    {Math.round(dailyWeeklyData.reduce((sum, d) => sum + d.successRate, 0) / dailyWeeklyData.filter(d => d.totalQuestions > 0).length) || 0}%\n                  </div>\n                  <div className=\"text-xs text-muted-foreground\">Ortalama Başarı</div>\n                </div>\n              </div>\n            </>\n          )}\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 xl:grid-cols-2 gap-6\">\n        {/* Topic Success Rate Chart */}\n        <div className=\"bg-card rounded-xl border border-border p-6 relative overflow-hidden\">\n          <div className=\"absolute top-0 right-0 w-32 h-32 bg-gradient-to-br from-purple-500/5 to-pink-500/5 rounded-full blur-3xl\"></div>\n          <div className=\"relative\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <div className=\"flex items-center\">\n                <Target className=\"h-5 w-5 mr-2 text-purple-600\" />\n                <h3 className=\"text-lg font-semibold text-foreground\">Ders Başarı Oranları</h3>\n              </div>\n            </div>\n            \n            {topicSuccessData.length === 0 ? (\n              <div className=\"text-center py-16 text-muted-foreground\">\n                <Target className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                <p className=\"text-sm\">Ders bazlı veri bulunmuyor</p>\n                <p className=\"text-xs mt-1\">Her dersten en az 5 soru çözün</p>\n              </div>\n            ) : (\n              <>\n                <div className=\"h-64 mb-4\">\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <PieChart>\n                      <Pie\n                        data={topicSuccessData}\n                        cx=\"50%\"\n                        cy=\"50%\"\n                        labelLine={false}\n                        label={({ subject, successRate }) => `${subject}: ${successRate}%`}\n                        outerRadius={80}\n                        fill=\"#8884d8\"\n                        dataKey=\"attempted\"\n                      >\n                        {topicSuccessData.map((_, index) => (\n                          <Cell key={`cell-${index}`} fill={pieColors[index % pieColors.length]} />\n                        ))}\n                      </Pie>\n                      <Tooltip\n                        contentStyle={{\n                          backgroundColor: 'hsl(var(--card))',\n                          border: '1px solid hsl(var(--border))',\n                          borderRadius: '8px',\n                          fontSize: '12px'\n                        }}\n                        formatter={(value, name, props) => [\n                          `${props.payload.correct} doğru / ${value} denenen`,\n                          `${props.payload.subject} - %${props.payload.successRate}`\n                        ]}\n                      />\n                    </PieChart>\n                  </ResponsiveContainer>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  {topicSuccessData.slice(0, 3).map((item, index) => (\n                    <div key={item.subject} className=\"flex items-center justify-between text-sm\">\n                      <div className=\"flex items-center\">\n                        <div \n                          className=\"w-3 h-3 rounded-full mr-2\"\n                          style={{ backgroundColor: pieColors[index] }}\n                        ></div>\n                        <span className=\"font-medium\">{item.subject}</span>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"font-bold text-foreground\">{item.successRate}%</div>\n                        <div className=\"text-xs text-muted-foreground\">\n                          {item.correct}/{item.attempted} denenen\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n\n        {/* Daily Question Heatmap */}\n        <div className=\"bg-card rounded-xl border border-border p-6 relative overflow-hidden\">\n          <div className=\"absolute top-0 right-0 w-32 h-32 bg-gradient-to-br from-orange-500/5 to-red-500/5 rounded-full blur-3xl\"></div>\n          <div className=\"relative\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <div className=\"flex items-center\">\n                <Calendar className=\"h-5 w-5 mr-2 text-orange-600\" />\n                <h3 className=\"text-lg font-semibold text-foreground\">Çalışma Heatmap</h3>\n              </div>\n              <div className=\"text-xs text-muted-foreground\">\n                Son 90 gün\n              </div>\n            </div>\n            \n            <div className=\"mb-4\">\n              <div className=\"mb-4\" style={{ display: 'grid', gridTemplateColumns: 'repeat(13, minmax(0, 1fr))', gap: '4px' }}>\n                {heatmapData.map((day, index) => (\n                  <div\n                    key={index}\n                    className={`w-3 h-3 rounded-sm transition-all hover:scale-110 cursor-pointer ${\n                      day.intensity === 0 ? 'bg-muted/30' :\n                      day.intensity < 0.2 ? 'bg-orange-200 dark:bg-orange-900/40' :\n                      day.intensity < 0.4 ? 'bg-orange-300 dark:bg-orange-800/60' :\n                      day.intensity < 0.6 ? 'bg-orange-400 dark:bg-orange-700/80' :\n                      day.intensity < 0.8 ? 'bg-orange-500 dark:bg-orange-600/90' :\n                      'bg-orange-600 dark:bg-orange-600'\n                    }`}\n                    title={`${day.date}: ${day.count} soru`}\n                    data-testid={`heatmap-day-${day.date}`}\n                  />\n                ))}\n              </div>\n              \n              <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n                <span>Az</span>\n                <div className=\"flex gap-1\">\n                  <div className=\"w-3 h-3 bg-muted/30 rounded-sm\"></div>\n                  <div className=\"w-3 h-3 bg-orange-200 dark:bg-orange-900/40 rounded-sm\"></div>\n                  <div className=\"w-3 h-3 bg-orange-300 dark:bg-orange-800/60 rounded-sm\"></div>\n                  <div className=\"w-3 h-3 bg-orange-400 dark:bg-orange-700/80 rounded-sm\"></div>\n                  <div className=\"w-3 h-3 bg-orange-500 dark:bg-orange-600/90 rounded-sm\"></div>\n                  <div className=\"w-3 h-3 bg-orange-600 dark:bg-orange-600 rounded-sm\"></div>\n                </div>\n                <span>Çok</span>\n              </div>\n            </div>\n            \n            <div className=\"grid grid-cols-2 gap-4 text-center pt-4 border-t border-border\">\n              <div>\n                <div className=\"text-lg font-bold text-orange-600\">\n                  {heatmapData.filter(d => d.count > 0).length}\n                </div>\n                <div className=\"text-xs text-muted-foreground\">Aktif Gün</div>\n              </div>\n              <div>\n                <div className=\"text-lg font-bold text-foreground\">\n                  {Math.max(...heatmapData.map(d => d.count))}\n                </div>\n                <div className=\"text-xs text-muted-foreground\">En Yoğun Gün</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":20665},"client/src/pages/timer.tsx":{"content":"import { useState, useEffect, useReducer, useRef } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Header } from \"@/components/header\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Volume2, VolumeX, Play, Pause, Square, RotateCcw, Clock, Timer as TimerIcon, AlarmClock, Plus, Trash2, Zap, Target, Sparkles } from \"lucide-react\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Confetti from 'react-confetti';\n\ninterface TimerState {\n  time: number; // milliseconds\n  isRunning: boolean;\n  laps: Array<{ id: number; time: number; split: number; }>;\n  lapCounter: number;\n}\n\ntype TimerAction = \n  | { type: 'START' }\n  | { type: 'PAUSE' }\n  | { type: 'RESET' }\n  | { type: 'TICK'; payload: number }\n  | { type: 'ADD_LAP'; payload: number };\n\nconst timerReducer = (state: TimerState, action: TimerAction): TimerState => {\n  switch (action.type) {\n    case 'START':\n      return { ...state, isRunning: true };\n    case 'PAUSE':\n      return { ...state, isRunning: false };\n    case 'RESET':\n      return { \n        time: 0, \n        isRunning: false, \n        laps: [], \n        lapCounter: 0 \n      };\n    case 'TICK':\n      return { ...state, time: action.payload };\n    case 'ADD_LAP':\n      const previousLapTime = state.laps.length > 0 ? state.laps[state.laps.length - 1].time : 0;\n      const split = action.payload - previousLapTime;\n      return { \n        ...state, \n        laps: [...state.laps, { \n          id: state.lapCounter + 1, \n          time: action.payload, \n          split \n        }],\n        lapCounter: state.lapCounter + 1\n      };\n    default:\n      return state;\n  }\n};\n\ninterface PomodoroSettings {\n  workTime: number; // minutes\n  breakTime: number; // minutes\n  longBreakTime: number; // minutes\n  cycles: number;\n}\n\ninterface AlarmSettings {\n  time: string; // HH:MM format\n  sound: string;\n  enabled: boolean;\n}\n\nconst formatTime = (ms: number, includeMs = true): string => {\n  const totalSeconds = Math.floor(ms / 1000);\n  const hours = Math.floor(totalSeconds / 3600);\n  const minutes = Math.floor((totalSeconds % 3600) / 60);\n  const seconds = totalSeconds % 60;\n  const milliseconds = Math.floor((ms % 1000) / 10); // centiseconds\n  \n  if (hours > 0) {\n    return includeMs \n      ? `${hours}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}:${milliseconds.toString().padStart(2, '0')}`\n      : `${hours}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n  }\n  \n  return includeMs \n    ? `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}:${milliseconds.toString().padStart(2, '0')}`\n    : `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n};\n\nexport default function Timer() {\n  const [location] = useLocation();\n  \n  // Sound settings\n  const [soundEnabled, setSoundEnabled] = useState(() => \n    localStorage.getItem('timer-sound-enabled') !== 'false'\n  );\n  \n  const [alarmSound, setAlarmSound] = useState(() => \n    localStorage.getItem('timer-alarm-sound') || 'beep'\n  );\n\n  // Stopwatch\n  const [stopwatchState, dispatchStopwatch] = useReducer(timerReducer, {\n    time: 0,\n    isRunning: false,\n    laps: [],\n    lapCounter: 0\n  });\n\n  // Pomodoro\n  const [pomodoroSettings, setPomodoroSettings] = useState<PomodoroSettings>(() => ({\n    workTime: 25,\n    breakTime: 5,\n    longBreakTime: 15,\n    cycles: 4\n  }));\n  \n  const [pomodoroState, setPomodoroState] = useState({\n    time: pomodoroSettings.workTime * 60 * 1000, // milliseconds\n    isRunning: false,\n    isBreak: false,\n    currentCycle: 1,\n    mode: 'work' as 'work' | 'break' | 'longBreak'\n  });\n\n  // Alarms\n  const [alarms, setAlarms] = useState<AlarmSettings[]>(() => {\n    const saved = localStorage.getItem('timer-alarms');\n    return saved ? JSON.parse(saved) : [];\n  });\n  const [newAlarmTime, setNewAlarmTime] = useState('');\n  const [activeTab, setActiveTab] = useState('stopwatch');\n\n  // Timer Goal Setting\n  const [timerGoal, setTimerGoal] = useState<number>(0); // in minutes\n  const [goalInput, setGoalInput] = useState<string>('');\n  const [showConfetti, setShowConfetti] = useState(false);\n  const [goalAchieved, setGoalAchieved] = useState(false);\n\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n  const alarmIntervalRef = useRef<NodeJS.Timeout | null>(null);\n  const { toast } = useToast();\n\n  // Audio context for sound effects\n  const playSound = (frequency = 800, duration = 200, type: 'beep' | 'lap' | 'alarm' = 'beep') => {\n    if (!soundEnabled) return;\n    \n    try {\n      const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n      const oscillator = audioContext.createOscillator();\n      const gainNode = audioContext.createGain();\n      \n      oscillator.connect(gainNode);\n      gainNode.connect(audioContext.destination);\n      \n      if (type === 'alarm') {\n        // Alarm sound - different tones based on selection\n        if (alarmSound === 'chime') {\n          oscillator.frequency.setValueAtTime(523, audioContext.currentTime);\n          oscillator.frequency.setValueAtTime(659, audioContext.currentTime + 0.2);\n          oscillator.frequency.setValueAtTime(784, audioContext.currentTime + 0.4);\n          duration = 800;\n        } else if (alarmSound === 'bell') {\n          oscillator.frequency.setValueAtTime(800, audioContext.currentTime);\n          oscillator.frequency.exponentialRampToValueAtTime(400, audioContext.currentTime + 0.1);\n          duration = 500;\n        } else {\n          oscillator.frequency.setValueAtTime(1000, audioContext.currentTime);\n        }\n      } else if (type === 'lap') {\n        oscillator.frequency.setValueAtTime(600, audioContext.currentTime);\n        duration = 100;\n      } else {\n        oscillator.frequency.setValueAtTime(frequency, audioContext.currentTime);\n      }\n      \n      gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);\n      gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + duration / 1000);\n      \n      oscillator.start(audioContext.currentTime);\n      oscillator.stop(audioContext.currentTime + duration / 1000);\n    } catch (error) {\n      console.warn('Sound playback failed:', error);\n    }\n  };\n\n  // Goal checking for stopwatch\n  useEffect(() => {\n    if (timerGoal > 0 && stopwatchState.time >= timerGoal * 60 * 1000 && !goalAchieved) {\n      setGoalAchieved(true);\n      setShowConfetti(true);\n      playSound(1000, 1000, 'alarm');\n      toast({\n        title: '🎉 Tebrikler! Hedefe Ulaştın!',\n        description: `${timerGoal} dakikalık hedefini başarıyla tamamladın!`,\n      });\n      \n      // Hide confetti after 5 seconds\n      setTimeout(() => {\n        setShowConfetti(false);\n      }, 5000);\n    }\n  }, [stopwatchState.time, timerGoal, goalAchieved, toast]);\n\n  // Stopwatch effects\n  useEffect(() => {\n    if (stopwatchState.isRunning) {\n      const startTime = Date.now() - stopwatchState.time;\n      intervalRef.current = setInterval(() => {\n        dispatchStopwatch({ type: 'TICK', payload: Date.now() - startTime });\n      }, 10);\n    } else {\n      if (intervalRef.current) clearInterval(intervalRef.current);\n    }\n\n    return () => {\n      if (intervalRef.current) clearInterval(intervalRef.current);\n    };\n  }, [stopwatchState.isRunning, stopwatchState.time]);\n\n  // Pomodoro effects\n  useEffect(() => {\n    let pomodoroInterval: NodeJS.Timeout | null = null;\n    \n    if (pomodoroState.isRunning && pomodoroState.time > 0) {\n      pomodoroInterval = setInterval(() => {\n        setPomodoroState(prev => {\n          if (prev.time <= 1000) {\n            playSound(800, 500, 'alarm');\n            toast({\n              title: prev.mode === 'work' ? 'Çalışma süresi bitti!' : 'Mola süresi bitti!',\n              description: prev.mode === 'work' ? 'Mola zamanı!' : 'Çalışmaya devam!',\n            });\n            \n            // Auto-switch to next phase\n            const nextMode = prev.mode === 'work' \n              ? (prev.currentCycle >= pomodoroSettings.cycles ? 'longBreak' : 'break')\n              : 'work';\n            \n            const nextTime = nextMode === 'work' \n              ? pomodoroSettings.workTime * 60 * 1000\n              : nextMode === 'break'\n              ? pomodoroSettings.breakTime * 60 * 1000\n              : pomodoroSettings.longBreakTime * 60 * 1000;\n            \n            const nextCycle = prev.mode === 'break' || prev.mode === 'longBreak' \n              ? prev.currentCycle + 1\n              : prev.currentCycle;\n            \n            return {\n              ...prev,\n              time: nextTime,\n              isRunning: false,\n              mode: nextMode,\n              currentCycle: nextMode === 'longBreak' ? 1 : nextCycle\n            };\n          }\n          return { ...prev, time: prev.time - 1000 };\n        });\n      }, 1000);\n    }\n\n    return () => {\n      if (pomodoroInterval) clearInterval(pomodoroInterval);\n    };\n  }, [pomodoroState.isRunning, pomodoroState.time, pomodoroSettings, toast]);\n\n  // Alarm checking\n  useEffect(() => {\n    const checkAlarms = () => {\n      const now = new Date();\n      const currentTime = `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`;\n      \n      alarms.forEach(alarm => {\n        if (alarm.enabled && alarm.time === currentTime) {\n          playSound(800, 1000, 'alarm');\n          toast({\n            title: 'Alarm!',\n            description: `${alarm.time} alarmı çalıyor!`,\n          });\n          // Disable alarm after it rings\n          setAlarms(prev => prev.map(a => \n            a.time === alarm.time ? { ...a, enabled: false } : a\n          ));\n        }\n      });\n    };\n\n    alarmIntervalRef.current = setInterval(checkAlarms, 1000);\n    return () => {\n      if (alarmIntervalRef.current) clearInterval(alarmIntervalRef.current);\n    };\n  }, [alarms, toast]);\n\n  // Auto-populate current time when alarm tab is activated\n  useEffect(() => {\n    if (activeTab === 'alarm' && !newAlarmTime) {\n      const now = new Date();\n      const currentTime = `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`;\n      setNewAlarmTime(currentTime);\n    }\n  }, [activeTab, newAlarmTime]);\n\n  // Save settings to localStorage\n  useEffect(() => {\n    localStorage.setItem('timer-sound-enabled', soundEnabled.toString());\n  }, [soundEnabled]);\n\n  useEffect(() => {\n    localStorage.setItem('timer-alarm-sound', alarmSound);\n  }, [alarmSound]);\n\n  useEffect(() => {\n    localStorage.setItem('timer-alarms', JSON.stringify(alarms));\n  }, [alarms]);\n\n  const handleStopwatchStart = () => {\n    dispatchStopwatch({ type: 'START' });\n    playSound();\n  };\n\n  const handleStopwatchPause = () => {\n    dispatchStopwatch({ type: 'PAUSE' });\n    playSound();\n  };\n\n  const handleStopwatchReset = () => {\n    dispatchStopwatch({ type: 'RESET' });\n    setGoalAchieved(false);\n    setShowConfetti(false);\n    playSound();\n  };\n\n  const setTimerGoalHandler = () => {\n    const minutes = parseInt(goalInput);\n    if (minutes > 0) {\n      setTimerGoal(minutes);\n      setGoalAchieved(false);\n      toast({\n        title: '🎯 Hedef Belirlendi',\n        description: `${minutes} dakikalık çalışma hedefi ayarlandı!`,\n      });\n      setGoalInput('');\n    }\n  };\n\n  const handleStopwatchLap = () => {\n    dispatchStopwatch({ type: 'ADD_LAP', payload: stopwatchState.time });\n    playSound(600, 100, 'lap');\n  };\n\n  const handlePomodoroStart = () => {\n    setPomodoroState(prev => ({ ...prev, isRunning: true }));\n    playSound();\n  };\n\n  const handlePomodoroPause = () => {\n    setPomodoroState(prev => ({ ...prev, isRunning: false }));\n    playSound();\n  };\n\n  const handlePomodoroReset = () => {\n    setPomodoroState(prev => ({\n      ...prev,\n      time: pomodoroSettings.workTime * 60 * 1000,\n      isRunning: false,\n      mode: 'work',\n      currentCycle: 1\n    }));\n    playSound();\n  };\n\n  const addAlarm = () => {\n    if (newAlarmTime && !alarms.some(a => a.time === newAlarmTime)) {\n      // Check if alarm time is in the past\n      const now = new Date();\n      const [hours, minutes] = newAlarmTime.split(':').map(Number);\n      const alarmDate = new Date();\n      alarmDate.setHours(hours, minutes, 0, 0);\n      \n      if (alarmDate <= now) {\n        toast({\n          title: 'Geçersiz Alarm Saati',\n          description: 'Geçmiş bir saat için alarm kuramazsınız.',\n          variant: 'destructive'\n        });\n        return;\n      }\n      \n      setAlarms(prev => [...prev, {\n        time: newAlarmTime,\n        sound: alarmSound,\n        enabled: true\n      }]);\n      setNewAlarmTime('');\n    }\n  };\n\n  const removeAlarm = (time: string) => {\n    setAlarms(prev => prev.filter(a => a.time !== time));\n  };\n\n  const toggleAlarm = (time: string) => {\n    setAlarms(prev => prev.map(a => \n      a.time === time ? { ...a, enabled: !a.enabled } : a\n    ));\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-background to-secondary/20\">\n      {showConfetti && (\n        <Confetti\n          width={window.innerWidth}\n          height={window.innerHeight}\n          recycle={false}\n          numberOfPieces={200}\n          gravity={0.1}\n        />\n      )}\n      <Header />\n      \n      {/* Centered Navigation */}\n      <nav className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n        <div className=\"flex items-center justify-center space-x-6\">\n          <Link href=\"/\">\n            <button \n              className={`px-8 py-3 rounded-xl font-semibold text-lg transition-all duration-200 ${\n                location === '/' \n                  ? 'bg-primary text-primary-foreground shadow-lg' \n                  : 'bg-secondary text-secondary-foreground hover:bg-accent hover:scale-105'\n              }`}\n              data-testid=\"link-homepage\"\n            >\n              Anasayfa\n            </button>\n          </Link>\n          <Link href=\"/tasks\">\n            <button \n              className={`px-8 py-3 rounded-xl font-semibold text-lg transition-all duration-200 ${\n                location === '/tasks' \n                  ? 'bg-primary text-primary-foreground shadow-lg' \n                  : 'bg-secondary text-secondary-foreground hover:bg-accent hover:scale-105'\n              }`}\n              data-testid=\"link-todos\"\n            >\n              Yapılacaklar\n            </button>\n          </Link>\n          <Link href=\"/dashboard\">\n            <button \n              className={`px-8 py-3 rounded-xl font-semibold text-lg transition-all duration-200 ${\n                location === '/dashboard' \n                  ? 'bg-primary text-primary-foreground shadow-lg' \n                  : 'bg-secondary text-secondary-foreground hover:bg-accent hover:scale-105'\n              }`}\n              data-testid=\"link-dashboard\"\n            >\n              Raporlarım\n            </button>\n          </Link>\n          <Link href=\"/net-calculator\">\n            <button \n              className={`px-8 py-3 rounded-xl font-semibold text-lg transition-all duration-200 ${\n                location === '/net-calculator' \n                  ? 'bg-primary text-primary-foreground shadow-lg' \n                  : 'bg-secondary text-secondary-foreground hover:bg-accent hover:scale-105'\n              }`}\n            >\n              Net Hesapla\n            </button>\n          </Link>\n          <Link href=\"/timer\">\n            <button \n              className={`px-8 py-3 rounded-xl font-semibold text-lg transition-all duration-200 ${\n                location === '/timer' \n                  ? 'bg-primary text-primary-foreground shadow-lg' \n                  : 'bg-secondary text-secondary-foreground hover:bg-accent hover:scale-105'\n              }`}\n              data-testid=\"link-timer\"\n            >\n              Sayaç\n            </button>\n          </Link>\n        </div>\n      </nav>\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n        <div className=\"mb-8 text-center\">\n          <h1 className=\"text-4xl font-bold mb-3 bg-gradient-to-r from-primary via-purple-600 to-blue-600 bg-clip-text text-transparent flex items-center justify-center gap-3\">\n            <Sparkles className=\"h-10 w-10 text-primary animate-pulse\" />\n            Sayaç Merkezi\n            <Sparkles className=\"h-10 w-10 text-primary animate-pulse\" />\n          </h1>\n          <p className=\"text-lg text-muted-foreground\">Pomodoro, Kronometre ve Alarm ile produktiviteni artır</p>\n        </div>\n\n        {/* Modern Sound Controls */}\n        <div className=\"mb-8 flex items-center justify-center\">\n          <div className=\"bg-card/50 backdrop-blur-sm border border-border/50 rounded-2xl p-4 shadow-lg\">\n            <div className=\"flex items-center gap-6\">\n              <div className=\"flex items-center gap-3\">\n                <Switch \n                  checked={soundEnabled} \n                  onCheckedChange={setSoundEnabled}\n                  className=\"data-[state=checked]:bg-primary\"\n                />\n                <div className=\"flex items-center gap-2\">\n                  {soundEnabled ? \n                    <Volume2 className=\"h-5 w-5 text-primary\" /> : \n                    <VolumeX className=\"h-5 w-5 text-muted-foreground\" />\n                  }\n                  <span className=\"font-medium\">Ses Efektleri</span>\n                </div>\n              </div>\n              \n              <div className=\"h-6 w-px bg-border\" />\n              \n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-sm font-medium\">Alarm Sesi:</span>\n                <Select value={alarmSound} onValueChange={setAlarmSound}>\n                  <SelectTrigger className=\"w-32 border-primary/20 focus:border-primary\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"beep\">🔊 Bip</SelectItem>\n                    <SelectItem value=\"chime\">🔔 Çan</SelectItem>\n                    <SelectItem value=\"bell\">🔔 Zil</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-3 h-14 bg-card/30 backdrop-blur-sm border border-border/50 rounded-2xl p-2 shadow-lg\">\n            <TabsTrigger \n              value=\"stopwatch\" \n              className=\"flex items-center gap-2 rounded-xl font-semibold data-[state=active]:bg-gradient-to-r data-[state=active]:from-blue-500 data-[state=active]:to-cyan-500 data-[state=active]:text-white data-[state=active]:shadow-lg transition-all duration-300 hover:scale-105\"\n            >\n              <TimerIcon className=\"h-5 w-5\" />\n              ⏱️ Kronometre\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"pomodoro\" \n              className=\"flex items-center gap-2 rounded-xl font-semibold data-[state=active]:bg-gradient-to-r data-[state=active]:from-red-500 data-[state=active]:to-pink-500 data-[state=active]:text-white data-[state=active]:shadow-lg transition-all duration-300 hover:scale-105\"\n            >\n              <Target className=\"h-5 w-5\" />\n              🍅 Pomodoro\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"alarm\" \n              className=\"flex items-center gap-2 rounded-xl font-semibold data-[state=active]:bg-gradient-to-r data-[state=active]:from-orange-500 data-[state=active]:to-yellow-500 data-[state=active]:text-white data-[state=active]:shadow-lg transition-all duration-300 hover:scale-105\"\n            >\n              <AlarmClock className=\"h-5 w-5\" />\n              ⏰ Alarm\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Stopwatch */}\n          <TabsContent value=\"stopwatch\" className=\"mt-6\">\n            <Card className=\"bg-gradient-to-br from-card/70 via-card/50 to-blue-50/30 dark:to-blue-950/30 backdrop-blur-sm border-2 border-blue-200/30 dark:border-blue-800/30 shadow-2xl\">\n              <CardHeader className=\"text-center bg-gradient-to-r from-blue-500/10 to-cyan-500/10 rounded-t-lg border-b border-blue-200/30\">\n                <CardTitle className=\"text-2xl font-bold bg-gradient-to-r from-blue-600 to-cyan-600 bg-clip-text text-transparent flex items-center justify-center gap-2\">\n                  <Zap className=\"h-6 w-6 text-blue-500\" />\n                  ⏱️ Kronometre\n                </CardTitle>\n                <CardDescription className=\"text-lg\">Zaman tutma ve tur kaydetme ile performansını ölç</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-8 pt-8\">\n                <div className=\"text-center\">\n                  <div className=\"relative mb-8\">\n                    <div className=\"text-7xl font-mono font-bold tracking-wider bg-gradient-to-r from-blue-600 via-cyan-500 to-blue-700 bg-clip-text text-transparent drop-shadow-lg\">\n                      {formatTime(stopwatchState.time)}\n                    </div>\n                    <div className=\"absolute -inset-4 bg-gradient-to-r from-blue-500/20 to-cyan-500/20 blur-xl rounded-full opacity-60\"></div>\n                    \n                    {/* Goal Progress Indicator */}\n                    {timerGoal > 0 && (\n                      <div className=\"mt-4 p-4 bg-gradient-to-r from-purple-50 to-indigo-50 dark:from-purple-950/30 dark:to-indigo-950/30 rounded-xl border border-purple-200 dark:border-purple-800/50\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <span className=\"text-sm font-medium text-purple-700 dark:text-purple-300\">🎯 Hedef: {timerGoal} dakika</span>\n                          <span className=\"text-sm font-medium text-purple-700 dark:text-purple-300\">\n                            {((stopwatchState.time / (timerGoal * 60 * 1000)) * 100).toFixed(1)}%\n                          </span>\n                        </div>\n                        <div className=\"w-full bg-purple-200 dark:bg-purple-800/50 rounded-full h-3 overflow-hidden\">\n                          <div \n                            className={`h-full rounded-full transition-all duration-500 ${\n                              goalAchieved \n                                ? 'bg-gradient-to-r from-green-400 to-emerald-500 animate-pulse' \n                                : 'bg-gradient-to-r from-purple-500 to-indigo-600'\n                            }`}\n                            style={{\n                              width: `${Math.min(100, (stopwatchState.time / (timerGoal * 60 * 1000)) * 100)}%`\n                            }}\n                          />\n                        </div>\n                        {goalAchieved && (\n                          <div className=\"mt-2 text-center text-green-600 dark:text-green-400 font-bold animate-bounce\">\n                            🎉 Tebrikler! Hedefe ulaştın! 🎉\n                          </div>\n                        )}\n                      </div>\n                    )}\n                  </div>\n\n                  {/* Goal Setting Section */}\n                  <div className=\"mb-6 p-4 bg-gradient-to-r from-yellow-50 to-orange-50 dark:from-yellow-950/30 dark:to-orange-950/30 rounded-xl border border-yellow-200 dark:border-yellow-800/50\">\n                    <div className=\"flex items-center justify-center gap-2 mb-3\">\n                      <Target className=\"h-5 w-5 text-orange-600\" />\n                      <h3 className=\"text-lg font-bold text-orange-800 dark:text-orange-200\">Zaman Hedefi Belirle</h3>\n                    </div>\n                    <div className=\"flex items-center gap-3 justify-center\">\n                      <Input\n                        type=\"number\"\n                        value={goalInput}\n                        onChange={(e) => setGoalInput(e.target.value)}\n                        placeholder=\"Dakika\"\n                        className=\"w-24 text-center font-bold border-orange-300 focus:border-orange-500 dark:border-orange-700\"\n                        min=\"1\"\n                        max=\"1440\"\n                      />\n                      <span className=\"text-sm font-medium text-orange-700 dark:text-orange-300\">dakika</span>\n                      <Button\n                        onClick={setTimerGoalHandler}\n                        size=\"sm\"\n                        className=\"bg-gradient-to-r from-orange-500 to-yellow-500 hover:from-orange-600 hover:to-yellow-600 text-white font-bold px-4 py-2 rounded-lg shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-105\"\n                      >\n                        🎯 Hedef Ayarla\n                      </Button>\n                      {timerGoal > 0 && (\n                        <Button\n                          onClick={() => {\n                            setTimerGoal(0);\n                            setGoalAchieved(false);\n                            setShowConfetti(false);\n                            toast({\n                              title: 'Hedef Temizlendi',\n                              description: 'Zaman hedefi kaldırıldı.',\n                            });\n                          }}\n                          size=\"sm\"\n                          variant=\"outline\"\n                          className=\"border-red-300 text-red-600 hover:bg-red-50 dark:border-red-700 dark:text-red-400 dark:hover:bg-red-950/30\"\n                        >\n                          ❌ Temizle\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex justify-center gap-4 mb-8\">\n                    {!stopwatchState.isRunning ? (\n                      <Button \n                        onClick={handleStopwatchStart} \n                        size=\"lg\" \n                        className=\"px-10 py-4 text-lg font-semibold bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-600 hover:to-emerald-600 shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-105\"\n                      >\n                        <Play className=\"mr-2 h-6 w-6\" />\n                        🚀 Başlat\n                      </Button>\n                    ) : (\n                      <Button \n                        onClick={handleStopwatchPause} \n                        size=\"lg\" \n                        className=\"px-10 py-4 text-lg font-semibold bg-gradient-to-r from-yellow-500 to-orange-500 hover:from-yellow-600 hover:to-orange-600 shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-105 text-white\"\n                      >\n                        <Pause className=\"mr-2 h-6 w-6\" />\n                        ⏸️ Duraklat\n                      </Button>\n                    )}\n                    \n                    {stopwatchState.isRunning && (\n                      <Button \n                        onClick={handleStopwatchLap} \n                        size=\"lg\" \n                        className=\"px-10 py-4 text-lg font-semibold bg-gradient-to-r from-purple-500 to-indigo-500 hover:from-purple-600 hover:to-indigo-600 shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-105 text-white\"\n                      >\n                        <Plus className=\"mr-2 h-6 w-6\" />\n                        🏃 Tur\n                      </Button>\n                    )}\n                    \n                    <Button \n                      onClick={handleStopwatchReset} \n                      size=\"lg\" \n                      className=\"px-10 py-4 text-lg font-semibold bg-gradient-to-r from-red-500 to-pink-500 hover:from-red-600 hover:to-pink-600 shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-105 text-white\"\n                    >\n                      <RotateCcw className=\"mr-2 h-6 w-6\" />\n                      🔄 Sıfırla\n                    </Button>\n                  </div>\n                </div>\n\n                {stopwatchState.laps.length > 0 && (\n                  <div className=\"bg-gradient-to-br from-muted/50 to-slate-100/50 dark:to-slate-800/50 rounded-xl p-6 backdrop-blur-sm border border-blue-200/30\">\n                    <h3 className=\"font-bold text-xl mb-4 text-center bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">🏁 Tur Kayıtları</h3>\n                    <div className=\"max-h-80 overflow-y-auto space-y-3\">\n                      {stopwatchState.laps.map((lap, index) => (\n                        <div key={lap.id} className={`flex justify-between items-center p-4 rounded-lg shadow-md transition-all duration-300 hover:scale-102 ${\n                          index === 0 ? 'bg-gradient-to-r from-yellow-100 to-amber-100 dark:from-yellow-900/30 dark:to-amber-900/30 border border-yellow-300/50' : \n                          'bg-gradient-to-r from-slate-50 to-gray-100 dark:from-slate-800 dark:to-gray-800 border border-slate-200/50 dark:border-slate-700/50'\n                        }`}>\n                          <div className=\"flex items-center gap-3\">\n                            <div className={`w-8 h-8 rounded-full flex items-center justify-center font-bold text-sm ${\n                              index === 0 ? 'bg-yellow-500 text-white' : 'bg-blue-500 text-white'\n                            }`}>\n                              {lap.id}\n                            </div>\n                            <span className=\"font-semibold\">Tur {lap.id}</span>\n                          </div>\n                          <div className=\"flex gap-6\">\n                            <div className=\"text-right\">\n                              <div className=\"text-xs text-muted-foreground\">Ara Zaman</div>\n                              <span className=\"font-mono font-bold text-lg\">{formatTime(lap.split)}</span>\n                            </div>\n                            <div className=\"text-right\">\n                              <div className=\"text-xs text-muted-foreground\">Toplam</div>\n                              <span className=\"font-mono text-muted-foreground\">{formatTime(lap.time)}</span>\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Pomodoro */}\n          <TabsContent value=\"pomodoro\" className=\"mt-6\">\n            <Card className=\"bg-gradient-to-br from-card/70 via-card/50 to-red-50/30 dark:to-red-950/30 backdrop-blur-sm border-2 border-red-200/30 dark:border-red-800/30 shadow-2xl\">\n              <CardHeader className=\"text-center bg-gradient-to-r from-red-500/10 to-pink-500/10 rounded-t-lg border-b border-red-200/30\">\n                <CardTitle className=\"text-2xl font-bold bg-gradient-to-r from-red-600 to-pink-600 bg-clip-text text-transparent flex items-center justify-center gap-2\">\n                  <Target className=\"h-6 w-6 text-red-500\" />\n                  🍅 Pomodoro Tekniği\n                </CardTitle>\n                <CardDescription className=\"text-lg\">\n                  {pomodoroState.mode === 'work' && '💪 Çalışma süresi - Odaklan!'}\n                  {pomodoroState.mode === 'break' && '☕ Kısa mola - Nefes al!'}\n                  {pomodoroState.mode === 'longBreak' && '🏖️ Uzun mola - Dinlen!'}\n                  {' - Döngü ' + pomodoroState.currentCycle}\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-8 pt-8\">\n                <div className=\"text-center\">\n                  <div className=\"relative mb-6\">\n                    <div className=\"text-7xl font-mono font-bold tracking-wider bg-gradient-to-r from-red-600 via-pink-500 to-red-700 bg-clip-text text-transparent drop-shadow-lg\">\n                      {formatTime(pomodoroState.time, false)}\n                    </div>\n                    <div className=\"absolute -inset-4 bg-gradient-to-r from-red-500/20 to-pink-500/20 blur-xl rounded-full opacity-60\"></div>\n                  </div>\n                  \n                  <div className=\"flex justify-center gap-3 mb-8\">\n                    <Badge \n                      variant={pomodoroState.mode === 'work' ? 'default' : 'secondary'}\n                      className={`px-6 py-2 text-lg font-semibold ${\n                        pomodoroState.mode === 'work' \n                          ? 'bg-gradient-to-r from-red-500 to-pink-500 text-white shadow-lg' \n                          : pomodoroState.mode === 'break'\n                          ? 'bg-gradient-to-r from-green-500 to-emerald-500 text-white shadow-lg'\n                          : 'bg-gradient-to-r from-blue-500 to-cyan-500 text-white shadow-lg'\n                      }`}\n                    >\n                      {pomodoroState.mode === 'work' && '💪 Çalışma Zamanı'}\n                      {pomodoroState.mode === 'break' && '☕ Kısa Mola'}\n                      {pomodoroState.mode === 'longBreak' && '🏖️ Uzun Mola'}\n                    </Badge>\n                  </div>\n                  \n                  <div className=\"flex justify-center gap-4 mb-8\">\n                    {!pomodoroState.isRunning ? (\n                      <Button \n                        onClick={handlePomodoroStart} \n                        size=\"lg\" \n                        className=\"px-10 py-4 text-lg font-semibold bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-600 hover:to-emerald-600 shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-105\"\n                      >\n                        <Play className=\"mr-2 h-6 w-6\" />\n                        🚀 Başlat\n                      </Button>\n                    ) : (\n                      <Button \n                        onClick={handlePomodoroPause} \n                        size=\"lg\" \n                        className=\"px-10 py-4 text-lg font-semibold bg-gradient-to-r from-yellow-500 to-orange-500 hover:from-yellow-600 hover:to-orange-600 shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-105 text-white\"\n                      >\n                        <Pause className=\"mr-2 h-6 w-6\" />\n                        ⏸️ Duraklat\n                      </Button>\n                    )}\n                    \n                    <Button \n                      onClick={handlePomodoroReset} \n                      size=\"lg\" \n                      className=\"px-10 py-4 text-lg font-semibold bg-gradient-to-r from-red-500 to-pink-500 hover:from-red-600 hover:to-pink-600 shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-105 text-white\"\n                    >\n                      <RotateCcw className=\"mr-2 h-6 w-6\" />\n                      🔄 Sıfırla\n                    </Button>\n                  </div>\n                </div>\n\n                <div className=\"bg-gradient-to-br from-muted/50 to-slate-100/50 dark:to-slate-800/50 rounded-xl p-6 backdrop-blur-sm border border-red-200/30\">\n                  <h3 className=\"font-bold text-xl mb-6 text-center bg-gradient-to-r from-red-600 to-pink-600 bg-clip-text text-transparent\">⚙️ Ayarlar</h3>\n                  <div className=\"grid grid-cols-2 md:grid-cols-4 gap-6\">\n                    <div className=\"space-y-2\">\n                      <label className=\"text-sm font-semibold flex items-center gap-2\">\n                        💪 Çalışma (dk)\n                      </label>\n                      <Input\n                        type=\"number\"\n                        value={pomodoroSettings.workTime}\n                        onChange={(e) => setPomodoroSettings(prev => ({\n                          ...prev,\n                          workTime: parseInt(e.target.value) || 25\n                        }))}\n                        min=\"1\"\n                        max=\"60\"\n                        className=\"border-red-200/50 focus:border-red-500 font-mono text-center text-lg\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <label className=\"text-sm font-semibold flex items-center gap-2\">\n                        ☕ Mola (dk)\n                      </label>\n                      <Input\n                        type=\"number\"\n                        value={pomodoroSettings.breakTime}\n                        onChange={(e) => setPomodoroSettings(prev => ({\n                          ...prev,\n                          breakTime: parseInt(e.target.value) || 5\n                        }))}\n                        min=\"1\"\n                        max=\"30\"\n                        className=\"border-green-200/50 focus:border-green-500 font-mono text-center text-lg\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <label className=\"text-sm font-semibold flex items-center gap-2\">\n                        🏖️ Uzun Mola (dk)\n                      </label>\n                      <Input\n                        type=\"number\"\n                        value={pomodoroSettings.longBreakTime}\n                        onChange={(e) => setPomodoroSettings(prev => ({\n                          ...prev,\n                          longBreakTime: parseInt(e.target.value) || 15\n                        }))}\n                        min=\"5\"\n                        max=\"60\"\n                        className=\"border-blue-200/50 focus:border-blue-500 font-mono text-center text-lg\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <label className=\"text-sm font-semibold flex items-center gap-2\">\n                        🔄 Döngü Sayısı\n                      </label>\n                      <Input\n                        type=\"number\"\n                        value={pomodoroSettings.cycles}\n                        onChange={(e) => setPomodoroSettings(prev => ({\n                          ...prev,\n                          cycles: parseInt(e.target.value) || 4\n                        }))}\n                        min=\"1\"\n                        max=\"10\"\n                        className=\"border-purple-200/50 focus:border-purple-500 font-mono text-center text-lg\"\n                      />\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Alarm */}\n          <TabsContent value=\"alarm\" className=\"mt-6\">\n            <Card className=\"bg-gradient-to-br from-card/70 via-card/50 to-orange-50/30 dark:to-orange-950/30 backdrop-blur-sm border-2 border-orange-200/30 dark:border-orange-800/30 shadow-2xl\">\n              <CardHeader className=\"text-center bg-gradient-to-r from-orange-500/10 to-yellow-500/10 rounded-t-lg border-b border-orange-200/30\">\n                <CardTitle className=\"text-2xl font-bold bg-gradient-to-r from-orange-600 to-yellow-600 bg-clip-text text-transparent flex items-center justify-center gap-2\">\n                  <AlarmClock className=\"h-6 w-6 text-orange-500\" />\n                  ⏰ Alarm Merkezi\n                </CardTitle>\n                <CardDescription className=\"text-lg\">Alarm kurun ve zamanında uyarı alın</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-8 pt-8\">\n                <div className=\"bg-gradient-to-r from-orange-100/50 to-yellow-100/50 dark:from-orange-900/30 dark:to-yellow-900/30 rounded-xl p-6 backdrop-blur-sm border border-orange-200/50\">\n                  <h3 className=\"font-bold text-lg mb-4 text-center text-orange-700 dark:text-orange-300\">➕ Yeni Alarm Ekle</h3>\n                  <div className=\"flex gap-4\">\n                    <Input\n                      type=\"time\"\n                      value={newAlarmTime}\n                      onChange={(e) => setNewAlarmTime(e.target.value)}\n                      onClick={() => {\n                        if (!newAlarmTime) {\n                          const now = new Date();\n                          const currentTime = `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`;\n                          setNewAlarmTime(currentTime);\n                        }\n                      }}\n                      placeholder=\"HH:MM\"\n                      className=\"text-2xl font-mono text-center border-orange-200/50 focus:border-orange-500 bg-white/70 dark:bg-slate-800/70\"\n                    />\n                    <Button \n                      onClick={addAlarm} \n                      disabled={!newAlarmTime}\n                      className=\"px-8 py-3 text-lg font-semibold bg-gradient-to-r from-orange-500 to-yellow-500 hover:from-orange-600 hover:to-yellow-600 shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-105\"\n                    >\n                      <Plus className=\"mr-2 h-5 w-5\" />\n                      🔔 Ekle\n                    </Button>\n                  </div>\n                </div>\n\n                {alarms.length > 0 && (\n                  <div className=\"space-y-4\">\n                    <h3 className=\"font-bold text-xl text-center bg-gradient-to-r from-orange-600 to-yellow-600 bg-clip-text text-transparent\">📅 Aktif Alarmlar</h3>\n                    <div className=\"space-y-3 max-h-80 overflow-y-auto\">\n                      {alarms.map((alarm, index) => (\n                        <div key={alarm.time} className={`flex items-center justify-between p-6 rounded-xl shadow-lg transition-all duration-300 hover:scale-102 ${\n                          alarm.enabled \n                            ? 'bg-gradient-to-r from-green-100 to-emerald-100 dark:from-green-900/40 dark:to-emerald-900/40 border-2 border-green-300/50' \n                            : 'bg-gradient-to-r from-gray-100 to-slate-100 dark:from-gray-800/50 dark:to-slate-800/50 border-2 border-gray-300/50'\n                        }`}>\n                          <div className=\"flex items-center gap-6\">\n                            <div className={`w-12 h-12 rounded-full flex items-center justify-center font-bold text-lg shadow-lg ${\n                              alarm.enabled ? 'bg-gradient-to-r from-green-500 to-emerald-500 text-white' : 'bg-gray-400 text-white'\n                            }`}>\n                              ⏰\n                            </div>\n                            <div>\n                              <div className=\"text-3xl font-mono font-bold text-foreground\">\n                                {alarm.time}\n                              </div>\n                              <Badge \n                                variant={alarm.enabled ? 'default' : 'secondary'}\n                                className={`mt-1 ${\n                                  alarm.enabled \n                                    ? 'bg-gradient-to-r from-orange-500 to-yellow-500 text-white' \n                                    : 'bg-gray-400 text-white'\n                                }`}\n                              >\n                                🔊 {alarm.sound}\n                              </Badge>\n                            </div>\n                          </div>\n                          <div className=\"flex items-center gap-4\">\n                            <div className=\"flex flex-col items-center gap-2\">\n                              <Switch\n                                checked={alarm.enabled}\n                                onCheckedChange={() => toggleAlarm(alarm.time)}\n                                className=\"data-[state=checked]:bg-green-500\"\n                              />\n                              <span className=\"text-xs font-medium\">\n                                {alarm.enabled ? '🟢 Aktif' : '🔴 Pasif'}\n                              </span>\n                            </div>\n                            <Button \n                              size=\"lg\" \n                              variant=\"destructive\"\n                              onClick={() => removeAlarm(alarm.time)}\n                              className=\"bg-gradient-to-r from-red-500 to-pink-500 hover:from-red-600 hover:to-pink-600 shadow-lg hover:shadow-xl transition-all duration-300\"\n                            >\n                              <Trash2 className=\"h-5 w-5\" />\n                            </Button>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n\n                {alarms.length === 0 && (\n                  <div className=\"text-center py-12\">\n                    <div className=\"text-6xl mb-4\">⏰</div>\n                    <h3 className=\"text-xl font-bold text-muted-foreground mb-2\">Henüz Alarm Yok</h3>\n                    <p className=\"text-muted-foreground\">Yukarıdan yeni bir alarm ekleyerek başlayın!</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":45628},"VSCode_SETUP_INSTRUCTIONS.md":{"content":"# Çalışma/Verimlilik Dashboard - VSCode Kurulum Kılavuzu\n\n## Proje İndir ve Çalıştır\n\n### 1. Gerekli Programlar\n- Node.js (v16 veya üzeri) - [nodejs.org](https://nodejs.org) adresinden indirebilirsiniz\n- VSCode - [code.visualstudio.com](https://code.visualstudio.com) adresinden indirebilirsiniz\n\n### 2. Projeyi İndirin ve Açın\n1. Projeyi Replit'ten indirin (Download as ZIP)\n2. Dosyaları bilgisayarınızda bir klasöre çıkarın\n3. VSCode'u açın\n4. File → Open Folder ile proje klasörünü açın\n\n### 3. Bağımlılıkları Yükleyin\nVSCode'da Terminal açın (Ctrl+`) ve şu komutu çalıştırın:\n```bash\nnpm install\n```\n\n### 4. Projeyi Başlatın\n```bash\nnpm run dev\n```\n\nProje http://localhost:5000 adresinde çalışmaya başlayacak.\n\n## Hava Durumu API Kurulumu\n\n### OpenWeather API Key Alma\n1. [OpenWeatherMap](https://openweathermap.org/api) sitesine üye olun\n2. API Keys bölümünden ücretsiz API key'inizi alın\n\n### API Key'i Projeye Ekleme\n\n#### Yöntem 1: Environment Variables (.env dosyası) - ÖNERİLEN\n1. Proje ana klasöründe `.env` dosyası oluşturun\n2. Dosyaya şunu ekleyin:\n```\nOPENWEATHER_API_KEY=your_api_key_here\n```\n3. `your_api_key_here` yerine gerçek API key'inizi yazın\n\n#### Yöntem 2: Doğrudan Kod İçinde (Güvenli Değil)\n`server/routes.ts` dosyasında, weather endpoint'inde:\n```typescript\nconst OPENWEATHER_API_KEY = \"your_api_key_here\"; // Gerçek API key'inizi buraya yazın\n```\n\n### Güvenlik Notu\n- API key'inizi asla GitHub'a yüklemeyin\n- `.env` dosyasını `.gitignore` dosyasına ekleyin\n- Production'da environment variables kullanın\n\n## Yararlı VSCode Eklentileri\n- ES7+ React/Redux/React-Native snippets\n- Auto Rename Tag\n- Prettier - Code formatter\n- TypeScript Importer\n- Tailwind CSS IntelliSense\n\n## Geliştirme Komutları\n- `npm run dev` - Geliştirme sunucusunu başlat\n- `npm run build` - Üretim için build al\n- `npm start` - Üretim sunucusunu başlat\n- `npm run check` - TypeScript tip kontrolü\n\n## Sorun Giderme\n1. **Port 5000 meşgul hatası**: Farklı bir port kullanın veya çalışan servisi durdurun\n2. **Module not found**: `npm install` komutunu tekrar çalıştırın\n3. **TypeScript hataları**: `npm run check` ile kontrol edin\n\nBaşarılı kurulum sonrası dashboard tam fonksiyonel olarak çalışacaktır!","size_bytes":2314},"attached_assets/dashboard_1758658710452.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Header } from \"@/components/header\";\nimport { Link, useLocation } from \"wouter\";\nimport { TrendingUp, BarChart3, Target, Brain, BookOpen, Plus, CalendarDays, X, FlaskConical, Trash2, AlertTriangle, Sparkles, Award, Clock, Zap, Edit } from \"lucide-react\";\nimport { Task, Goal, QuestionLog, InsertQuestionLog, ExamResult, InsertExamResult } from \"@shared/schema\";\nimport { DashboardSummaryCards } from \"@/components/dashboard-summary-cards\";\nimport { AdvancedCharts } from \"@/components/advanced-charts\";\nimport { QuestionAnalysisCharts } from \"@/components/question-analysis-charts\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface DailySummary {\n  date: string;\n  tasksCompleted: number;\n  totalTasks: number;\n  moods: any[];\n  productivity: number;\n}\n\ninterface TopicStats {\n  topic: string;\n  wrongMentions: number;\n  totalSessions: number;\n  mentionFrequency: number;\n}\n\ninterface PriorityTopic {\n  topic: string;\n  priority: number;\n  lastSeen: string;\n  improvementNeeded: boolean;\n}\n\nexport default function Dashboard() {\n  const [location] = useLocation();\n  const [showQuestionDialog, setShowQuestionDialog] = useState(false);\n  const [editingQuestionLog, setEditingQuestionLog] = useState<QuestionLog | null>(null);\n  const [newQuestion, setNewQuestion] = useState({ \n    exam_type: \"TYT\", \n    subject: \"Türkçe\", \n    correct_count: \"\", \n    wrong_count: \"\", \n    blank_count: \"\", \n    study_date: new Date().toISOString().split('T')[0],\n    wrong_topics: [] as string[],\n    time_spent_minutes: \"\"\n  });\n  const [wrongTopicInput, setWrongTopicInput] = useState(\"\");\n  const [showExamDialog, setShowExamDialog] = useState(false);\n  const [newExamResult, setNewExamResult] = useState({ exam_name: \"\", exam_date: new Date().toISOString().split('T')[0], tyt_net: \"\", ayt_net: \"\", ranking: \"\", notes: \"\" });\n  const { toast } = useToast();\n\n  const { data: tasks = [] } = useQuery<Task[]>({\n    queryKey: [\"/api/tasks\"],\n  });\n\n  const { data: dailySummary = [] } = useQuery<DailySummary[]>({\n    queryKey: [\"/api/summary/daily\"],\n  });\n  \n  const { data: questionLogs = [] } = useQuery<QuestionLog[]>({\n    queryKey: [\"/api/question-logs\"],\n  });\n  \n  const { data: examResults = [] } = useQuery<ExamResult[]>({\n    queryKey: [\"/api/exam-results\"],\n  });\n\n  const { data: topicStats = [] } = useQuery<TopicStats[]>({\n    queryKey: [\"/api/topics/stats\"],\n  });\n\n  const { data: priorityTopics = [] } = useQuery<PriorityTopic[]>({\n    queryKey: [\"/api/topics/priority\"],\n  });\n\n  const createQuestionLogMutation = useMutation({\n    mutationFn: (data: InsertQuestionLog) => apiRequest(\"POST\", \"/api/question-logs\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/question-logs\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/topics/stats\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/topics/priority\"] });\n      toast({ title: \"✅ Soru kaydı eklendi\", description: \"Soru çözüm kaydınız eklendi ve analiz güncellendi!\" });\n      setShowQuestionDialog(false);\n      setNewQuestion({ \n        exam_type: \"TYT\", \n        subject: \"Türkçe\", \n        correct_count: \"\", \n        wrong_count: \"\", \n        blank_count: \"\", \n        study_date: new Date().toISOString().split('T')[0],\n        wrong_topics: [],\n        time_spent_minutes: \"\"\n      });\n      setWrongTopicInput(\"\");\n    },\n    onError: () => {\n      toast({ title: \"❌ Hata\", description: \"Soru kaydı eklenemedi.\", variant: \"destructive\" });\n    },\n  });\n\n  const deleteQuestionLogMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/question-logs/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/question-logs\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/topics/stats\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/topics/priority\"] });\n      toast({ title: \"🗑️ Soru kaydı silindi\", description: \"Soru çözüm kaydınız başarıyla silindi.\" });\n    },\n    onError: () => {\n      toast({ title: \"❌ Hata\", description: \"Soru kaydı silinemedi.\", variant: \"destructive\" });\n    },\n  });\n\n  const updateQuestionLogMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: Partial<InsertQuestionLog> }) => \n      apiRequest(\"PUT\", `/api/question-logs/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/question-logs\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/topics/stats\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/topics/priority\"] });\n      setEditingQuestionLog(null);\n      setShowQuestionDialog(false);\n      toast({ title: \"📝 Soru kaydı güncellendi\", description: \"Soru çözüm kaydınız başarıyla güncellendi.\" });\n    },\n    onError: () => {\n      toast({ title: \"❌ Hata\", description: \"Soru kaydı güncellenemedi.\", variant: \"destructive\" });\n    },\n  });\n  \n  const createExamResultMutation = useMutation({\n    mutationFn: (data: InsertExamResult) => apiRequest(\"POST\", \"/api/exam-results\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/exam-results\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/exam-subject-nets\"] });\n      toast({ title: \"Deneme sonucu eklendi\", description: \"Deneme sınav sonucunuz kaydedildi.\" });\n      setShowExamDialog(false);\n      setNewExamResult({ exam_name: \"\", exam_date: new Date().toISOString().split('T')[0], tyt_net: \"\", ayt_net: \"\", ranking: \"\", notes: \"\" });\n    },\n    onError: () => {\n      toast({ title: \"Hata\", description: \"Deneme sonucu eklenemedi.\", variant: \"destructive\" });\n    },\n  });\n  \n  const deleteExamResultMutation = useMutation({\n    mutationFn: (examId: string) => apiRequest(\"DELETE\", `/api/exam-results/${examId}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/exam-results\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/exam-subject-nets\"] });\n      toast({ title: \"Deneme sonucu silindi\", description: \"Deneme sınav sonucunuz başarıyla silindi.\" });\n    },\n    onError: () => {\n      toast({ title: \"Hata\", description: \"Deneme sonucu silinemedi.\", variant: \"destructive\" });\n    },\n  });\n\n  // Subject options based on TYT/AYT\n  const getSubjectOptions = (examType: string) => {\n    if (examType === \"TYT\") {\n      return [\"Türkçe\", \"Sosyal Bilimler\", \"Matematik\", \"Fizik\", \"Kimya\", \"Biyoloji\"];\n    } else {\n      return [\"Matematik\", \"Fizik\", \"Kimya\", \"Biyoloji\"];\n    }\n  };\n\n  // Generate heatmap data for last 3 months\n  const generateHeatmapData = () => {\n    const data = [];\n    const today = new Date();\n    for (let i = 89; i >= 0; i--) {\n      const date = new Date(today);\n      date.setDate(today.getDate() - i);\n      const dateStr = date.toISOString().split('T')[0];\n      \n      // Find matching daily summary\n      const daySummary = dailySummary.find(d => d.date === dateStr);\n      const intensity = daySummary ? Math.min(daySummary.tasksCompleted / 5, 1) : 0;\n      \n      data.push({\n        date: dateStr,\n        day: date.getDate(),\n        month: date.getMonth(),\n        intensity,\n        count: daySummary?.tasksCompleted || 0\n      });\n    }\n    return data;\n  };\n\n  const heatmapData = generateHeatmapData();\n\n\n  // Recent activities (last 10 items combined)\n  const recentActivities = [\n    ...questionLogs.slice(0, 5).map(log => ({\n      type: 'question',\n      title: `${log.exam_type} ${log.subject} - ${log.correct_count} doğru`,\n      date: log.study_date,\n      icon: Brain\n    })),\n    ...examResults.slice(0, 5).map(exam => ({\n      type: 'exam',\n      title: `${exam.exam_name} - TYT: ${exam.tyt_net}`,\n      date: exam.exam_date,\n      icon: BarChart3\n    })),\n    ...tasks.filter(t => t.completed).slice(0, 5).map(task => ({\n      type: 'task',\n      title: task.title,\n      date: task.createdAt || new Date().toISOString(),\n      icon: Target\n    }))\n  ].sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime()).slice(0, 8);\n\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-background to-secondary/20\">\n      <Header />\n      \n      {/* Centered Navigation */}\n      <nav className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n        <div className=\"flex items-center justify-center space-x-6\">\n          <Link href=\"/\">\n            <button \n              className={`px-8 py-3 rounded-xl font-semibold text-lg transition-all duration-200 ${\n                location === '/' \n                  ? 'bg-primary text-primary-foreground shadow-lg' \n                  : 'bg-secondary text-secondary-foreground hover:bg-accent hover:scale-105'\n              }`}\n              data-testid=\"link-homepage\"\n            >\n              Anasayfa\n            </button>\n          </Link>\n          <Link href=\"/tasks\">\n            <button \n              className={`px-8 py-3 rounded-xl font-semibold text-lg transition-all duration-200 ${\n                location === '/tasks' \n                  ? 'bg-primary text-primary-foreground shadow-lg' \n                  : 'bg-secondary text-secondary-foreground hover:bg-accent hover:scale-105'\n              }`}\n              data-testid=\"link-todos\"\n            >\n              Yapılacaklar\n            </button>\n          </Link>\n          <Link href=\"/dashboard\">\n            <button \n              className={`px-8 py-3 rounded-xl font-semibold text-lg transition-all duration-200 ${\n                location === '/dashboard' \n                  ? 'bg-primary text-primary-foreground shadow-lg' \n                  : 'bg-secondary text-secondary-foreground hover:bg-accent hover:scale-105'\n              }`}\n              data-testid=\"link-dashboard\"\n            >\n              Raporlarım\n            </button>\n          </Link>\n          <Link href=\"/net-calculator\">\n            <button \n              className={`px-8 py-3 rounded-xl font-semibold text-lg transition-all duration-200 ${\n                location === '/net-calculator' \n                  ? 'bg-primary text-primary-foreground shadow-lg' \n                  : 'bg-secondary text-secondary-foreground hover:bg-accent hover:scale-105'\n              }`}\n            >\n              Net Hesapla\n            </button>\n          </Link>\n          <Link href=\"/timer\">\n            <button \n              className={`px-8 py-3 rounded-xl font-semibold text-lg transition-all duration-200 ${\n                location === '/timer' \n                  ? 'bg-primary text-primary-foreground shadow-lg' \n                  : 'bg-secondary text-secondary-foreground hover:bg-accent hover:scale-105'\n              }`}\n              data-testid=\"link-timer\"\n            >\n              Sayaç\n            </button>\n          </Link>\n        </div>\n      </nav>\n\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n        {/* Modern Dashboard Header */}\n        <div className=\"mb-8 text-center\">\n          <h1 className=\"text-4xl font-bold mb-3 bg-gradient-to-r from-primary via-purple-600 to-blue-600 bg-clip-text text-transparent flex items-center justify-center gap-3\">\n            <Sparkles className=\"h-10 w-10 text-primary animate-pulse\" />\n            📊 Raporlarım\n            <Sparkles className=\"h-10 w-10 text-primary animate-pulse\" />\n          </h1>\n          <p className=\"text-lg text-muted-foreground\">Çalışma verilerinizin kapsamlı analizi ve kişiselleştirilmiş öneriler</p>\n        </div>\n\n        {/* Summary Cards */}\n        <DashboardSummaryCards />\n\n        {/* Solved Questions Count Section with CRUD */}\n        <div className=\"grid grid-cols-1 gap-6 mb-8\">\n          <Card className=\"bg-gradient-to-br from-green-50/50 via-card to-emerald-50/50 dark:from-green-950/30 dark:via-card dark:to-emerald-950/30 backdrop-blur-sm border-2 border-green-200/30 dark:border-green-800/30 shadow-2xl\">\n            <CardHeader className=\"bg-gradient-to-r from-green-500/10 to-emerald-500/10 rounded-t-lg border-b border-green-200/30\">\n              <CardTitle className=\"text-xl font-bold bg-gradient-to-r from-green-600 to-emerald-600 bg-clip-text text-transparent flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  <BarChart3 className=\"h-6 w-6 text-green-500\" />\n                  📊 Çözülen Soru Sayısı\n                </div>\n                <Button \n                  onClick={() => setShowQuestionDialog(true)}\n                  size=\"sm\" \n                  variant=\"outline\"\n                  className=\"text-xs border-green-300 text-green-700 hover:bg-green-50\"\n                >\n                  <Plus className=\"h-3 w-3 mr-1\" />\n                  Soru Ekle\n                </Button>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"pt-6\">\n              {questionLogs.length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <BarChart3 className=\"h-12 w-12 mx-auto mb-3 opacity-40\" />\n                  <h3 className=\"font-medium mb-1\">Henüz soru kaydı yok</h3>\n                  <p className=\"text-sm\">Çözdüğünüz soruları kaydetmeye başlayın - istatistiklerinizi görmek için! 📊</p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {/* Summary Stats */}\n                  <div className=\"grid grid-cols-3 gap-4 mb-6\">\n                    <div className=\"text-center p-4 bg-gradient-to-r from-green-100/50 to-emerald-100/50 dark:from-green-900/20 dark:to-emerald-900/20 rounded-xl border border-green-200/50\">\n                      <div className=\"text-2xl font-bold text-green-600\">\n                        {questionLogs.reduce((total, log) => total + parseInt(log.correct_count), 0)}\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">Toplam Doğru</div>\n                    </div>\n                    <div className=\"text-center p-4 bg-gradient-to-r from-red-100/50 to-pink-100/50 dark:from-red-900/20 dark:to-pink-900/20 rounded-xl border border-red-200/50\">\n                      <div className=\"text-2xl font-bold text-red-600\">\n                        {questionLogs.reduce((total, log) => total + parseInt(log.wrong_count), 0)}\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">Toplam Yanlış</div>\n                    </div>\n                    <div className=\"text-center p-4 bg-gradient-to-r from-yellow-100/50 to-amber-100/50 dark:from-yellow-900/20 dark:to-amber-900/20 rounded-xl border border-yellow-200/50\">\n                      <div className=\"text-2xl font-bold text-yellow-600\">\n                        {questionLogs.reduce((total, log) => total + parseInt(log.blank_count || '0'), 0)}\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">Toplam Boş</div>\n                    </div>\n                  </div>\n\n                  {/* Question Logs List with Edit/Delete */}\n                  <div className=\"space-y-3 max-h-80 overflow-y-auto\">\n                    {questionLogs.slice(0, 10).map((log, index) => (\n                      <div key={log.id} className=\"p-4 bg-gradient-to-r from-green-100/30 to-emerald-100/30 dark:from-green-900/20 dark:to-emerald-900/20 rounded-xl border border-green-200/50 transition-all hover:scale-102 hover:shadow-md\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <div className=\"flex items-center gap-3\">\n                            <div className=\"w-8 h-8 rounded-full bg-gradient-to-r from-green-500 to-emerald-500 text-white flex items-center justify-center font-bold text-sm\">\n                              {index + 1}\n                            </div>\n                            <div>\n                              <div className=\"font-semibold text-foreground\">\n                                {log.exam_type} - {log.subject}\n                              </div>\n                              <div className=\"text-xs text-muted-foreground\">\n                                {new Date(log.study_date).toLocaleDateString('tr-TR')}\n                              </div>\n                            </div>\n                          </div>\n                          <div className=\"flex items-center gap-2\">\n                            <button\n                              onClick={() => deleteQuestionLogMutation.mutate(log.id)}\n                              disabled={deleteQuestionLogMutation.isPending}\n                              className=\"text-red-500 hover:text-red-700 p-1 hover:bg-red-50 dark:hover:bg-red-900/20 rounded transition-colors\"\n                              title=\"Soru kaydını sil\"\n                            >\n                              <Trash2 className=\"h-3 w-3\" />\n                            </button>\n                          </div>\n                        </div>\n                        <div className=\"grid grid-cols-3 gap-2 text-sm\">\n                          <div className=\"text-center p-2 bg-white/50 dark:bg-slate-800/50 rounded-lg\">\n                            <div className=\"font-bold text-green-600\">{log.correct_count}</div>\n                            <div className=\"text-xs text-muted-foreground\">Doğru</div>\n                          </div>\n                          <div className=\"text-center p-2 bg-white/50 dark:bg-slate-800/50 rounded-lg\">\n                            <div className=\"font-bold text-red-600\">{log.wrong_count}</div>\n                            <div className=\"text-xs text-muted-foreground\">Yanlış</div>\n                          </div>\n                          <div className=\"text-center p-2 bg-white/50 dark:bg-slate-800/50 rounded-lg\">\n                            <div className=\"font-bold text-yellow-600\">{log.blank_count || '0'}</div>\n                            <div className=\"text-xs text-muted-foreground\">Boş</div>\n                          </div>\n                        </div>\n                        {log.wrong_topics && log.wrong_topics.length > 0 && (\n                          <div className=\"mt-2 text-xs text-red-600\">\n                            <span className=\"font-medium\">Yanlış Konular:</span> {log.wrong_topics.join(', ')}\n                          </div>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Advanced Charts */}\n        <AdvancedCharts />\n\n        {/* Question Analysis Charts */}\n        <QuestionAnalysisCharts />\n\n        {/* Top Row - Heatmap and Snapshot */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6\">\n          {/* Activity Heatmap */}\n          <div className=\"bg-card rounded-xl border border-border p-6\">\n            <h3 className=\"text-lg font-semibold text-foreground mb-4 flex items-center\">\n              <CalendarDays className=\"h-5 w-5 mr-2 text-primary\" />\n              Aktivite Haritası (Son 90 Gün)\n            </h3>\n            <div className=\"grid grid-cols-15 gap-1\">\n              {heatmapData.map((day, index) => (\n                <div\n                  key={index}\n                  className={`w-3 h-3 rounded-sm transition-all hover:scale-110 ${\n                    day.intensity === 0 ? 'bg-muted/30' :\n                    day.intensity < 0.25 ? 'bg-green-200 dark:bg-green-900/40' :\n                    day.intensity < 0.5 ? 'bg-green-300 dark:bg-green-800/60' :\n                    day.intensity < 0.75 ? 'bg-green-500 dark:bg-green-700/80' :\n                    'bg-green-600 dark:bg-green-600'\n                  }`}\n                  title={`${day.date}: ${day.count} görev`}\n                />\n              ))}\n            </div>\n            <div className=\"flex items-center justify-between mt-3 text-xs text-muted-foreground\">\n              <span>Az</span>\n              <div className=\"flex gap-1\">\n                <div className=\"w-3 h-3 bg-muted/30 rounded-sm\"></div>\n                <div className=\"w-3 h-3 bg-green-200 dark:bg-green-900/40 rounded-sm\"></div>\n                <div className=\"w-3 h-3 bg-green-300 dark:bg-green-800/60 rounded-sm\"></div>\n                <div className=\"w-3 h-3 bg-green-500 dark:bg-green-700/80 rounded-sm\"></div>\n                <div className=\"w-3 h-3 bg-green-600 dark:bg-green-600 rounded-sm\"></div>\n              </div>\n              <span>Çok</span>\n            </div>\n          </div>\n\n          {/* Net & Deneme Snapshot */}\n          <div className=\"bg-card rounded-xl border border-border p-6\">\n            <h3 className=\"text-lg font-semibold text-foreground mb-4 flex items-center justify-between\">\n              <div className=\"flex items-center\">\n                <BarChart3 className=\"h-5 w-5 mr-2 text-green-600\" />\n                Net & Deneme\n              </div>\n              <Button \n                onClick={() => setShowExamDialog(true)}\n                size=\"sm\" \n                variant=\"outline\"\n                className=\"text-xs\"\n              >\n                <Plus className=\"h-3 w-3 mr-1\" />\n                Ekle\n              </Button>\n            </h3>\n            \n            {examResults.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                <BarChart3 className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n                <p className=\"text-sm\">Henüz deneme kaydı yok</p>\n              </div>\n            ) : (\n              <div className=\"space-y-3 max-h-64 overflow-y-auto\">\n                {/* Exam results list */}\n                {examResults.slice(0, 5).map((exam, index) => (\n                  <div key={exam.id} className=\"p-3 bg-muted/20 rounded-lg\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <div className=\"text-sm font-medium text-foreground\">\n                        {index === 0 ? 'Son Deneme' : `${index + 1}. Deneme`}\n                      </div>\n                      <button\n                        onClick={() => deleteExamResultMutation.mutate(exam.id)}\n                        disabled={deleteExamResultMutation.isPending}\n                        className=\"text-red-500 hover:text-red-700 p-1 hover:bg-red-50 dark:hover:bg-red-900/20 rounded transition-colors\"\n                        title=\"Deneme sonucunu sil\"\n                        data-testid={`button-delete-exam-${exam.id}`}\n                      >\n                        <Trash2 className=\"h-3 w-3\" />\n                      </button>\n                    </div>\n                    <div className=\"space-y-1\">\n                      <div className=\"text-xs text-muted-foreground\">{exam.exam_name}</div>\n                      <div className=\"text-xs text-muted-foreground mb-1\">\n                        {new Date(exam.exam_date).toLocaleDateString('tr-TR')}\n                      </div>\n                      <div className=\"flex gap-2 text-sm\">\n                        <span className=\"text-blue-600\">TYT: {exam.tyt_net}</span>\n                        {exam.ayt_net && (\n                          <span className=\"text-green-600\">AYT: {exam.ayt_net}</span>\n                        )}\n                      </div>\n                      {exam.ranking && (\n                        <div className=\"text-xs text-orange-600\">Sıralama: {exam.ranking}</div>\n                      )}\n                    </div>\n                  </div>\n                ))}\n\n                {/* Question stats */}\n                <div className=\"p-3 bg-muted/20 rounded-lg\">\n                  <div className=\"text-sm font-medium text-foreground mb-2\">Soru İstatistikleri</div>\n                  <div className=\"grid grid-cols-3 gap-2 text-xs\">\n                    <div className=\"text-center\">\n                      <div className=\"text-green-600 font-medium\">\n                        {questionLogs.reduce((total, log) => total + parseInt(log.correct_count), 0)}\n                      </div>\n                      <div className=\"text-muted-foreground\">Doğru</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-red-600 font-medium\">\n                        {questionLogs.reduce((total, log) => total + parseInt(log.wrong_count), 0)}\n                      </div>\n                      <div className=\"text-muted-foreground\">Yanlış</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-yellow-600 font-medium\">\n                        {questionLogs.reduce((total, log) => total + parseInt(log.blank_count || '0'), 0)}\n                      </div>\n                      <div className=\"text-muted-foreground\">Boş</div>\n                    </div>\n                  </div>\n                </div>\n\n                <Button \n                  onClick={() => setShowQuestionDialog(true)}\n                  size=\"sm\" \n                  variant=\"outline\" \n                  className=\"w-full\"\n                >\n                  <Plus className=\"h-3 w-3 mr-1\" />\n                  Soru Ekle\n                </Button>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Recent Activities - Full Width */}\n        <div className=\"bg-card rounded-xl border border-border p-6 mb-6\">\n          <h3 className=\"text-lg font-semibold text-foreground mb-4 flex items-center\">\n            <TrendingUp className=\"h-5 w-5 mr-2 text-primary\" />\n            Son Aktiviteler\n          </h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3\">\n            {recentActivities.length === 0 ? (\n              <div className=\"col-span-full text-center py-8 text-muted-foreground\">\n                <TrendingUp className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n                <p className=\"text-sm\">Henüz aktivite yok</p>\n              </div>\n            ) : (\n              recentActivities.map((activity, index) => {\n                const Icon = activity.icon;\n                return (\n                  <div key={index} className=\"flex items-center gap-3 p-3 bg-muted/20 rounded-lg\">\n                    <div className={`p-2 rounded-lg ${\n                      activity.type === 'question' ? 'bg-purple-100 text-purple-600 dark:bg-purple-900/20 dark:text-purple-400' :\n                      activity.type === 'exam' ? 'bg-green-100 text-green-600 dark:bg-green-900/20 dark:text-green-400' :\n                      'bg-blue-100 text-blue-600 dark:bg-blue-900/20 dark:text-blue-400'\n                    }`}>\n                      <Icon className=\"h-4 w-4\" />\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"text-sm font-medium text-foreground truncate\">{activity.title}</div>\n                      <div className=\"text-xs text-muted-foreground\">\n                        {new Date(activity.date || new Date()).toLocaleDateString('tr-TR')}\n                      </div>\n                    </div>\n                  </div>\n                );\n              })\n            )}\n          </div>\n        </div>\n      </main>\n      \n      {/* Add Question Log Dialog */}\n      <Dialog open={showQuestionDialog} onOpenChange={setShowQuestionDialog}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <Brain className=\"h-5 w-5 text-purple-600\" />\n              Soru Çözüm Kaydı Ekle\n            </DialogTitle>\n          </DialogHeader>\n          \n          <div className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-foreground mb-2\">Sınav Türü</label>\n                <Select value={newQuestion.exam_type} onValueChange={(value) => {\n                  setNewQuestion({ ...newQuestion, exam_type: value, subject: getSubjectOptions(value)[0] });\n                }}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"TYT\">TYT</SelectItem>\n                    <SelectItem value=\"AYT\">AYT</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div>\n                <label className=\"block text-sm font-medium text-foreground mb-2\">Ders</label>\n                <Select value={newQuestion.subject} onValueChange={(value) => setNewQuestion({ ...newQuestion, subject: value })}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {getSubjectOptions(newQuestion.exam_type).map((subject) => (\n                      <SelectItem key={subject} value={subject}>{subject}</SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n            \n            <div className=\"grid grid-cols-3 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-foreground mb-2\">✅ Doğru</label>\n                <Input\n                  type=\"number\"\n                  value={newQuestion.correct_count}\n                  onChange={(e) => setNewQuestion({ ...newQuestion, correct_count: e.target.value })}\n                  placeholder=\"0\"\n                  className=\"text-center font-semibold\"\n                />\n              </div>\n              \n              <div>\n                <label className=\"block text-sm font-medium text-foreground mb-2\">❌ Yanlış</label>\n                <Input\n                  type=\"number\"\n                  value={newQuestion.wrong_count}\n                  onChange={(e) => setNewQuestion({ ...newQuestion, wrong_count: e.target.value })}\n                  placeholder=\"0\"\n                  className=\"text-center font-semibold\"\n                />\n              </div>\n              \n              <div>\n                <label className=\"block text-sm font-medium text-foreground mb-2\">⭕ Boş</label>\n                <Input\n                  type=\"number\"\n                  value={newQuestion.blank_count}\n                  onChange={(e) => setNewQuestion({ ...newQuestion, blank_count: e.target.value })}\n                  placeholder=\"0\"\n                  className=\"text-center font-semibold\"\n                />\n              </div>\n            </div>\n\n            {/* Wrong Topics Input - NEW FEATURE */}\n            {parseInt(newQuestion.wrong_count) > 0 && (\n              <div className=\"bg-gradient-to-r from-red-50 to-orange-50 dark:from-red-950/30 dark:to-orange-950/30 p-4 rounded-xl border border-red-200 dark:border-red-800/50\">\n                <label className=\"block text-sm font-bold text-red-700 dark:text-red-300 mb-3 flex items-center gap-2\">\n                  <AlertTriangle className=\"h-4 w-4\" />\n                  🎯 Yanlış Yaptığın Konular (virgülle ayır)\n                </label>\n                <Input\n                  type=\"text\"\n                  value={wrongTopicInput}\n                  onChange={(e) => setWrongTopicInput(e.target.value)}\n                  placeholder=\"Örn: Analitik geometri, Trigonometri, Parabol\"\n                  className=\"border-red-300 focus:border-red-500 dark:border-red-700 dark:focus:border-red-400 bg-white dark:bg-red-950/20\"\n                />\n                <div className=\"mt-3 flex flex-wrap gap-2\">\n                  {wrongTopicInput.split(',').filter(t => t.trim()).map((topic, index) => (\n                    <Badge key={index} className=\"bg-gradient-to-r from-red-500 to-pink-500 text-white\">\n                      {topic.trim()}\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {/* Time Spent Input - NEW FEATURE */}\n            <div>\n              <label className=\"block text-sm font-medium text-foreground mb-2 flex items-center gap-2\">\n                <Clock className=\"h-4 w-4 text-blue-500\" />\n                ⏱️ Harcadığın Süre (dakika)\n              </label>\n              <Input\n                type=\"number\"\n                value={newQuestion.time_spent_minutes}\n                onChange={(e) => setNewQuestion({ ...newQuestion, time_spent_minutes: e.target.value })}\n                placeholder=\"30\"\n                className=\"text-center font-semibold\"\n              />\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium text-foreground mb-2\">Tarih</label>\n              <Input\n                type=\"date\"\n                value={newQuestion.study_date}\n                onChange={(e) => setNewQuestion({ ...newQuestion, study_date: e.target.value })}\n              />\n            </div>\n            \n            <div className=\"flex space-x-3 pt-2\">\n              <Button \n                onClick={() => {\n                  if (!newQuestion.correct_count && !newQuestion.wrong_count && !newQuestion.blank_count) {\n                    toast({ title: \"⚠️ Uyarı\", description: \"Lütfen en az bir alan doldurun.\", variant: \"destructive\" });\n                    return;\n                  }\n                  \n                  // Parse wrong topics from input\n                  const wrongTopics = wrongTopicInput\n                    .split(',')\n                    .map(topic => topic.trim())\n                    .filter(topic => topic.length > 0);\n                  \n                  createQuestionLogMutation.mutate({\n                    exam_type: newQuestion.exam_type as \"TYT\" | \"AYT\",\n                    subject: newQuestion.subject,\n                    correct_count: newQuestion.correct_count || \"0\",\n                    wrong_count: newQuestion.wrong_count || \"0\",\n                    blank_count: newQuestion.blank_count || \"0\",\n                    study_date: newQuestion.study_date,\n                    wrong_topics: wrongTopics,\n                    time_spent_minutes: newQuestion.time_spent_minutes ? parseInt(newQuestion.time_spent_minutes) : null\n                  });\n                }}\n                disabled={createQuestionLogMutation.isPending}\n                className=\"flex-1 bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-600 hover:to-emerald-600 shadow-lg\"\n              >\n                {createQuestionLogMutation.isPending ? \"⏳ Ekleniyor...\" : \"✅ Ekle\"}\n              </Button>\n              <Button \n                variant=\"secondary\"\n                onClick={() => setShowQuestionDialog(false)}\n                className=\"flex-1\"\n              >\n                İptal\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n      \n      {/* Add Exam Result Dialog */}\n      <Dialog open={showExamDialog} onOpenChange={setShowExamDialog}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <BarChart3 className=\"h-5 w-5 text-green-600\" />\n              Deneme Sınav Sonucu Ekle\n            </DialogTitle>\n          </DialogHeader>\n          \n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-foreground mb-2\">Deneme Adı <span className=\"text-red-500\">*</span></label>\n              <Input\n                value={newExamResult.exam_name}\n                onChange={(e) => setNewExamResult({ ...newExamResult, exam_name: e.target.value })}\n                placeholder=\"Örn: YKS Deneme 1\"\n              />\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium text-foreground mb-2\">Tarih <span className=\"text-red-500\">*</span></label>\n              <Input\n                type=\"date\"\n                value={newExamResult.exam_date}\n                onChange={(e) => setNewExamResult({ ...newExamResult, exam_date: e.target.value })}\n              />\n            </div>\n            \n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-foreground mb-2\">TYT Net <span className=\"text-red-500\">*</span></label>\n                <Input\n                  type=\"number\"\n                  step=\"0.1\"\n                  value={newExamResult.tyt_net}\n                  onChange={(e) => setNewExamResult({ ...newExamResult, tyt_net: e.target.value })}\n                  placeholder=\"0.0\"\n                />\n              </div>\n              \n              <div>\n                <label className=\"block text-sm font-medium text-foreground mb-2\">AYT Net <span className=\"text-red-500\">*</span></label>\n                <Input\n                  type=\"number\"\n                  step=\"0.1\"\n                  value={newExamResult.ayt_net}\n                  onChange={(e) => setNewExamResult({ ...newExamResult, ayt_net: e.target.value })}\n                  placeholder=\"0.0\"\n                />\n              </div>\n            </div>\n            \n            \n            <div>\n              <label className=\"block text-sm font-medium text-foreground mb-2\">Yanlış Yapılan Konular <span className=\"text-red-500\">*</span></label>\n              <Textarea\n                value={newExamResult.notes}\n                onChange={(e) => setNewExamResult({ ...newExamResult, notes: e.target.value })}\n                placeholder=\"Yanlış yaptığınız konuları belirtin...\"\n                className=\"h-20\"\n              />\n            </div>\n            \n            <div className=\"flex space-x-3 pt-2\">\n              <Button \n                onClick={() => {\n                  if (!newExamResult.exam_name || !newExamResult.tyt_net) {\n                    toast({ title: \"Uyarı\", description: \"Lütfen gerekli alanları doldurun.\", variant: \"destructive\" });\n                    return;\n                  }\n                  createExamResultMutation.mutate({\n                    ...newExamResult,\n                    tyt_net: newExamResult.tyt_net,\n                    ayt_net: newExamResult.ayt_net || \"0\"\n                  });\n                }}\n                disabled={createExamResultMutation.isPending}\n                className=\"flex-1\"\n              >\n                {createExamResultMutation.isPending ? \"Ekleniyor...\" : \"Ekle\"}\n              </Button>\n              <Button \n                variant=\"secondary\"\n                onClick={() => setShowExamDialog(false)}\n                className=\"flex-1\"\n              >\n                İptal\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":39585}},"version":1}